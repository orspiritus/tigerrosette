# -*- coding: utf-8 -*-
"""
TigerRozetka Telegram Bot - aiogram –≤–µ—Ä—Å–∏—è (–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
"""

import asyncio
import json
import sqlite3
import os
import uuid
from typing import List, Dict, Optional, Any, TYPE_CHECKING
from datetime import datetime, timedelta

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
try:
    import aiohttp
    from aiogram import Bot, Dispatcher, Router, F
    from aiogram.types import (
        Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
        BotCommand, WebAppInfo
    )
    from aiogram.filters import CommandStart, Command
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.state import State, StatesGroup
    from aiogram.fsm.storage.memory import MemoryStorage
    from dotenv import load_dotenv
    IMPORTS_OK = True
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {e}")
    print("üì¶ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install aiogram aiohttp python-dotenv")
    IMPORTS_OK = False
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å 'possibly unbound' (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    if TYPE_CHECKING:  # pragma: no cover
        from aiogram import Bot, Dispatcher, Router  # type: ignore
        from aiogram.types import Message, CallbackQuery  # type: ignore
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, WebAppInfo  # type: ignore
        from aiogram.filters import CommandStart, Command  # type: ignore
        from aiogram.fsm.state import State, StatesGroup  # type: ignore
        from aiogram.fsm.storage.memory import MemoryStorage  # type: ignore
    aiohttp = None  # type: ignore

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 'possibly unbound')
if IMPORTS_OK:
    try:  # type: ignore[misc]
        load_dotenv()  # type: ignore
    except Exception:
        pass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('VITE_TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN', '')
DATABASE_PATH = 'bot_users.db'
BACKEND_API_URL = 'http://localhost:3001'
GAME_URL = 'https://orspiritus.github.io/tigerrosette/'

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥—É—ç–ª–µ–π
if IMPORTS_OK:
    class DuelStates(StatesGroup):  # type: ignore
        selecting_opponent = State()  # type: ignore
        waiting_response = State()    # type: ignore
        in_game = State()             # type: ignore
else:
    class DuelStates:  # type: ignore
        selecting_opponent = object()
        waiting_response = object()
        in_game = object()

class TigerRozetkaBotManager:
    def __init__(self):
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                is_active BOOLEAN DEFAULT 1,
                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                level INTEGER DEFAULT 1,
                total_games INTEGER DEFAULT 0,
                wins INTEGER DEFAULT 0,
                losses INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS active_duels (
                id TEXT PRIMARY KEY,
                player1_id INTEGER,
                player2_id INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                game_data TEXT,
                FOREIGN KEY (player1_id) REFERENCES bot_users (user_id),
                FOREIGN KEY (player2_id) REFERENCES bot_users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot_manager = TigerRozetkaBotManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def register_user(user_id: int, username: Optional[str] = None, 
                       first_name: Optional[str] = None, last_name: Optional[str] = None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO bot_users 
        (user_id, username, first_name, last_name, last_seen)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, datetime.now()))
    
    conn.commit()
    conn.close()

async def get_active_players(exclude_user_id: Optional[int] = None) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–µ–π"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    week_ago = datetime.now() - timedelta(days=7)
    
    query = '''
        SELECT user_id, username, first_name, last_name, level, total_games, wins
        FROM bot_users 
        WHERE is_active = 1 AND last_seen > ?
    '''
    params: List[Any] = [week_ago]
    
    if exclude_user_id:
        query += ' AND user_id != ?'
        params.append(exclude_user_id)
    
    query += ' ORDER BY level DESC, wins DESC LIMIT 20'
    
    cursor.execute(query, params)
    players = []
    
    for row in cursor.fetchall():
        players.append({
            'id': row[0],
            'username': row[1],
            'firstName': row[2],
            'lastName': row[3],
            'level': row[4],
            'totalGames': row[5],
            'wins': row[6]
        })
    
    conn.close()
    return players

async def get_user_stats(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT level, total_games, wins, losses 
        FROM bot_users 
        WHERE user_id = ?
    ''', (user_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'level': result[0],
            'total_games': result[1],
            'wins': result[2],
            'losses': result[3]
        }
    return None

async def create_duel(from_user_id: int, to_user_id: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥—É—ç–ª–∏"""
    duel_id = str(uuid.uuid4())
    expires_at = datetime.now() + timedelta(minutes=5)
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO active_duels (id, player1_id, player2_id, expires_at)
        VALUES (?, ?, ?, ?)
    ''', (duel_id, from_user_id, to_user_id, expires_at))
    
    conn.commit()
    conn.close()
    
    return duel_id

async def get_duel_info(duel_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT player1_id, player2_id, status, expires_at
        FROM active_duels 
        WHERE id = ?
    ''', (duel_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'player1_id': result[0],
            'player2_id': result[1],
            'status': result[2],
            'expires_at': result[3]
        }
    return None

async def update_duel_status(duel_id: str, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥—É—ç–ª–∏"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute(
        'UPDATE active_duels SET status = ? WHERE id = ?',
        (status, duel_id)
    )
    
    conn.commit()
    conn.close()

async def cleanup_expired_duels():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM active_duels WHERE expires_at < datetime("now")')
    deleted = cursor.rowcount
    
    conn.commit()
    conn.close()
    
    if deleted > 0:
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π: {deleted}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
if IMPORTS_OK:
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    main_router = Router()

    # Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def user_registration_middleware(handler, event, data):
        """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if hasattr(event, 'from_user') and event.from_user:
            user = event.from_user
            await register_user(
                user.id, user.username, user.first_name, user.last_name
            )
        return await handler(event, data)

    # –ö–æ–º–∞–Ω–¥–∞ /start
    @main_router.message(CommandStart())  # type: ignore[arg-type]
    async def start_handler(message: "Message"):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not message.from_user:
            return
        user = message.from_user
        await register_user(user.id, user.username, user.first_name, user.last_name)
        
        welcome_text = f"""üêÖ‚ö° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TigerRozetka, {user.first_name}!

–û–ø–∞—Å–Ω–∞—è –∏–≥—Ä–∞ —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º –∂–¥–µ—Ç –≤–∞—Å!

üéÆ –ö–æ–º–∞–Ω–¥—ã:
/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/duel - –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–∏  
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ TigerRozetka", 
                web_app=WebAppInfo(url=GAME_URL)
            )],
            [InlineKeyboardButton(
                text="‚öîÔ∏è –î—É—ç–ª–∏", 
                callback_data="duel_menu"
            )]
        ])
        
        await message.answer(welcome_text, reply_markup=keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /play
    @main_router.message(Command("play"))  # type: ignore[arg-type]
    async def play_handler(message: "Message"):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ TigerRozetka", 
                web_app=WebAppInfo(url=GAME_URL)
            )]
        ])
        
        await message.answer(
            "üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º TigerRozetka!\n\n‚ö° –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∏–≥—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤—ã–∫–∞–Ω–∏–µ!",
            reply_markup=keyboard
        )

    # –ö–æ–º–∞–Ω–¥–∞ /duel
    @main_router.message(Command("duel"))  # type: ignore[arg-type]
    async def duel_command_handler(message: "Message"):
        """–ö–æ–º–∞–Ω–¥–∞ –¥—É—ç–ª–∏"""
        await show_duel_menu(message)

    async def show_duel_menu(message: "Message"):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥—É—ç–ª–µ–π"""
        if not message.from_user:
            return
        user_id = message.from_user.id
        players = await get_active_players(exclude_user_id=user_id)
        
        if not players:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", 
                    web_app=WebAppInfo(url=GAME_URL)
                )],
                [InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                    callback_data="refresh_players"
                )]
            ])
            
            await message.answer(
                "üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–∏.\n\n"
                "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞!",
                reply_markup=keyboard
            )
            return
        
        text = "‚öîÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–ª—è –¥—É—ç–ª–∏:\n\n"
        keyboard_buttons = []
        
        for i, player in enumerate(players[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 –∏–≥—Ä–æ–∫–æ–≤
            name = player['firstName']
            if player['lastName']:
                name += f" {player['lastName']}"
            if player['username']:
                name += f" (@{player['username']})"
            
            text += f"{i+1}. {name}\n"
            text += f"   ‚ö° –£—Ä–æ–≤–µ–Ω—å {player['level']} ‚Ä¢ üèÜ {player['wins']}/{player['totalGames']}\n\n"
            
            keyboard_buttons.append([InlineKeyboardButton(
                text=f"‚öîÔ∏è –í—ã–∑–≤–∞—Ç—å {player['firstName']}", 
                callback_data=f"challenge:{player['id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_players")],
            [InlineKeyboardButton(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=GAME_URL))]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        await message.answer(text, reply_markup=keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /stats
    @main_router.message(Command("stats"))  # type: ignore[arg-type]
    async def stats_handler(message: "Message"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.from_user:
            return
        user_id = message.from_user.id
        stats = await get_user_stats(user_id)
        
        if stats:
            win_rate = (stats['wins'] / stats['total_games'] * 100) if stats['total_games'] > 0 else 0
            
            text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚ö° –£—Ä–æ–≤–µ–Ω—å: {stats['level']}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}
üèÜ –ü–æ–±–µ–¥: {stats['wins']}
üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%

üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!"""
        else:
            text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=GAME_URL))],
            [InlineKeyboardButton(text="‚öîÔ∏è –î—É—ç–ª–∏", callback_data="duel_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    @main_router.callback_query(F.data == "duel_menu")  # type: ignore[attr-defined]
    async def duel_menu_callback(callback: "CallbackQuery"):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥—É—ç–ª–µ–π –∏–∑ callback"""
        await callback.answer()
        if callback.message:
            await show_duel_menu(callback.message)  # type: ignore[arg-type]

    @main_router.callback_query(F.data == "refresh_players")  # type: ignore[attr-defined]
    async def refresh_players_callback(callback: "CallbackQuery"):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤"""
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...")
        if callback.message:
            await show_duel_menu(callback.message)  # type: ignore[arg-type]

    @main_router.callback_query(F.data.startswith("challenge:"))  # type: ignore[attr-defined]
    async def challenge_callback(callback: "CallbackQuery"):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å"""
        await callback.answer()
        if not callback.data or not callback.from_user:
            return
        if callback.message is None:
            return
        target_user_id = int(callback.data.split(":")[1])
        challenger_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
        duel_id = await create_duel(challenger_id, target_user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await send_duel_notification(target_user_id, challenger_id, duel_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if callback.message is not None and hasattr(callback.message, 'edit_text'):
            msg_any: Any = callback.message
            await msg_any.edit_text(
            "‚öîÔ∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="duel_menu")]
            ])
            )

    async def send_duel_notification(to_user_id: int, from_user_id: int, duel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—É—ç–ª–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute(
                'SELECT first_name, level FROM bot_users WHERE user_id = ?', 
                (from_user_id,)
            )
            sender_info = cursor.fetchone()
            conn.close()
            
            if sender_info:
                sender_name, sender_level = sender_info
                
                text = f"""üéÆ‚öîÔ∏è –í–´–ó–û–í –ù–ê –î–£–≠–õ–¨!

{sender_name} (–£—Ä–æ–≤–µ–Ω—å {sender_level}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å –≤ TigerRozetka!

‚ö° –ò–≥—Ä–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
üèÜ –ö—Ç–æ –Ω–∞–±–µ—Ä–µ—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ - —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª!
‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å

–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"""

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", 
                            callback_data=f"accept_duel:{duel_id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                            callback_data=f"decline_duel:{duel_id}"
                        )
                    ],
                    [InlineKeyboardButton(
                        text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", 
                        web_app=WebAppInfo(url=GAME_URL)
                    )]
                ])
                
                await bot.send_message(to_user_id, text, reply_markup=keyboard)
                print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—É—ç–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {to_user_id}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    @main_router.callback_query(F.data.startswith("accept_duel:"))  # type: ignore[attr-defined]
    async def accept_duel_callback(callback: "CallbackQuery"):
        """–ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å"""
        await callback.answer()
        if not callback.data or not callback.from_user:
            return
        duel_id = callback.data.split(":")[1]
        user_id = callback.from_user.id  # noqa: F841
        
        duel_info = await get_duel_info(duel_id)
        
        if not duel_info:
            if callback.message and hasattr(callback.message, 'edit_text'):
                msg_any: Any = callback.message
                await msg_any.edit_text("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        try:
            expires_at_raw = duel_info['expires_at']
            if isinstance(expires_at_raw, str):
                expires_at = datetime.fromisoformat(expires_at_raw)
            else:
                expires_at = expires_at_raw  # type: ignore
            if expires_at < datetime.now():
                if callback.message and hasattr(callback.message, 'edit_text'):
                    msg_any: Any = callback.message
                    await msg_any.edit_text("‚è∞ –í—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
                return
        except Exception:
            pass
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥—É—ç–ª—å
        await update_duel_status(duel_id, 'accepted')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        game_url_with_duel = f"{GAME_URL}?duel={duel_id}"
        
        duel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üéÆ –ù–∞—á–∞—Ç—å –¥—É—ç–ª—å!", 
                web_app=WebAppInfo(url=game_url_with_duel)
            )]
        ])
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        await bot.send_message(
            duel_info['player1_id'],
            "‚úÖ –í–∞—à –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç! –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n"
            "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É:",
            reply_markup=duel_keyboard
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–Ω—è–≤—à–µ–≥–æ
        if callback.message and hasattr(callback.message, 'edit_text'):
            msg_any: Any = callback.message
            await msg_any.edit_text(
                "‚öîÔ∏è –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –£–¥–∞—á–∏!\n\n"
                "üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É:",
                reply_markup=duel_keyboard
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º backend
        await notify_backend_duel_start(duel_id, duel_info['player1_id'], duel_info['player2_id'])

    @main_router.callback_query(F.data.startswith("decline_duel:"))  # type: ignore[attr-defined]
    async def decline_duel_callback(callback: "CallbackQuery"):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥—É—ç–ª—å"""
        await callback.answer()
        if not callback.data:
            return
        duel_id = callback.data.split(":")[1]
        duel_info = await get_duel_info(duel_id)
        
        if duel_info:
            # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å
            conn = sqlite3.connect(DATABASE_PATH)
            cursor = conn.cursor()
            cursor.execute('DELETE FROM active_duels WHERE id = ?', (duel_id,))
            conn.commit()
            conn.close()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
            await bot.send_message(
                duel_info['player1_id'],
                "‚ùå –í–∞—à –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"
            )
        
        if callback.message and hasattr(callback.message, 'edit_text'):
            msg_any: Any = callback.message
            await msg_any.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å")

    async def notify_backend_duel_start(duel_id: str, player1_id: int, player2_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ backend –æ –Ω–∞—á–∞–ª–µ –¥—É—ç–ª–∏"""
        try:
            if aiohttp is None:  # type: ignore
                return
            async with aiohttp.ClientSession() as session:  # type: ignore[attr-defined]
                data = {
                    'duelId': duel_id,
                    'player1Id': player1_id,
                    'player2Id': player2_id,
                    'status': 'started'
                }
                
                async with session.post(f'{BACKEND_API_URL}/api/duels/start', json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ Backend —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –¥—É—ç–ª–∏: {duel_id}")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è backend: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å backend: {e}")

    # API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å frontend
    async def api_get_available_players(user_id: int) -> List[Dict[str, Any]]:
        """API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        return await get_active_players(exclude_user_id=user_id)

    async def api_create_duel_challenge(from_user_id: int, to_user_id: int) -> str:
        """API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å"""
        duel_id = await create_duel(from_user_id, to_user_id)
        await send_duel_notification(to_user_id, from_user_id, duel_id)
        return duel_id

    # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏
    async def cleanup_task():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π"""
        while True:
            await cleanup_expired_duels()
            await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    async def set_bot_commands():
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="play", description="üéÆ –ò–≥—Ä–∞—Ç—å –≤ TigerRozetka"),
            BotCommand(command="duel", description="‚öîÔ∏è –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–∏"),
            BotCommand(command="stats", description="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ]
        await bot.set_my_commands(commands)

    # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
    async def main():
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(main_router)
        
        print("üöÄ TigerRozetka Bot (aiogram) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await set_bot_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
        asyncio.create_task(cleanup_task())
        
        print("‚úÖ TigerRozetka Bot –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: /start, /duel, /stats, /play")
        print("üîó Backend API:  http://localhost:3001")
        print("üåê Frontend:     http://localhost:5173")
        print("üì± Game URL:     https://orspiritus.github.io/tigerrosette/")
        print("")
        print("üí° –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ–∫–Ω–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot, drop_pending_updates=True)

    if __name__ == '__main__':
        asyncio.run(main())
else:
    print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiogram aiohttp python-dotenv")
    
    # –ó–∞–≥–ª—É—à–∫–∞ main —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async def main():
        print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
    if __name__ == '__main__':
        asyncio.run(main())
