import{O as o,gW as _,b_ as h,L as v,ff as m}from"./pointsCloudSystem-2vcS-S4d.js";var c;(function(t){t[t.INIT=0]="INIT",t[t.STARTED=1]="STARTED",t[t.ENDED=2]="ENDED"})(c||(c={}));function O(t){let e=0;const s=Date.now();t.observableParameters=t.observableParameters??{};const a=t.contextObservable.add(r=>{const i=Date.now();e=i-s;const n={startTime:s,currentTime:i,deltaTime:e,completeRate:e/t.timeout,payload:r};t.onTick&&t.onTick(n),t.breakCondition&&t.breakCondition()&&(t.contextObservable.remove(a),t.onAborted&&t.onAborted(n)),e>=t.timeout&&(t.contextObservable.remove(a),t.onEnded&&t.onEnded(n))},t.observableParameters.mask,t.observableParameters.insertFirst,t.observableParameters.scope);return a}class u{constructor(e){this.onEachCountObservable=new o,this.onTimerAbortedObservable=new o,this.onTimerEndedObservable=new o,this.onStateChangedObservable=new o,this._observer=null,this._breakOnNextTick=!1,this._tick=s=>{const a=Date.now();this._timer=a-this._startTime;const r={startTime:this._startTime,currentTime:a,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:s},i=this._breakOnNextTick||this._breakCondition(r);i||this._timer>=this._timeToEnd?this._stop(r,i):this.onEachCountObservable.notifyObservers(r)},this._setState(0),this._contextObservable=e.contextObservable,this._observableParameters=e.observableParameters??{},this._breakCondition=e.breakCondition??(()=>!1),this._timeToEnd=e.timeout,e.onEnded&&this.onTimerEndedObservable.add(e.onEnded),e.onTick&&this.onEachCountObservable.add(e.onTick),e.onAborted&&this.onTimerAbortedObservable.add(e.onAborted)}set breakCondition(e){this._breakCondition=e}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(e=this._timeToEnd){if(this._state===1)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=e,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){this._state===1&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(e){this._state=e,this.onStateChangedObservable.notifyObservers(this._state)}_stop(e,s=!1){this._contextObservable.remove(this._observer),this._setState(2),s?this.onTimerAbortedObservable.notifyObservers(e):this.onTimerEndedObservable.notifyObservers(e)}}class l extends _{constructor(e){super(e),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",h),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",h,-1)}_preparePendingTasks(e){const s=this.duration.getValue(e);if(s<0||isNaN(s)||!isFinite(s))return this._reportError(e,"Invalid duration in SetDelay block");if(e._getGlobalContextVariable("activeDelays",0)>=l.MaxParallelDelayCount)return this._reportError(e,"Max parallel delays reached");const r=e._getGlobalContextVariable("lastDelayIndex",-1),i=e._getExecutionVariable(this,"pendingDelays",[]),n=e.configuration.scene,b=new u({timeout:s*1e3,contextObservable:n.onBeforeRenderObservable,onEnded:()=>this._onEnded(b,e)});b.start();const d=r+1;this.lastDelayIndex.setValue(d,e),e._setGlobalContextVariable("lastDelayIndex",d),i[d]=b,e._setExecutionVariable(this,"pendingDelays",i)}_cancelPendingTasks(e){const s=e._getExecutionVariable(this,"pendingDelays",[]);for(const a of s)a==null||a.dispose();e._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(-1,e)}_execute(e,s){if(s===this.cancel){this._cancelPendingTasks(e);return}else this._preparePendingTasks(e),this.out._activateSignal(e)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(e,s){const a=s._getExecutionVariable(this,"pendingDelays",[]),r=a.indexOf(e);r!==-1?a.splice(r,1):v.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),s._removePendingBlock(this),this.done._activateSignal(s)}}l.MaxParallelDelayCount=100;m("FlowGraphSetDelayBlock",l);const f=Object.freeze(Object.defineProperty({__proto__:null,FlowGraphSetDelayBlock:l},Symbol.toStringTag,{value:"Module"}));export{u as A,l as F,c as T,f,O as s};
//# sourceMappingURL=flowGraphSetDelayBlock-BBfSTBoS.js.map
