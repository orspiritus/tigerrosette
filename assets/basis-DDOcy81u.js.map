{"version":3,"file":"basis-DDOcy81u.js","sources":["../../node_modules/@babylonjs/core/Misc/basisWorker.js","../../node_modules/@babylonjs/core/Misc/basis.js"],"sourcesContent":["import { Tools } from \"./tools.js\";\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\n */\nexport function workerFunction() {\n    const _BASIS_FORMAT = {\n        cTFETC1: 0,\n        cTFETC2: 1,\n        cTFBC1: 2,\n        cTFBC3: 3,\n        cTFBC4: 4,\n        cTFBC5: 5,\n        cTFBC7: 6,\n        cTFPVRTC1_4_RGB: 8,\n        cTFPVRTC1_4_RGBA: 9,\n        cTFASTC_4x4: 10,\n        cTFATC_RGB: 11,\n        cTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n        cTFRGBA32: 13,\n        cTFRGB565: 14,\n        cTFBGR565: 15,\n        cTFRGBA4444: 16,\n        cTFFXT1_RGB: 17,\n        cTFPVRTC2_4_RGB: 18,\n        cTFPVRTC2_4_RGBA: 19,\n        cTFETC2_EAC_R11: 20,\n        cTFETC2_EAC_RG11: 21,\n    };\n    let transcoderModulePromise = null;\n    onmessage = (event) => {\n        if (event.data.action === \"init\") {\n            // Load the transcoder if it hasn't been yet\n            if (event.data.url) {\n                // make sure we loaded the script correctly\n                try {\n                    importScripts(event.data.url);\n                }\n                catch (e) {\n                    postMessage({ action: \"error\", error: e });\n                }\n            }\n            if (!transcoderModulePromise) {\n                transcoderModulePromise = BASIS({\n                    // Override wasm binary\n                    wasmBinary: event.data.wasmBinary,\n                });\n            }\n            if (transcoderModulePromise !== null) {\n                transcoderModulePromise.then((m) => {\n                    BASIS = m;\n                    m.initializeBasis();\n                    postMessage({ action: \"init\" });\n                });\n            }\n        }\n        else if (event.data.action === \"transcode\") {\n            // Transcode the basis image and return the resulting pixels\n            const config = event.data.config;\n            const imgData = event.data.imageData;\n            const loadedFile = new BASIS.BasisFile(imgData);\n            const fileInfo = GetFileInfo(loadedFile);\n            let format = event.data.ignoreSupportedFormats ? null : GetSupportedTranscodeFormat(event.data.config, fileInfo);\n            let needsConversion = false;\n            if (format === null) {\n                needsConversion = true;\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            // Begin transcode\n            let success = true;\n            if (!loadedFile.startTranscoding()) {\n                success = false;\n            }\n            const buffers = [];\n            for (let imageIndex = 0; imageIndex < fileInfo.images.length; imageIndex++) {\n                if (!success) {\n                    break;\n                }\n                const image = fileInfo.images[imageIndex];\n                if (config.loadSingleImage === undefined || config.loadSingleImage === imageIndex) {\n                    let mipCount = image.levels.length;\n                    if (config.loadMipmapLevels === false) {\n                        mipCount = 1;\n                    }\n                    for (let levelIndex = 0; levelIndex < mipCount; levelIndex++) {\n                        const levelInfo = image.levels[levelIndex];\n                        const pixels = TranscodeLevel(loadedFile, imageIndex, levelIndex, format, needsConversion);\n                        if (!pixels) {\n                            success = false;\n                            break;\n                        }\n                        levelInfo.transcodedPixels = pixels;\n                        buffers.push(levelInfo.transcodedPixels.buffer);\n                    }\n                }\n            }\n            // Close file\n            loadedFile.close();\n            loadedFile.delete();\n            if (needsConversion) {\n                format = -1;\n            }\n            if (!success) {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id });\n            }\n            else {\n                postMessage({ action: \"transcode\", success: success, id: event.data.id, fileInfo: fileInfo, format: format }, buffers);\n            }\n        }\n    };\n    /**\n     * Detects the supported transcode format for the file\n     * @param config transcode config\n     * @param fileInfo info about the file\n     * @returns the chosed format or null if none are supported\n     */\n    function GetSupportedTranscodeFormat(config, fileInfo) {\n        let format = null;\n        if (config.supportedCompressionFormats) {\n            if (config.supportedCompressionFormats.astc) {\n                format = _BASIS_FORMAT.cTFASTC_4x4;\n            }\n            else if (config.supportedCompressionFormats.bc7) {\n                format = _BASIS_FORMAT.cTFBC7;\n            }\n            else if (config.supportedCompressionFormats.s3tc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFBC3 : _BASIS_FORMAT.cTFBC1;\n            }\n            else if (config.supportedCompressionFormats.pvrtc) {\n                format = fileInfo.hasAlpha ? _BASIS_FORMAT.cTFPVRTC1_4_RGBA : _BASIS_FORMAT.cTFPVRTC1_4_RGB;\n            }\n            else if (config.supportedCompressionFormats.etc2) {\n                format = _BASIS_FORMAT.cTFETC2;\n            }\n            else if (config.supportedCompressionFormats.etc1) {\n                format = _BASIS_FORMAT.cTFETC1;\n            }\n            else {\n                format = _BASIS_FORMAT.cTFRGB565;\n            }\n        }\n        return format;\n    }\n    /**\n     * Retrieves information about the basis file eg. dimensions\n     * @param basisFile the basis file to get the info from\n     * @returns information about the basis file\n     */\n    function GetFileInfo(basisFile) {\n        const hasAlpha = basisFile.getHasAlpha();\n        const imageCount = basisFile.getNumImages();\n        const images = [];\n        for (let i = 0; i < imageCount; i++) {\n            const imageInfo = {\n                levels: [],\n            };\n            const levelCount = basisFile.getNumLevels(i);\n            for (let level = 0; level < levelCount; level++) {\n                const levelInfo = {\n                    width: basisFile.getImageWidth(i, level),\n                    height: basisFile.getImageHeight(i, level),\n                };\n                imageInfo.levels.push(levelInfo);\n            }\n            images.push(imageInfo);\n        }\n        const info = { hasAlpha, images };\n        return info;\n    }\n    function TranscodeLevel(loadedFile, imageIndex, levelIndex, format, convertToRgb565) {\n        const dstSize = loadedFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, format);\n        let dst = new Uint8Array(dstSize);\n        if (!loadedFile.transcodeImage(dst, imageIndex, levelIndex, format, 1, 0)) {\n            return null;\n        }\n        // If no supported format is found, load as dxt and convert to rgb565\n        if (convertToRgb565) {\n            const alignedWidth = (loadedFile.getImageWidth(imageIndex, levelIndex) + 3) & ~3;\n            const alignedHeight = (loadedFile.getImageHeight(imageIndex, levelIndex) + 3) & ~3;\n            dst = ConvertDxtToRgb565(dst, 0, alignedWidth, alignedHeight);\n        }\n        return dst;\n    }\n    /**\n     * From https://github.com/BinomialLLC/basis_universal/blob/master/webgl/texture/dxt-to-rgb565.js\n     * An unoptimized version of dxtToRgb565.  Also, the floating\n     * point math used to compute the colors actually results in\n     * slightly different colors compared to hardware DXT decoders.\n     * @param src dxt src pixels\n     * @param srcByteOffset offset for the start of src\n     * @param  width aligned width of the image\n     * @param  height aligned height of the image\n     * @returns the converted pixels\n     */\n    function ConvertDxtToRgb565(src, srcByteOffset, width, height) {\n        const c = new Uint16Array(4);\n        const dst = new Uint16Array(width * height);\n        const blockWidth = width / 4;\n        const blockHeight = height / 4;\n        for (let blockY = 0; blockY < blockHeight; blockY++) {\n            for (let blockX = 0; blockX < blockWidth; blockX++) {\n                const i = srcByteOffset + 8 * (blockY * blockWidth + blockX);\n                c[0] = src[i] | (src[i + 1] << 8);\n                c[1] = src[i + 2] | (src[i + 3] << 8);\n                c[2] =\n                    ((2 * (c[0] & 0x1f) + 1 * (c[1] & 0x1f)) / 3) |\n                        (((2 * (c[0] & 0x7e0) + 1 * (c[1] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[0] & 0xf800) + 1 * (c[1] & 0xf800)) / 3) & 0xf800);\n                c[3] =\n                    ((2 * (c[1] & 0x1f) + 1 * (c[0] & 0x1f)) / 3) |\n                        (((2 * (c[1] & 0x7e0) + 1 * (c[0] & 0x7e0)) / 3) & 0x7e0) |\n                        (((2 * (c[1] & 0xf800) + 1 * (c[0] & 0xf800)) / 3) & 0xf800);\n                for (let row = 0; row < 4; row++) {\n                    const m = src[i + 4 + row];\n                    let dstI = (blockY * 4 + row) * width + blockX * 4;\n                    dst[dstI++] = c[m & 0x3];\n                    dst[dstI++] = c[(m >> 2) & 0x3];\n                    dst[dstI++] = c[(m >> 4) & 0x3];\n                    dst[dstI++] = c[(m >> 6) & 0x3];\n                }\n            }\n        }\n        return dst;\n    }\n}\n/**\n * Initialize a web worker with the basis transcoder\n * @param worker the worker to initialize\n * @param wasmBinary the wasm binary to load into the worker\n * @param moduleUrl the url to the basis transcoder module\n * @returns a promise that resolves when the worker is initialized\n */\nexport function initializeWebWorker(worker, wasmBinary, moduleUrl) {\n    return new Promise((res, reject) => {\n        const initHandler = (msg) => {\n            if (msg.data.action === \"init\") {\n                worker.removeEventListener(\"message\", initHandler);\n                res(worker);\n            }\n            else if (msg.data.action === \"error\") {\n                reject(msg.data.error || \"error initializing worker\");\n            }\n        };\n        worker.addEventListener(\"message\", initHandler);\n        // we can use transferable objects here because the worker will own the ArrayBuffer\n        worker.postMessage({ action: \"init\", url: moduleUrl ? Tools.GetBabylonScriptURL(moduleUrl) : undefined, wasmBinary }, [wasmBinary]);\n    });\n}\n//# sourceMappingURL=basisWorker.js.map","import { Tools } from \"./tools.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { InternalTexture } from \"../Materials/Textures/internalTexture.js\";\n\nimport { initializeWebWorker, workerFunction } from \"./basisWorker.js\";\n/**\n * Info about the .basis files\n */\nexport class BasisFileInfo {\n}\n/**\n * Result of transcoding a basis file\n */\nclass TranscodeResult {\n}\n/**\n * Configuration options for the Basis transcoder\n */\nexport class BasisTranscodeConfiguration {\n}\n/**\n * @internal\n * Enum of basis transcoder formats\n */\nvar BASIS_FORMATS;\n(function (BASIS_FORMATS) {\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC1\"] = 0] = \"cTFETC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2\"] = 1] = \"cTFETC2\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC1\"] = 2] = \"cTFBC1\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC3\"] = 3] = \"cTFBC3\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC4\"] = 4] = \"cTFBC4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC5\"] = 5] = \"cTFBC5\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBC7\"] = 6] = \"cTFBC7\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGB\"] = 8] = \"cTFPVRTC1_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC1_4_RGBA\"] = 9] = \"cTFPVRTC1_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFASTC_4x4\"] = 10] = \"cTFASTC_4x4\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGB\"] = 11] = \"cTFATC_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFATC_RGBA_INTERPOLATED_ALPHA\"] = 12] = \"cTFATC_RGBA_INTERPOLATED_ALPHA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA32\"] = 13] = \"cTFRGBA32\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGB565\"] = 14] = \"cTFRGB565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFBGR565\"] = 15] = \"cTFBGR565\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFRGBA4444\"] = 16] = \"cTFRGBA4444\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFFXT1_RGB\"] = 17] = \"cTFFXT1_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGB\"] = 18] = \"cTFPVRTC2_4_RGB\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFPVRTC2_4_RGBA\"] = 19] = \"cTFPVRTC2_4_RGBA\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_R11\"] = 20] = \"cTFETC2_EAC_R11\";\n    BASIS_FORMATS[BASIS_FORMATS[\"cTFETC2_EAC_RG11\"] = 21] = \"cTFETC2_EAC_RG11\";\n})(BASIS_FORMATS || (BASIS_FORMATS = {}));\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisToolsOptions = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.js`,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: `${Tools._DefaultCdnUrl}/basisTranscoder/1/basis_transcoder.wasm`,\n};\n/**\n * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n * @param basisFormat format chosen from GetSupportedTranscodeFormat\n * @param engine\n * @returns internal format corresponding to the Basis format\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const GetInternalFormatFromBasisFormat = (basisFormat, engine) => {\n    let format;\n    switch (basisFormat) {\n        case BASIS_FORMATS.cTFETC1:\n            format = 36196;\n            break;\n        case BASIS_FORMATS.cTFBC1:\n            format = 33776;\n            break;\n        case BASIS_FORMATS.cTFBC4:\n            format = 33779;\n            break;\n        case BASIS_FORMATS.cTFASTC_4x4:\n            format = 37808;\n            break;\n        case BASIS_FORMATS.cTFETC2:\n            format = 37496;\n            break;\n        case BASIS_FORMATS.cTFBC7:\n            format = 36492;\n            break;\n    }\n    if (format === undefined) {\n        // eslint-disable-next-line no-throw-literal\n        throw \"The chosen Basis transcoder format is not currently supported\";\n    }\n    return format;\n};\nlet _WorkerPromise = null;\nlet _Worker = null;\nlet _actionId = 0;\nconst _IgnoreSupportedFormats = false;\nconst _CreateWorkerAsync = () => {\n    if (!_WorkerPromise) {\n        _WorkerPromise = new Promise((res, reject) => {\n            if (_Worker) {\n                res(_Worker);\n            }\n            else {\n                Tools.LoadFileAsync(Tools.GetBabylonScriptURL(BasisToolsOptions.WasmModuleURL))\n                    .then((wasmBinary) => {\n                    if (typeof URL !== \"function\") {\n                        return reject(\"Basis transcoder requires an environment with a URL constructor\");\n                    }\n                    const workerBlobUrl = URL.createObjectURL(new Blob([`(${workerFunction})()`], { type: \"application/javascript\" }));\n                    _Worker = new Worker(workerBlobUrl);\n                    initializeWebWorker(_Worker, wasmBinary, BasisToolsOptions.JSModuleURL).then(res, reject);\n                })\n                    .catch(reject);\n            }\n        });\n    }\n    return _WorkerPromise;\n};\n/**\n * Set the worker to use for transcoding\n * @param worker The worker that will be used for transcoding\n */\nexport const SetBasisTranscoderWorker = (worker) => {\n    _Worker = worker;\n};\n/**\n * Transcodes a loaded image file to compressed pixel data\n * @param data image data to transcode\n * @param config configuration options for the transcoding\n * @returns a promise resulting in the transcoded image\n */\nexport const TranscodeAsync = (data, config) => {\n    const dataView = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\n    return new Promise((res, rej) => {\n        _CreateWorkerAsync().then(() => {\n            const actionId = _actionId++;\n            const messageHandler = (msg) => {\n                if (msg.data.action === \"transcode\" && msg.data.id === actionId) {\n                    _Worker.removeEventListener(\"message\", messageHandler);\n                    if (!msg.data.success) {\n                        rej(\"Transcode is not supported on this device\");\n                    }\n                    else {\n                        res(msg.data);\n                    }\n                }\n            };\n            _Worker.addEventListener(\"message\", messageHandler);\n            const dataViewCopy = new Uint8Array(dataView.byteLength);\n            dataViewCopy.set(new Uint8Array(dataView.buffer, dataView.byteOffset, dataView.byteLength));\n            _Worker.postMessage({ action: \"transcode\", id: actionId, imageData: dataViewCopy, config: config, ignoreSupportedFormats: _IgnoreSupportedFormats }, [\n                dataViewCopy.buffer,\n            ]);\n        }, (error) => {\n            rej(error);\n        });\n    });\n};\n/**\n * Binds a texture according to its underlying target.\n * @param texture texture to bind\n * @param engine the engine to bind the texture in\n */\nconst BindTexture = (texture, engine) => {\n    let target = engine._gl?.TEXTURE_2D;\n    if (texture.isCube) {\n        target = engine._gl?.TEXTURE_CUBE_MAP;\n    }\n    engine._bindTextureDirectly(target, texture, true);\n};\n/**\n * Loads a texture from the transcode result\n * @param texture texture load to\n * @param transcodeResult the result of transcoding the basis file to load from\n */\nexport const LoadTextureFromTranscodeResult = (texture, transcodeResult) => {\n    const engine = texture.getEngine();\n    for (let i = 0; i < transcodeResult.fileInfo.images.length; i++) {\n        const rootImage = transcodeResult.fileInfo.images[i].levels[0];\n        texture._invertVScale = texture.invertY;\n        if (transcodeResult.format === -1 || transcodeResult.format === BASIS_FORMATS.cTFRGB565) {\n            // No compatable compressed format found, fallback to RGB\n            texture.type = 10;\n            texture.format = 4;\n            if (engine._features.basisNeedsPOT && (Math.log2(rootImage.width) % 1 !== 0 || Math.log2(rootImage.height) % 1 !== 0)) {\n                // Create non power of two texture\n                const source = new InternalTexture(engine, 2 /* InternalTextureSource.Temp */);\n                texture._invertVScale = texture.invertY;\n                source.type = 10;\n                source.format = 4;\n                // Fallback requires aligned width/height\n                source.width = (rootImage.width + 3) & ~3;\n                source.height = (rootImage.height + 3) & ~3;\n                BindTexture(source, engine);\n                engine._uploadDataToTextureDirectly(source, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, 4, true);\n                // Resize to power of two\n                engine._rescaleTexture(source, texture, engine.scenes[0], engine._getInternalFormat(4), () => {\n                    engine._releaseTexture(source);\n                    BindTexture(texture, engine);\n                });\n            }\n            else {\n                // Fallback is already inverted\n                texture._invertVScale = !texture.invertY;\n                // Upload directly\n                texture.width = (rootImage.width + 3) & ~3;\n                texture.height = (rootImage.height + 3) & ~3;\n                texture.samplingMode = 2;\n                BindTexture(texture, engine);\n                engine._uploadDataToTextureDirectly(texture, new Uint16Array(rootImage.transcodedPixels.buffer), i, 0, 4, true);\n            }\n        }\n        else {\n            texture.width = rootImage.width;\n            texture.height = rootImage.height;\n            texture.generateMipMaps = transcodeResult.fileInfo.images[i].levels.length > 1;\n            const format = BasisTools.GetInternalFormatFromBasisFormat(transcodeResult.format, engine);\n            texture.format = format;\n            BindTexture(texture, engine);\n            // Upload all mip levels in the file\n            transcodeResult.fileInfo.images[i].levels.forEach((level, index) => {\n                engine._uploadCompressedDataToTextureDirectly(texture, format, level.width, level.height, level.transcodedPixels, i, index);\n            });\n            if (engine._features.basisNeedsPOT && (Math.log2(texture.width) % 1 !== 0 || Math.log2(texture.height) % 1 !== 0)) {\n                Tools.Warn(\"Loaded .basis texture width and height are not a power of two. Texture wrapping will be set to Texture.CLAMP_ADDRESSMODE as other modes are not supported with non power of two dimensions in webGL 1.\");\n                texture._cachedWrapU = Texture.CLAMP_ADDRESSMODE;\n                texture._cachedWrapV = Texture.CLAMP_ADDRESSMODE;\n            }\n        }\n    }\n};\n/**\n * Used to load .Basis files\n * See https://github.com/BinomialLLC/basis_universal/tree/master/webgl\n */\nexport const BasisTools = {\n    /**\n     * URL to use when loading the basis transcoder\n     */\n    JSModuleURL: BasisToolsOptions.JSModuleURL,\n    /**\n     * URL to use when loading the wasm module for the transcoder\n     */\n    WasmModuleURL: BasisToolsOptions.WasmModuleURL,\n    /**\n     * Get the internal format to be passed to texImage2D corresponding to the .basis format value\n     * @param basisFormat format chosen from GetSupportedTranscodeFormat\n     * @returns internal format corresponding to the Basis format\n     */\n    GetInternalFormatFromBasisFormat,\n    /**\n     * Transcodes a loaded image file to compressed pixel data\n     * @param data image data to transcode\n     * @param config configuration options for the transcoding\n     * @returns a promise resulting in the transcoded image\n     */\n    TranscodeAsync,\n    /**\n     * Loads a texture from the transcode result\n     * @param texture texture load to\n     * @param transcodeResult the result of transcoding the basis file to load from\n     */\n    LoadTextureFromTranscodeResult,\n};\nObject.defineProperty(BasisTools, \"JSModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.JSModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.JSModuleURL = value;\n    },\n});\nObject.defineProperty(BasisTools, \"WasmModuleURL\", {\n    get: function () {\n        return BasisToolsOptions.WasmModuleURL;\n    },\n    set: function (value) {\n        BasisToolsOptions.WasmModuleURL = value;\n    },\n});\n//# sourceMappingURL=basis.js.map"],"names":["workerFunction","_BASIS_FORMAT","transcoderModulePromise","event","e","m","config","imgData","loadedFile","fileInfo","GetFileInfo","format","GetSupportedTranscodeFormat","needsConversion","success","buffers","imageIndex","image","mipCount","levelIndex","levelInfo","pixels","TranscodeLevel","basisFile","hasAlpha","imageCount","images","i","imageInfo","levelCount","level","convertToRgb565","dstSize","dst","alignedWidth","alignedHeight","ConvertDxtToRgb565","src","srcByteOffset","width","height","c","blockWidth","blockHeight","blockY","blockX","row","dstI","initializeWebWorker","worker","wasmBinary","moduleUrl","res","reject","initHandler","msg","Tools","BasisFileInfo","BasisTranscodeConfiguration","BASIS_FORMATS","BasisToolsOptions","GetInternalFormatFromBasisFormat","basisFormat","engine","_WorkerPromise","_Worker","_actionId","_IgnoreSupportedFormats","_CreateWorkerAsync","workerBlobUrl","SetBasisTranscoderWorker","TranscodeAsync","data","dataView","rej","actionId","messageHandler","dataViewCopy","error","BindTexture","texture","target","_a","_b","LoadTextureFromTranscodeResult","transcodeResult","rootImage","source","InternalTexture","BasisTools","index","Texture","value"],"mappings":"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","x_google_ignoreList":[0,1]}