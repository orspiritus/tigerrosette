{"version":3,"file":"exrLoader.configuration-BDKsI_eb.js","sources":["../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.interfaces.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.core.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.compression.huf.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.configuration.js"],"sourcesContent":["export const INT32_SIZE = 4;\nexport const FLOAT32_SIZE = 4;\nexport const INT8_SIZE = 1;\nexport const INT16_SIZE = 2;\nexport const ULONG_SIZE = 8;\nexport const USHORT_RANGE = 1 << 16;\nexport const BITMAP_SIZE = USHORT_RANGE >> 3;\nexport const HUF_ENCBITS = 16;\nexport const HUF_DECBITS = 14;\nexport const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1;\nexport const HUF_DECSIZE = 1 << HUF_DECBITS;\nexport const HUF_DECMASK = HUF_DECSIZE - 1;\nexport const SHORT_ZEROCODE_RUN = 59;\nexport const LONG_ZEROCODE_RUN = 63;\nexport const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n//# sourceMappingURL=exrLoader.interfaces.js.map","import { Clamp } from \"../../../../Maths/math.scalar.functions.js\";\nimport { FLOAT32_SIZE, INT16_SIZE, INT32_SIZE, INT8_SIZE, ULONG_SIZE } from \"./exrLoader.interfaces.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nexport var CompressionCodes;\n(function (CompressionCodes) {\n    CompressionCodes[CompressionCodes[\"NO_COMPRESSION\"] = 0] = \"NO_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"RLE_COMPRESSION\"] = 1] = \"RLE_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"ZIPS_COMPRESSION\"] = 2] = \"ZIPS_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"ZIP_COMPRESSION\"] = 3] = \"ZIP_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"PIZ_COMPRESSION\"] = 4] = \"PIZ_COMPRESSION\";\n    CompressionCodes[CompressionCodes[\"PXR24_COMPRESSION\"] = 5] = \"PXR24_COMPRESSION\";\n})(CompressionCodes || (CompressionCodes = {}));\nvar LineOrders;\n(function (LineOrders) {\n    LineOrders[LineOrders[\"INCREASING_Y\"] = 0] = \"INCREASING_Y\";\n    LineOrders[LineOrders[\"DECREASING_Y\"] = 1] = \"DECREASING_Y\";\n})(LineOrders || (LineOrders = {}));\nconst _tables = _GenerateTables();\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\nfunction _GenerateTables() {\n    // float32 to float16 helpers\n    const buffer = new ArrayBuffer(4);\n    const floatView = new Float32Array(buffer);\n    const uint32View = new Uint32Array(buffer);\n    const baseTable = new Uint32Array(512);\n    const shiftTable = new Uint32Array(512);\n    for (let i = 0; i < 256; ++i) {\n        const e = i - 127;\n        // very small number (0, -0)\n        if (e < -27) {\n            baseTable[i] = 0x0000;\n            baseTable[i | 0x100] = 0x8000;\n            shiftTable[i] = 24;\n            shiftTable[i | 0x100] = 24;\n            // small number (denorm)\n        }\n        else if (e < -14) {\n            baseTable[i] = 0x0400 >> (-e - 14);\n            baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\n            shiftTable[i] = -e - 1;\n            shiftTable[i | 0x100] = -e - 1;\n            // normal number\n        }\n        else if (e <= 15) {\n            baseTable[i] = (e + 15) << 10;\n            baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\n            shiftTable[i] = 13;\n            shiftTable[i | 0x100] = 13;\n            // large number (Infinity, -Infinity)\n        }\n        else if (e < 128) {\n            baseTable[i] = 0x7c00;\n            baseTable[i | 0x100] = 0xfc00;\n            shiftTable[i] = 24;\n            shiftTable[i | 0x100] = 24;\n            // stay (NaN, Infinity, -Infinity)\n        }\n        else {\n            baseTable[i] = 0x7c00;\n            baseTable[i | 0x100] = 0xfc00;\n            shiftTable[i] = 13;\n            shiftTable[i | 0x100] = 13;\n        }\n    }\n    // float16 to float32 helpers\n    const mantissaTable = new Uint32Array(2048);\n    const exponentTable = new Uint32Array(64);\n    const offsetTable = new Uint32Array(64);\n    for (let i = 1; i < 1024; ++i) {\n        let m = i << 13; // zero pad mantissa bits\n        let e = 0; // zero exponent\n        // normalized\n        while ((m & 0x00800000) === 0) {\n            m <<= 1;\n            e -= 0x00800000; // decrement exponent\n        }\n        m &= ~0x00800000; // clear leading 1 bit\n        e += 0x38800000; // adjust bias\n        mantissaTable[i] = m | e;\n    }\n    for (let i = 1024; i < 2048; ++i) {\n        mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    for (let i = 1; i < 31; ++i) {\n        exponentTable[i] = i << 23;\n    }\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    for (let i = 33; i < 63; ++i) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 64; ++i) {\n        if (i !== 32) {\n            offsetTable[i] = 1024;\n        }\n    }\n    return {\n        floatView: floatView,\n        uint32View: uint32View,\n        baseTable: baseTable,\n        shiftTable: shiftTable,\n        mantissaTable: mantissaTable,\n        exponentTable: exponentTable,\n        offsetTable: offsetTable,\n    };\n}\n/**\n * Parse a null terminated string from the buffer\n * @param buffer buffer to read from\n * @param offset current offset in the buffer\n * @returns a string\n */\nexport function ParseNullTerminatedString(buffer, offset) {\n    const uintBuffer = new Uint8Array(buffer);\n    let endOffset = 0;\n    while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n    }\n    const stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n    offset.value = offset.value + endOffset + 1;\n    return stringValue;\n}\n/**\n * Parse an int32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an int32\n */\nexport function ParseInt32(dataView, offset) {\n    const value = dataView.getInt32(offset.value, true);\n    offset.value += INT32_SIZE;\n    return value;\n}\n/**\n * Parse an uint32 from the buffer\n * @param dataView data view to read from\n * @param offset offset in the data view\n * @returns an uint32\n */\nexport function ParseUint32(dataView, offset) {\n    const value = dataView.getUint32(offset.value, true);\n    offset.value += INT32_SIZE;\n    return value;\n}\n/**\n * Parse an uint8 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an uint8\n */\nexport function ParseUint8(dataView, offset) {\n    const value = dataView.getUint8(offset.value);\n    offset.value += INT8_SIZE;\n    return value;\n}\n/**\n * Parse an uint16 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an uint16\n */\nexport function ParseUint16(dataView, offset) {\n    const value = dataView.getUint16(offset.value, true);\n    offset.value += INT16_SIZE;\n    return value;\n}\n/**\n * Parse an uint8 from an array buffer\n * @param array array buffer\n * @param offset current offset in the data view\n * @returns an uint16\n */\nexport function ParseUint8Array(array, offset) {\n    const value = array[offset.value];\n    offset.value += INT8_SIZE;\n    return value;\n}\n/**\n * Parse an int64 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns an int64\n */\nexport function ParseInt64(dataView, offset) {\n    let int;\n    if (\"getBigInt64\" in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n    }\n    else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n    }\n    offset.value += ULONG_SIZE;\n    return int;\n}\n/**\n * Parse a float32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float32\n */\nexport function ParseFloat32(dataView, offset) {\n    const value = dataView.getFloat32(offset.value, true);\n    offset.value += FLOAT32_SIZE;\n    return value;\n}\n/**\n * Parse a float16 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float16\n */\nexport function ParseFloat16(dataView, offset) {\n    return DecodeFloat16(ParseUint16(dataView, offset));\n}\nfunction DecodeFloat16(binary) {\n    const exponent = (binary & 0x7c00) >> 10;\n    const fraction = binary & 0x03ff;\n    return ((binary >> 15 ? -1 : 1) *\n        (exponent ? (exponent === 0x1f ? (fraction ? NaN : Infinity) : Math.pow(2, exponent - 15) * (1 + fraction / 0x400)) : 6.103515625e-5 * (fraction / 0x400)));\n}\nfunction ToHalfFloat(value) {\n    if (Math.abs(value) > 65504) {\n        throw new Error(\"Value out of range.Consider using float instead of half-float.\");\n    }\n    value = Clamp(value, -65504, 65504);\n    _tables.floatView[0] = value;\n    const f = _tables.uint32View[0];\n    const e = (f >> 23) & 0x1ff;\n    return _tables.baseTable[e] + ((f & 0x007fffff) >> _tables.shiftTable[e]);\n}\n/**\n * Decode a float32 from the buffer\n * @param dataView dataview on the data\n * @param offset current offset in the data view\n * @returns a float32\n */\nexport function DecodeFloat32(dataView, offset) {\n    return ToHalfFloat(ParseFloat32(dataView, offset));\n}\nfunction ParseFixedLengthString(buffer, offset, size) {\n    const stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n    offset.value = offset.value + size;\n    return stringValue;\n}\nfunction ParseRational(dataView, offset) {\n    const x = ParseInt32(dataView, offset);\n    const y = ParseUint32(dataView, offset);\n    return [x, y];\n}\nfunction ParseTimecode(dataView, offset) {\n    const x = ParseUint32(dataView, offset);\n    const y = ParseUint32(dataView, offset);\n    return [x, y];\n}\nfunction ParseV2f(dataView, offset) {\n    const x = ParseFloat32(dataView, offset);\n    const y = ParseFloat32(dataView, offset);\n    return [x, y];\n}\nfunction ParseV3f(dataView, offset) {\n    const x = ParseFloat32(dataView, offset);\n    const y = ParseFloat32(dataView, offset);\n    const z = ParseFloat32(dataView, offset);\n    return [x, y, z];\n}\nfunction ParseChlist(dataView, offset, size) {\n    const startOffset = offset.value;\n    const channels = [];\n    while (offset.value < startOffset + size - 1) {\n        const name = ParseNullTerminatedString(dataView.buffer, offset);\n        const pixelType = ParseInt32(dataView, offset);\n        const pLinear = ParseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n        const xSampling = ParseInt32(dataView, offset);\n        const ySampling = ParseInt32(dataView, offset);\n        channels.push({\n            name: name,\n            pixelType: pixelType,\n            pLinear: pLinear,\n            xSampling: xSampling,\n            ySampling: ySampling,\n        });\n    }\n    offset.value += 1;\n    return channels;\n}\nfunction ParseChromaticities(dataView, offset) {\n    const redX = ParseFloat32(dataView, offset);\n    const redY = ParseFloat32(dataView, offset);\n    const greenX = ParseFloat32(dataView, offset);\n    const greenY = ParseFloat32(dataView, offset);\n    const blueX = ParseFloat32(dataView, offset);\n    const blueY = ParseFloat32(dataView, offset);\n    const whiteX = ParseFloat32(dataView, offset);\n    const whiteY = ParseFloat32(dataView, offset);\n    return { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n}\nfunction ParseCompression(dataView, offset) {\n    return ParseUint8(dataView, offset);\n}\nfunction ParseBox2i(dataView, offset) {\n    const xMin = ParseInt32(dataView, offset);\n    const yMin = ParseInt32(dataView, offset);\n    const xMax = ParseInt32(dataView, offset);\n    const yMax = ParseInt32(dataView, offset);\n    return { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n}\nfunction ParseLineOrder(dataView, offset) {\n    const lineOrder = ParseUint8(dataView, offset);\n    return LineOrders[lineOrder];\n}\n/**\n * Parse a value from the data view\n * @param dataView defines the data view to read from\n * @param offset defines the current offset in the data view\n * @param type defines the type of the value to read\n * @param size defines the size of the value to read\n * @returns the parsed value\n */\nexport function ParseValue(dataView, offset, type, size) {\n    switch (type) {\n        case \"string\":\n        case \"stringvector\":\n        case \"iccProfile\":\n            return ParseFixedLengthString(dataView.buffer, offset, size);\n        case \"chlist\":\n            return ParseChlist(dataView, offset, size);\n        case \"chromaticities\":\n            return ParseChromaticities(dataView, offset);\n        case \"compression\":\n            return ParseCompression(dataView, offset);\n        case \"box2i\":\n            return ParseBox2i(dataView, offset);\n        case \"lineOrder\":\n            return ParseLineOrder(dataView, offset);\n        case \"float\":\n            return ParseFloat32(dataView, offset);\n        case \"v2f\":\n            return ParseV2f(dataView, offset);\n        case \"v3f\":\n            return ParseV3f(dataView, offset);\n        case \"int\":\n            return ParseInt32(dataView, offset);\n        case \"rational\":\n            return ParseRational(dataView, offset);\n        case \"timecode\":\n            return ParseTimecode(dataView, offset);\n        case \"preview\":\n            offset.value += size;\n            return \"skipped\";\n        default:\n            offset.value += size;\n            return undefined;\n    }\n}\n/**\n * Revert the endianness of the data\n * @param source defines the source\n */\nexport function Predictor(source) {\n    for (let t = 1; t < source.length; t++) {\n        const d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n    }\n}\n/**\n * Interleave pixels\n * @param source defines the data source\n * @param out defines the output\n */\nexport function InterleaveScalar(source, out) {\n    let t1 = 0;\n    let t2 = Math.floor((source.length + 1) / 2);\n    let s = 0;\n    const stop = source.length - 1;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (s > stop) {\n            break;\n        }\n        out[s++] = source[t1++];\n        if (s > stop) {\n            break;\n        }\n        out[s++] = source[t2++];\n    }\n}\n//# sourceMappingURL=exrLoader.core.js.map","import { ParseUint32, ParseUint8Array } from \"./exrLoader.core.js\";\nimport { HUF_DECBITS, HUF_DECMASK, HUF_DECSIZE, HUF_ENCSIZE, LONG_ZEROCODE_RUN, SHORT_ZEROCODE_RUN, SHORTEST_LONG_RUN, USHORT_RANGE } from \"./exrLoader.interfaces.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nconst NBITS = 16;\nconst A_OFFSET = 1 << (NBITS - 1);\nconst MOD_MASK = (1 << NBITS) - 1;\n/** @internal */\nexport function ReverseLutFromBitmap(bitmap, lut) {\n    let k = 0;\n    for (let i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & (1 << (i & 7))) {\n            lut[k++] = i;\n        }\n    }\n    const n = k - 1;\n    while (k < USHORT_RANGE)\n        lut[k++] = 0;\n    return n;\n}\nfunction HufClearDecTable(hdec) {\n    for (let i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n    }\n}\nfunction GetBits(nBits, c, lc, array, offset) {\n    while (lc < nBits) {\n        c = (c << 8) | ParseUint8Array(array, offset);\n        lc += 8;\n    }\n    lc -= nBits;\n    return {\n        l: (c >> lc) & ((1 << nBits) - 1),\n        c,\n        lc,\n    };\n}\nfunction GetChar(c, lc, array, offset) {\n    c = (c << 8) | ParseUint8Array(array, offset);\n    lc += 8;\n    return {\n        c,\n        lc,\n    };\n}\nfunction GetCode(po, rlc, c, lc, array, offset, outBuffer, outBufferOffset, outBufferEndOffset) {\n    if (po == rlc) {\n        if (lc < 8) {\n            const gc = GetChar(c, lc, array, offset);\n            c = gc.c;\n            lc = gc.lc;\n        }\n        lc -= 8;\n        let cs = c >> lc;\n        cs = new Uint8Array([cs])[0];\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n            return null;\n        }\n        const s = outBuffer[outBufferOffset.value - 1];\n        while (cs-- > 0) {\n            outBuffer[outBufferOffset.value++] = s;\n        }\n    }\n    else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n    }\n    else {\n        return null;\n    }\n    return { c, lc };\n}\nconst HufTableBuffer = new Array(59);\nfunction HufCanonicalCodeTable(hcode) {\n    for (let i = 0; i <= 58; ++i)\n        HufTableBuffer[i] = 0;\n    for (let i = 0; i < HUF_ENCSIZE; ++i)\n        HufTableBuffer[hcode[i]] += 1;\n    let c = 0;\n    for (let i = 58; i > 0; --i) {\n        const nc = (c + HufTableBuffer[i]) >> 1;\n        HufTableBuffer[i] = c;\n        c = nc;\n    }\n    for (let i = 0; i < HUF_ENCSIZE; ++i) {\n        const l = hcode[i];\n        if (l > 0)\n            hcode[i] = l | (HufTableBuffer[l]++ << 6);\n    }\n}\nfunction HufUnpackEncTable(array, offset, ni, im, iM, hcode) {\n    const p = offset;\n    let c = 0;\n    let lc = 0;\n    for (; im <= iM; im++) {\n        if (p.value - offset.value > ni) {\n            return;\n        }\n        let gb = GetBits(6, c, lc, array, p);\n        const l = gb.l;\n        c = gb.c;\n        lc = gb.lc;\n        hcode[im] = l;\n        if (l == LONG_ZEROCODE_RUN) {\n            if (p.value - offset.value > ni) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            gb = GetBits(8, c, lc, array, p);\n            let zerun = gb.l + SHORTEST_LONG_RUN;\n            c = gb.c;\n            lc = gb.lc;\n            if (im + zerun > iM + 1) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            while (zerun--)\n                hcode[im++] = 0;\n            im--;\n        }\n        else if (l >= SHORT_ZEROCODE_RUN) {\n            let zerun = l - SHORT_ZEROCODE_RUN + 2;\n            if (im + zerun > iM + 1) {\n                throw new Error(\"Error in HufUnpackEncTable\");\n            }\n            while (zerun--)\n                hcode[im++] = 0;\n            im--;\n        }\n    }\n    HufCanonicalCodeTable(hcode);\n}\nfunction HufLength(code) {\n    return code & 63;\n}\nfunction HufCode(code) {\n    return code >> 6;\n}\nfunction HufBuildDecTable(hcode, im, iM, hdecod) {\n    for (; im <= iM; im++) {\n        const c = HufCode(hcode[im]);\n        const l = HufLength(hcode[im]);\n        if (c >> l) {\n            throw new Error(\"Invalid table entry\");\n        }\n        if (l > HUF_DECBITS) {\n            const pl = hdecod[c >> (l - HUF_DECBITS)];\n            if (pl.len) {\n                throw new Error(\"Invalid table entry\");\n            }\n            pl.lit++;\n            if (pl.p) {\n                const p = pl.p;\n                pl.p = new Array(pl.lit);\n                for (let i = 0; i < pl.lit - 1; ++i) {\n                    pl.p[i] = p[i];\n                }\n            }\n            else {\n                pl.p = new Array(1);\n            }\n            pl.p[pl.lit - 1] = im;\n        }\n        else if (l) {\n            let plOffset = 0;\n            for (let i = 1 << (HUF_DECBITS - l); i > 0; i--) {\n                const pl = hdecod[(c << (HUF_DECBITS - l)) + plOffset];\n                if (pl.len || pl.p) {\n                    throw new Error(\"Invalid table entry\");\n                }\n                pl.len = l;\n                pl.lit = im;\n                plOffset++;\n            }\n        }\n    }\n    return true;\n}\nfunction HufDecode(encodingTable, decodingTable, array, offset, ni, rlc, no, outBuffer, outOffset) {\n    let c = 0;\n    let lc = 0;\n    const outBufferEndOffset = no;\n    const inOffsetEnd = Math.trunc(offset.value + (ni + 7) / 8);\n    while (offset.value < inOffsetEnd) {\n        let gc = GetChar(c, lc, array, offset);\n        c = gc.c;\n        lc = gc.lc;\n        while (lc >= HUF_DECBITS) {\n            const index = (c >> (lc - HUF_DECBITS)) & HUF_DECMASK;\n            const pl = decodingTable[index];\n            if (pl.len) {\n                lc -= pl.len;\n                const gCode = GetCode(pl.lit, rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n                if (gCode) {\n                    c = gCode.c;\n                    lc = gCode.lc;\n                }\n            }\n            else {\n                if (!pl.p) {\n                    throw new Error(\"hufDecode issues\");\n                }\n                let j;\n                for (j = 0; j < pl.lit; j++) {\n                    const l = HufLength(encodingTable[pl.p[j]]);\n                    while (lc < l && offset.value < inOffsetEnd) {\n                        gc = GetChar(c, lc, array, offset);\n                        c = gc.c;\n                        lc = gc.lc;\n                    }\n                    if (lc >= l) {\n                        if (HufCode(encodingTable[pl.p[j]]) == ((c >> (lc - l)) & ((1 << l) - 1))) {\n                            lc -= l;\n                            const gCode = GetCode(pl.p[j], rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n                            if (gCode) {\n                                c = gCode.c;\n                                lc = gCode.lc;\n                            }\n                            break;\n                        }\n                    }\n                }\n                if (j == pl.lit) {\n                    throw new Error(\"HufDecode issues\");\n                }\n            }\n        }\n    }\n    const i = (8 - ni) & 7;\n    c >>= i;\n    lc -= i;\n    while (lc > 0) {\n        const pl = decodingTable[(c << (HUF_DECBITS - lc)) & HUF_DECMASK];\n        if (pl.len) {\n            lc -= pl.len;\n            const gCode = GetCode(pl.lit, rlc, c, lc, array, offset, outBuffer, outOffset, outBufferEndOffset);\n            if (gCode) {\n                c = gCode.c;\n                lc = gCode.lc;\n            }\n        }\n        else {\n            throw new Error(\"HufDecode issues\");\n        }\n    }\n    return true;\n}\n/** @internal */\nexport function HufUncompress(array, dataView, offset, nCompressed, outBuffer, nRaw) {\n    const outOffset = { value: 0 };\n    const initialInOffset = offset.value;\n    const im = ParseUint32(dataView, offset);\n    const iM = ParseUint32(dataView, offset);\n    offset.value += 4;\n    const nBits = ParseUint32(dataView, offset);\n    offset.value += 4;\n    if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw new Error(\"Wrong HUF_ENCSIZE\");\n    }\n    const freq = new Array(HUF_ENCSIZE);\n    const hdec = new Array(HUF_DECSIZE);\n    HufClearDecTable(hdec);\n    const ni = nCompressed - (offset.value - initialInOffset);\n    HufUnpackEncTable(array, offset, ni, im, iM, freq);\n    if (nBits > 8 * (nCompressed - (offset.value - initialInOffset))) {\n        throw new Error(\"Wrong hufUncompress\");\n    }\n    HufBuildDecTable(freq, im, iM, hdec);\n    HufDecode(freq, hdec, array, offset, nBits, iM, nRaw, outBuffer, outOffset);\n}\nfunction UInt16(value) {\n    return value & 0xffff;\n}\nfunction Int16(value) {\n    const ref = UInt16(value);\n    return ref > 0x7fff ? ref - 0x10000 : ref;\n}\nfunction Wdec14(l, h) {\n    const ls = Int16(l);\n    const hs = Int16(h);\n    const hi = hs;\n    const ai = ls + (hi & 1) + (hi >> 1);\n    const as = ai;\n    const bs = ai - hi;\n    return { a: as, b: bs };\n}\nfunction Wdec16(l, h) {\n    const m = UInt16(l);\n    const d = UInt16(h);\n    const bb = (m - (d >> 1)) & MOD_MASK;\n    const aa = (d + bb - A_OFFSET) & MOD_MASK;\n    return { a: aa, b: bb };\n}\n/** @internal */\nexport function Wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n    const w14 = mx < 1 << 14;\n    const n = nx > ny ? ny : nx;\n    let p = 1;\n    let p2;\n    let py;\n    while (p <= n)\n        p <<= 1;\n    p >>= 1;\n    p2 = p;\n    p >>= 1;\n    while (p >= 1) {\n        py = 0;\n        const ey = py + oy * (ny - p2);\n        const oy1 = oy * p;\n        const oy2 = oy * p2;\n        const ox1 = ox * p;\n        const ox2 = ox * p2;\n        let i00, i01, i10, i11;\n        for (; py <= ey; py += oy2) {\n            let px = py;\n            const ex = py + ox * (nx - p2);\n            for (; px <= ex; px += ox2) {\n                const p01 = px + ox1;\n                const p10 = px + oy1;\n                const p11 = p10 + ox1;\n                if (w14) {\n                    let result = Wdec14(buffer[px + j], buffer[p10 + j]);\n                    i00 = result.a;\n                    i10 = result.b;\n                    result = Wdec14(buffer[p01 + j], buffer[p11 + j]);\n                    i01 = result.a;\n                    i11 = result.b;\n                    result = Wdec14(i00, i01);\n                    buffer[px + j] = result.a;\n                    buffer[p01 + j] = result.b;\n                    result = Wdec14(i10, i11);\n                    buffer[p10 + j] = result.a;\n                    buffer[p11 + j] = result.b;\n                }\n                else {\n                    let result = Wdec16(buffer[px + j], buffer[p10 + j]);\n                    i00 = result.a;\n                    i10 = result.b;\n                    result = Wdec16(buffer[p01 + j], buffer[p11 + j]);\n                    i01 = result.a;\n                    i11 = result.b;\n                    result = Wdec16(i00, i01);\n                    buffer[px + j] = result.a;\n                    buffer[p01 + j] = result.b;\n                    result = Wdec16(i10, i11);\n                    buffer[p10 + j] = result.a;\n                    buffer[p11 + j] = result.b;\n                }\n            }\n            if (nx & p) {\n                const p10 = px + oy1;\n                let result;\n                if (w14) {\n                    result = Wdec14(buffer[px + j], buffer[p10 + j]);\n                }\n                else {\n                    result = Wdec16(buffer[px + j], buffer[p10 + j]);\n                }\n                i00 = result.a;\n                buffer[p10 + j] = result.b;\n                buffer[px + j] = i00;\n            }\n        }\n        if (ny & p) {\n            let px = py;\n            const ex = py + ox * (nx - p2);\n            for (; px <= ex; px += ox2) {\n                const p01 = px + ox1;\n                let result;\n                if (w14) {\n                    result = Wdec14(buffer[px + j], buffer[p01 + j]);\n                }\n                else {\n                    result = Wdec16(buffer[px + j], buffer[p01 + j]);\n                }\n                i00 = result.a;\n                buffer[p01 + j] = result.b;\n                buffer[px + j] = i00;\n            }\n        }\n        p2 = p;\n        p >>= 1;\n    }\n    return py;\n}\n/** @internal */\nexport function ApplyLut(lut, data, nData) {\n    for (let i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n    }\n}\n//# sourceMappingURL=exrLoader.compression.huf.js.map","export var EXROutputType;\n(function (EXROutputType) {\n    EXROutputType[EXROutputType[\"Float\"] = 0] = \"Float\";\n    EXROutputType[EXROutputType[\"HalfFloat\"] = 1] = \"HalfFloat\";\n})(EXROutputType || (EXROutputType = {}));\n/**\n * Class used to store configuration of the exr loader\n */\nexport class ExrLoaderGlobalConfiguration {\n}\n/**\n * Defines the default output type to use (Half float by default)\n */\nExrLoaderGlobalConfiguration.DefaultOutputType = EXROutputType.HalfFloat;\n/**\n * Url to use to load the fflate library (for zip decompression)\n */\nExrLoaderGlobalConfiguration.FFLATEUrl = \"https://unpkg.com/fflate@0.8.2\";\n//# sourceMappingURL=exrLoader.configuration.js.map"],"names":["INT32_SIZE","FLOAT32_SIZE","INT8_SIZE","INT16_SIZE","ULONG_SIZE","USHORT_RANGE","BITMAP_SIZE","HUF_ENCBITS","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","HUF_DECMASK","SHORT_ZEROCODE_RUN","LONG_ZEROCODE_RUN","SHORTEST_LONG_RUN","CompressionCodes","LineOrders","_tables","_GenerateTables","buffer","floatView","uint32View","baseTable","shiftTable","i","e","mantissaTable","exponentTable","offsetTable","m","ParseNullTerminatedString","offset","uintBuffer","endOffset","stringValue","ParseInt32","dataView","value","ParseUint32","ParseUint8","ParseUint16","ParseUint8Array","array","ParseInt64","int","ParseFloat32","ParseFloat16","DecodeFloat16","binary","exponent","fraction","ToHalfFloat","Clamp","f","DecodeFloat32","ParseFixedLengthString","size","ParseRational","x","y","ParseTimecode","ParseV2f","ParseV3f","z","ParseChlist","startOffset","channels","name","pixelType","pLinear","xSampling","ySampling","ParseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","ParseCompression","ParseBox2i","xMin","yMin","xMax","yMax","ParseLineOrder","lineOrder","ParseValue","type","Predictor","source","d","InterleaveScalar","out","t1","t2","s","stop","NBITS","A_OFFSET","MOD_MASK","ReverseLutFromBitmap","bitmap","lut","k","n","HufClearDecTable","hdec","GetBits","nBits","c","lc","GetChar","GetCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","gc","cs","HufTableBuffer","HufCanonicalCodeTable","hcode","nc","l","HufUnpackEncTable","ni","im","iM","p","gb","zerun","HufLength","code","HufCode","HufBuildDecTable","hdecod","pl","plOffset","HufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","index","gCode","j","HufUncompress","nCompressed","nRaw","initialInOffset","freq","UInt16","Int16","ref","Wdec14","h","ls","hi","ai","as","bs","Wdec16","bb","Wav2Decode","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","result","ApplyLut","data","nData","EXROutputType","ExrLoaderGlobalConfiguration"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}