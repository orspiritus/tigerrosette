{"version":3,"file":"basisTextureLoader-CUPe6yBq.js","sources":["../../node_modules/@babylonjs/core/Materials/Textures/Loaders/basisTextureLoader.js"],"sourcesContent":["import { LoadTextureFromTranscodeResult, TranscodeAsync } from \"../../../Misc/basis.js\";\nimport { Tools } from \"../../../Misc/tools.js\";\n/**\n * Loader for .basis file format\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _BasisTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param createPolynomials will be true if polynomials have been requested\n     * @param onLoad defines the callback to trigger once the texture is ready\n     * @param onError defines the callback to trigger in case of error\n     */\n    loadCubeData(data, texture, createPolynomials, onLoad, onError) {\n        if (Array.isArray(data)) {\n            return;\n        }\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then((result) => {\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            LoadTextureFromTranscodeResult(texture, result);\n            texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n            texture.isReady = true;\n            texture.onLoadedObservable.notifyObservers(texture);\n            texture.onLoadedObservable.clear();\n            if (onLoad) {\n                onLoad();\n            }\n        })\n            .catch((err) => {\n            const errorMessage = \"Failed to transcode Basis file, transcoding may not be supported on this device\";\n            Tools.Warn(errorMessage);\n            texture.isReady = true;\n            if (onError) {\n                onError(err);\n            }\n        });\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    loadData(data, texture, callback) {\n        const caps = texture.getEngine().getCaps();\n        const transcodeConfig = {\n            supportedCompressionFormats: {\n                etc1: caps.etc1 ? true : false,\n                s3tc: caps.s3tc ? true : false,\n                pvrtc: caps.pvrtc ? true : false,\n                etc2: caps.etc2 ? true : false,\n                astc: caps.astc ? true : false,\n                bc7: caps.bptc ? true : false,\n            },\n        };\n        TranscodeAsync(data, transcodeConfig)\n            .then((result) => {\n            const rootImage = result.fileInfo.images[0].levels[0];\n            const hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n            callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, () => {\n                LoadTextureFromTranscodeResult(texture, result);\n            });\n        })\n            .catch((err) => {\n            Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n            Tools.Warn(`Failed to transcode Basis file: ${err}`);\n            callback(0, 0, false, false, () => { }, true);\n        });\n    }\n}\n//# sourceMappingURL=basisTextureLoader.js.map"],"names":["_BasisTextureLoader","data","texture","createPolynomials","onLoad","onError","caps","transcodeConfig","TranscodeAsync","result","hasMipmap","LoadTextureFromTranscodeResult","err","Tools","callback","rootImage"],"mappings":"yLAOO,MAAMA,CAAoB,CAC7B,aAAc,CAIV,KAAK,gBAAkB,EAC3B,CASA,aAAaC,EAAMC,EAASC,EAAmBC,EAAQC,EAAS,CAC5D,GAAI,MAAM,QAAQJ,CAAI,EAClB,OAEJ,MAAMK,EAAOJ,EAAQ,UAAS,EAAG,QAAO,EAClCK,EAAkB,CACpB,4BAA6B,CACzB,KAAM,EAAAD,EAAK,KACX,KAAM,EAAAA,EAAK,KACX,MAAO,EAAAA,EAAK,MACZ,KAAM,EAAAA,EAAK,KACX,KAAM,EAAAA,EAAK,KACX,IAAK,EAAAA,EAAK,IAC1B,CACA,EACQE,EAAeP,EAAMM,CAAe,EAC/B,KAAME,GAAW,CAClB,MAAMC,EAAYD,EAAO,SAAS,OAAO,CAAC,EAAE,OAAO,OAAS,GAAKP,EAAQ,gBACzES,EAA+BT,EAASO,CAAM,EAC9CP,EAAQ,UAAS,EAAG,yBAAyBA,EAASQ,CAAS,EAC/DR,EAAQ,QAAU,GAClBA,EAAQ,mBAAmB,gBAAgBA,CAAO,EAClDA,EAAQ,mBAAmB,MAAK,EAC5BE,GACAA,EAAM,CAEd,CAAC,EACI,MAAOQ,GAAQ,CAEhBC,EAAM,KADe,iFACE,EACvBX,EAAQ,QAAU,GACdG,GACAA,EAAQO,CAAG,CAEnB,CAAC,CACL,CAOA,SAASX,EAAMC,EAASY,EAAU,CAC9B,MAAMR,EAAOJ,EAAQ,UAAS,EAAG,QAAO,EAClCK,EAAkB,CACpB,4BAA6B,CACzB,KAAM,EAAAD,EAAK,KACX,KAAM,EAAAA,EAAK,KACX,MAAO,EAAAA,EAAK,MACZ,KAAM,EAAAA,EAAK,KACX,KAAM,EAAAA,EAAK,KACX,IAAK,EAAAA,EAAK,IAC1B,CACA,EACQE,EAAeP,EAAMM,CAAe,EAC/B,KAAME,GAAW,CAClB,MAAMM,EAAYN,EAAO,SAAS,OAAO,CAAC,EAAE,OAAO,CAAC,EAC9CC,EAAYD,EAAO,SAAS,OAAO,CAAC,EAAE,OAAO,OAAS,GAAKP,EAAQ,gBACzEY,EAASC,EAAU,MAAOA,EAAU,OAAQL,EAAWD,EAAO,SAAW,GAAI,IAAM,CAC/EE,EAA+BT,EAASO,CAAM,CAClD,CAAC,CACL,CAAC,EACI,MAAOG,GAAQ,CAChBC,EAAM,KAAK,iFAAiF,EAC5FA,EAAM,KAAK,mCAAmCD,CAAG,EAAE,EACnDE,EAAS,EAAG,EAAG,GAAO,GAAO,IAAM,CAAE,EAAG,EAAI,CAChD,CAAC,CACL,CACJ","x_google_ignoreList":[0]}