{"version":3,"mappings":"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","names":["AnimationEvent","frame","action","onlyOnce","WeightedSound","loop","sounds","weights","weightSum","weight","invWeightSum","i","sound","value","Logger","startOffset","randomValue","total","customBlocks","addToBlockFactory","module","blockName","factory","blockFactory","__vitePreload","FlowGraphPlayAnimationBlock","FlowGraphStopAnimationBlock","FlowGraphPauseAnimationBlock","FlowGraphInterpolationBlock","FlowGraphSceneReadyEventBlock","FlowGraphSceneTickEventBlock","FlowGraphSendCustomEventBlock","FlowGraphReceiveCustomEventBlock","FlowGraphMeshPickEventBlock","FlowGraphEBlock","FlowGraphPiBlock","FlowGraphInfBlock","FlowGraphNaNBlock","FlowGraphRandomBlock","FlowGraphAddBlock","FlowGraphSubtractBlock","FlowGraphMultiplyBlock","FlowGraphDivideBlock","FlowGraphAbsBlock","FlowGraphSignBlock","FlowGraphTruncBlock","FlowGraphFloorBlock","FlowGraphCeilBlock","FlowGraphRoundBlock","FlowGraphFractionBlock","FlowGraphNegationBlock","FlowGraphModuloBlock","FlowGraphMinBlock","FlowGraphMaxBlock","FlowGraphClampBlock","FlowGraphSaturateBlock","FlowGraphMathInterpolationBlock","FlowGraphEqualityBlock","FlowGraphLessThanBlock","FlowGraphLessThanOrEqualBlock","FlowGraphGreaterThanBlock","FlowGraphGreaterThanOrEqualBlock","FlowGraphIsNanBlock","FlowGraphIsInfinityBlock","FlowGraphDegToRadBlock","FlowGraphRadToDegBlock","FlowGraphSinBlock","FlowGraphCosBlock","FlowGraphTanBlock","FlowGraphAsinBlock","FlowGraphAcosBlock","FlowGraphAtanBlock","FlowGraphAtan2Block","FlowGraphSinhBlock","FlowGraphCoshBlock","FlowGraphTanhBlock","FlowGraphAsinhBlock","FlowGraphAcoshBlock","FlowGraphAtanhBlock","FlowGraphExpBlock","FlowGraphLogBlock","FlowGraphLog2Block","FlowGraphLog10Block","FlowGraphSquareRootBlock","FlowGraphPowerBlock","FlowGraphCubeRootBlock","FlowGraphBitwiseAndBlock","FlowGraphBitwiseOrBlock","FlowGraphBitwiseNotBlock","FlowGraphBitwiseXorBlock","FlowGraphBitwiseLeftShiftBlock","FlowGraphBitwiseRightShiftBlock","FlowGraphLengthBlock","FlowGraphNormalizeBlock","FlowGraphDotBlock","FlowGraphCrossBlock","FlowGraphRotate2DBlock","FlowGraphRotate3DBlock","FlowGraphTransposeBlock","FlowGraphDeterminantBlock","FlowGraphInvertMatrixBlock","FlowGraphMatrixMultiplicationBlock","FlowGraphBranchBlock","FlowGraphSetDelayBlock","n","FlowGraphCancelDelayBlock","FlowGraphCallCounterBlock","FlowGraphDebounceBlock","FlowGraphThrottleBlock","FlowGraphDoNBlock","FlowGraphFlipFlopBlock","FlowGraphForLoopBlock","FlowGraphMultiGateBlock","FlowGraphSequenceBlock","FlowGraphSwitchBlock","FlowGraphWaitAllBlock","FlowGraphWhileLoopBlock","FlowGraphConsoleLogBlock","FlowGraphConditionalDataBlock","FlowGraphConstantBlock","FlowGraphTransformCoordinatesSystemBlock","FlowGraphGetAssetBlock","FlowGraphGetPropertyBlock","FlowGraphSetPropertyBlock","FlowGraphGetVariableBlock","FlowGraphSetVariableBlock","FlowGraphJsonPointerParserBlock","FlowGraphLeadingZerosBlock","FlowGraphTrailingZerosBlock","FlowGraphOneBitsCounterBlock","FlowGraphCombineVector2Block","FlowGraphCombineVector3Block","FlowGraphCombineVector4Block","FlowGraphCombineMatrixBlock","FlowGraphExtractVector2Block","FlowGraphExtractVector3Block","FlowGraphExtractVector4Block","FlowGraphExtractMatrixBlock","FlowGraphTransformBlock","FlowGraphTransformCoordinatesBlock","FlowGraphMatrixDecomposeBlock","FlowGraphMatrixComposeBlock","FlowGraphBooleanToFloat","FlowGraphBooleanToInt","FlowGraphFloatToBoolean","FlowGraphIntToBoolean","FlowGraphIntToFloat","FlowGraphFloatToInt","FlowGraphEasingBlock","FlowGraphBezierCurveEasingBlock","FlowGraphPointerOverEventBlock","FlowGraphPointerOutEventBlock","FlowGraphContextBlock","FlowGraphArrayIndexBlock","FlowGraphCodeExecutionBlock","FlowGraphIndexOfBlock","FlowGraphFunctionReferenceBlock","FlowGraphDataSwitchBlock","GetDataOutConnectionByUniqueId","blocks","uniqueId","block","dataOut","GetSignalInConnectionByUniqueId","FlowGraphExecutionBlock","signalIn","ParseCoordinatorAsync","serializedObject","options","valueParseFunction","defaultValueParseFunction","coordinator","FlowGraphCoordinator","key","getRichTypeByFlowGraphType","_a","serializedGraph","ParseFlowGraphAsync","serializationObject","resolvedClasses","serializedBlock","ParseFlowGraph","graph","ParseFlowGraphBlockWithClassType","FlowGraphEventBlock","dataIn","serializedConnection","connection","signalOut","serializedContext","ParseFlowGraphContext","rightHanded","result","scene","ac","assetsContext","m","_b","_c","c","_d","_e","t","_f","a","anim","_g","s","_h","ps","_i","ag","_j","tn","ParseBlockAsync","parseOptions","classType","parsedConfig","needsPathConverter","obj","dataInput","dataOutput","ParseGraphConnectionWithClassType","ownerBlock","ParseGraphDataConnection","richType","ParseRichType","defaultValue","RichType","RawCubeTexture","CubeTexture","data","size","format","type","generateMipMaps","invertY","samplingMode","compression","sphericalPolynomial","lodScale","lodOffset","UpdateRGBDAsyncEnvTools","SerializationHelper","internalTexture","texture","Deferred","resolve","reject","DataReader","buffer","byteLength","Decode"],"ignoreList":[0,1,2,3,4,5,6],"sources":["../../node_modules/@babylonjs/core/Animations/animationEvent.js","../../node_modules/@babylonjs/core/Audio/weightedsound.js","../../node_modules/@babylonjs/core/FlowGraph/Blocks/flowGraphBlockFactory.js","../../node_modules/@babylonjs/core/FlowGraph/flowGraphParser.js","../../node_modules/@babylonjs/core/Materials/Textures/rawCubeTexture.js","../../node_modules/@babylonjs/core/Misc/deferred.js","../../node_modules/@babylonjs/core/Misc/dataReader.js"],"sourcesContent":["/**\n * Composed of a frame, and an action function\n */\nexport class AnimationEvent {\n    /**\n     * Initializes the animation event\n     * @param frame The frame for which the event is triggered\n     * @param action The event to perform when triggered\n     * @param onlyOnce Specifies if the event should be triggered only once\n     */\n    constructor(\n    /** The frame for which the event is triggered **/\n    frame, \n    /** The event to perform when triggered **/\n    action, \n    /** Specifies if the event should be triggered only once**/\n    onlyOnce) {\n        this.frame = frame;\n        this.action = action;\n        this.onlyOnce = onlyOnce;\n        /**\n         * Specifies if the animation event is done\n         */\n        this.isDone = false;\n    }\n    /** @internal */\n    _clone() {\n        return new AnimationEvent(this.frame, this.action, this.onlyOnce);\n    }\n}\n//# sourceMappingURL=animationEvent.js.map","import { Logger } from \"../Misc/logger.js\";\n/**\n * Wraps one or more Sound objects and selects one with random weight for playback.\n */\nexport class WeightedSound {\n    /**\n     * Creates a new WeightedSound from the list of sounds given.\n     * @param loop When true a Sound will be selected and played when the current playing Sound completes.\n     * @param sounds Array of Sounds that will be selected from.\n     * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\n     */\n    constructor(loop, sounds, weights) {\n        /** When true a Sound will be selected and played when the current playing Sound completes. */\n        this.loop = false;\n        this._coneInnerAngle = 360;\n        this._coneOuterAngle = 360;\n        this._volume = 1;\n        /** A Sound is currently playing. */\n        this.isPlaying = false;\n        /** A Sound is currently paused. */\n        this.isPaused = false;\n        this._sounds = [];\n        this._weights = [];\n        if (sounds.length !== weights.length) {\n            throw new Error(\"Sounds length does not equal weights length\");\n        }\n        this.loop = loop;\n        this._weights = weights;\n        // Normalize the weights\n        let weightSum = 0;\n        for (const weight of weights) {\n            weightSum += weight;\n        }\n        const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\n        for (let i = 0; i < this._weights.length; i++) {\n            this._weights[i] *= invWeightSum;\n        }\n        this._sounds = sounds;\n        for (const sound of this._sounds) {\n            sound.onEndedObservable.add(() => {\n                this._onended();\n            });\n        }\n    }\n    /**\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\n     */\n    get directionalConeInnerAngle() {\n        return this._coneInnerAngle;\n    }\n    /**\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\n     */\n    set directionalConeInnerAngle(value) {\n        if (value !== this._coneInnerAngle) {\n            if (this._coneOuterAngle < value) {\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n                return;\n            }\n            this._coneInnerAngle = value;\n            for (const sound of this._sounds) {\n                sound.directionalConeInnerAngle = value;\n            }\n        }\n    }\n    /**\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\n     */\n    get directionalConeOuterAngle() {\n        return this._coneOuterAngle;\n    }\n    /**\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\n     */\n    set directionalConeOuterAngle(value) {\n        if (value !== this._coneOuterAngle) {\n            if (value < this._coneInnerAngle) {\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\n                return;\n            }\n            this._coneOuterAngle = value;\n            for (const sound of this._sounds) {\n                sound.directionalConeOuterAngle = value;\n            }\n        }\n    }\n    /**\n     * Playback volume.\n     */\n    get volume() {\n        return this._volume;\n    }\n    /**\n     * Playback volume.\n     */\n    set volume(value) {\n        if (value !== this._volume) {\n            for (const sound of this._sounds) {\n                sound.setVolume(value);\n            }\n        }\n    }\n    _onended() {\n        if (this._currentIndex !== undefined) {\n            this._sounds[this._currentIndex].autoplay = false;\n        }\n        if (this.loop && this.isPlaying) {\n            this.play();\n        }\n        else {\n            this.isPlaying = false;\n        }\n    }\n    /**\n     * Suspend playback\n     */\n    pause() {\n        if (this.isPlaying) {\n            this.isPaused = true;\n            if (this._currentIndex !== undefined) {\n                this._sounds[this._currentIndex].pause();\n            }\n        }\n    }\n    /**\n     * Stop playback\n     */\n    stop() {\n        this.isPlaying = false;\n        if (this._currentIndex !== undefined) {\n            this._sounds[this._currentIndex].stop();\n        }\n    }\n    /**\n     * Start playback.\n     * @param startOffset Position the clip head at a specific time in seconds.\n     */\n    play(startOffset) {\n        if (!this.isPaused) {\n            this.stop();\n            const randomValue = Math.random();\n            let total = 0;\n            for (let i = 0; i < this._weights.length; i++) {\n                total += this._weights[i];\n                if (randomValue <= total) {\n                    this._currentIndex = i;\n                    break;\n                }\n            }\n        }\n        const sound = this._sounds[this._currentIndex ?? 0];\n        if (sound.isReady()) {\n            sound.play(0, this.isPaused ? undefined : startOffset);\n        }\n        else {\n            sound.autoplay = true;\n        }\n        this.isPlaying = true;\n        this.isPaused = false;\n    }\n}\n//# sourceMappingURL=weightedsound.js.map","/**\n * Any external module that wishes to add a new block to the flow graph can add to this object using the helper function.\n */\nconst customBlocks = {};\n/**\n * If you want to add a new block to the block factory, you should use this function.\n * Please be sure to choose a unique name and define the responsible module.\n * @param module the name of the module that is responsible for the block\n * @param blockName the name of the block. This should be unique.\n * @param factory an async factory function to generate the block\n */\nexport function addToBlockFactory(module, blockName, factory) {\n    customBlocks[`${module}/${blockName}`] = factory;\n}\n/**\n * a function to get a factory function for a block.\n * @param blockName the block name to initialize. If the block comes from an external module, the name should be in the format \"module/blockName\"\n * @returns an async factory function that will return the block class when called.\n */\nexport function blockFactory(blockName) {\n    switch (blockName) {\n        case \"FlowGraphPlayAnimationBlock\" /* FlowGraphBlockNames.PlayAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPlayAnimationBlock.js\")).FlowGraphPlayAnimationBlock;\n        case \"FlowGraphStopAnimationBlock\" /* FlowGraphBlockNames.StopAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphStopAnimationBlock.js\")).FlowGraphStopAnimationBlock;\n        case \"FlowGraphPauseAnimationBlock\" /* FlowGraphBlockNames.PauseAnimation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphPauseAnimationBlock.js\")).FlowGraphPauseAnimationBlock;\n        case \"FlowGraphInterpolationBlock\" /* FlowGraphBlockNames.ValueInterpolation */:\n            return async () => (await import(\"./Execution/Animation/flowGraphInterpolationBlock.js\")).FlowGraphInterpolationBlock;\n        case \"FlowGraphSceneReadyEventBlock\" /* FlowGraphBlockNames.SceneReadyEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneReadyEventBlock.js\")).FlowGraphSceneReadyEventBlock;\n        case \"FlowGraphSceneTickEventBlock\" /* FlowGraphBlockNames.SceneTickEvent */:\n            return async () => (await import(\"./Event/flowGraphSceneTickEventBlock.js\")).FlowGraphSceneTickEventBlock;\n        case \"FlowGraphSendCustomEventBlock\" /* FlowGraphBlockNames.SendCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphSendCustomEventBlock.js\")).FlowGraphSendCustomEventBlock;\n        case \"FlowGraphReceiveCustomEventBlock\" /* FlowGraphBlockNames.ReceiveCustomEvent */:\n            return async () => (await import(\"./Event/flowGraphReceiveCustomEventBlock.js\")).FlowGraphReceiveCustomEventBlock;\n        case \"FlowGraphMeshPickEventBlock\" /* FlowGraphBlockNames.MeshPickEvent */:\n            return async () => (await import(\"./Event/flowGraphMeshPickEventBlock.js\")).FlowGraphMeshPickEventBlock;\n        case \"FlowGraphEBlock\" /* FlowGraphBlockNames.E */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphEBlock;\n        case \"FlowGraphPIBlock\" /* FlowGraphBlockNames.PI */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphPiBlock;\n        case \"FlowGraphInfBlock\" /* FlowGraphBlockNames.Inf */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphInfBlock;\n        case \"FlowGraphNaNBlock\" /* FlowGraphBlockNames.NaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphNaNBlock;\n        case \"FlowGraphRandomBlock\" /* FlowGraphBlockNames.Random */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRandomBlock;\n        case \"FlowGraphAddBlock\" /* FlowGraphBlockNames.Add */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAddBlock;\n        case \"FlowGraphSubtractBlock\" /* FlowGraphBlockNames.Subtract */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSubtractBlock;\n        case \"FlowGraphMultiplyBlock\" /* FlowGraphBlockNames.Multiply */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMultiplyBlock;\n        case \"FlowGraphDivideBlock\" /* FlowGraphBlockNames.Divide */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphDivideBlock;\n        case \"FlowGraphAbsBlock\" /* FlowGraphBlockNames.Abs */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAbsBlock;\n        case \"FlowGraphSignBlock\" /* FlowGraphBlockNames.Sign */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSignBlock;\n        case \"FlowGraphTruncBlock\" /* FlowGraphBlockNames.Trunc */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTruncBlock;\n        case \"FlowGraphFloorBlock\" /* FlowGraphBlockNames.Floor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphFloorBlock;\n        case \"FlowGraphCeilBlock\" /* FlowGraphBlockNames.Ceil */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCeilBlock;\n        case \"FlowGraphRoundBlock\" /* FlowGraphBlockNames.Round */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRoundBlock;\n        case \"FlowGraphFractBlock\" /* FlowGraphBlockNames.Fraction */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphFractionBlock;\n        case \"FlowGraphNegationBlock\" /* FlowGraphBlockNames.Negation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphNegationBlock;\n        case \"FlowGraphModuloBlock\" /* FlowGraphBlockNames.Modulo */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphModuloBlock;\n        case \"FlowGraphMinBlock\" /* FlowGraphBlockNames.Min */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMinBlock;\n        case \"FlowGraphMaxBlock\" /* FlowGraphBlockNames.Max */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMaxBlock;\n        case \"FlowGraphClampBlock\" /* FlowGraphBlockNames.Clamp */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphClampBlock;\n        case \"FlowGraphSaturateBlock\" /* FlowGraphBlockNames.Saturate */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSaturateBlock;\n        case \"FlowGraphMathInterpolationBlock\" /* FlowGraphBlockNames.MathInterpolation */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphMathInterpolationBlock;\n        case \"FlowGraphEqualityBlock\" /* FlowGraphBlockNames.Equality */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphEqualityBlock;\n        case \"FlowGraphLessThanBlock\" /* FlowGraphBlockNames.LessThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLessThanBlock;\n        case \"FlowGraphLessThanOrEqualBlock\" /* FlowGraphBlockNames.LessThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLessThanOrEqualBlock;\n        case \"FlowGraphGreaterThanBlock\" /* FlowGraphBlockNames.GreaterThan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphGreaterThanBlock;\n        case \"FlowGraphGreaterThanOrEqualBlock\" /* FlowGraphBlockNames.GreaterThanOrEqual */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphGreaterThanOrEqualBlock;\n        case \"FlowGraphIsNaNBlock\" /* FlowGraphBlockNames.IsNaN */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphIsNanBlock;\n        case \"FlowGraphIsInfBlock\" /* FlowGraphBlockNames.IsInfinity */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphIsInfinityBlock;\n        case \"FlowGraphDegToRadBlock\" /* FlowGraphBlockNames.DegToRad */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphDegToRadBlock;\n        case \"FlowGraphRadToDegBlock\" /* FlowGraphBlockNames.RadToDeg */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphRadToDegBlock;\n        case \"FlowGraphSinBlock\" /* FlowGraphBlockNames.Sin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSinBlock;\n        case \"FlowGraphCosBlock\" /* FlowGraphBlockNames.Cos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCosBlock;\n        case \"FlowGraphTanBlock\" /* FlowGraphBlockNames.Tan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTanBlock;\n        case \"FlowGraphASinBlock\" /* FlowGraphBlockNames.Asin */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAsinBlock;\n        case \"FlowGraphACosBlock\" /* FlowGraphBlockNames.Acos */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAcosBlock;\n        case \"FlowGraphATanBlock\" /* FlowGraphBlockNames.Atan */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtanBlock;\n        case \"FlowGraphATan2Block\" /* FlowGraphBlockNames.Atan2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtan2Block;\n        case \"FlowGraphSinhBlock\" /* FlowGraphBlockNames.Sinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSinhBlock;\n        case \"FlowGraphCoshBlock\" /* FlowGraphBlockNames.Cosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCoshBlock;\n        case \"FlowGraphTanhBlock\" /* FlowGraphBlockNames.Tanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTanhBlock;\n        case \"FlowGraphASinhBlock\" /* FlowGraphBlockNames.Asinh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAsinhBlock;\n        case \"FlowGraphACoshBlock\" /* FlowGraphBlockNames.Acosh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAcoshBlock;\n        case \"FlowGraphATanhBlock\" /* FlowGraphBlockNames.Atanh */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphAtanhBlock;\n        case \"FlowGraphExponentialBlock\" /* FlowGraphBlockNames.Exponential */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphExpBlock;\n        case \"FlowGraphLogBlock\" /* FlowGraphBlockNames.Log */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLogBlock;\n        case \"FlowGraphLog2Block\" /* FlowGraphBlockNames.Log2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLog2Block;\n        case \"FlowGraphLog10Block\" /* FlowGraphBlockNames.Log10 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLog10Block;\n        case \"FlowGraphSquareRootBlock\" /* FlowGraphBlockNames.SquareRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphSquareRootBlock;\n        case \"FlowGraphPowerBlock\" /* FlowGraphBlockNames.Power */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphPowerBlock;\n        case \"FlowGraphCubeRootBlock\" /* FlowGraphBlockNames.CubeRoot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphCubeRootBlock;\n        case \"FlowGraphBitwiseAndBlock\" /* FlowGraphBlockNames.BitwiseAnd */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseAndBlock;\n        case \"FlowGraphBitwiseOrBlock\" /* FlowGraphBlockNames.BitwiseOr */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseOrBlock;\n        case \"FlowGraphBitwiseNotBlock\" /* FlowGraphBlockNames.BitwiseNot */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseNotBlock;\n        case \"FlowGraphBitwiseXorBlock\" /* FlowGraphBlockNames.BitwiseXor */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseXorBlock;\n        case \"FlowGraphBitwiseLeftShiftBlock\" /* FlowGraphBlockNames.BitwiseLeftShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseLeftShiftBlock;\n        case \"FlowGraphBitwiseRightShiftBlock\" /* FlowGraphBlockNames.BitwiseRightShift */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphBitwiseRightShiftBlock;\n        case \"FlowGraphLengthBlock\" /* FlowGraphBlockNames.Length */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphLengthBlock;\n        case \"FlowGraphNormalizeBlock\" /* FlowGraphBlockNames.Normalize */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphNormalizeBlock;\n        case \"FlowGraphDotBlock\" /* FlowGraphBlockNames.Dot */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphDotBlock;\n        case \"FlowGraphCrossBlock\" /* FlowGraphBlockNames.Cross */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphCrossBlock;\n        case \"FlowGraphRotate2DBlock\" /* FlowGraphBlockNames.Rotate2D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphRotate2DBlock;\n        case \"FlowGraphRotate3DBlock\" /* FlowGraphBlockNames.Rotate3D */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphRotate3DBlock;\n        case \"FlowGraphTransposeBlock\" /* FlowGraphBlockNames.Transpose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphTransposeBlock;\n        case \"FlowGraphDeterminantBlock\" /* FlowGraphBlockNames.Determinant */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphDeterminantBlock;\n        case \"FlowGraphInvertMatrixBlock\" /* FlowGraphBlockNames.InvertMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphInvertMatrixBlock;\n        case \"FlowGraphMatrixMultiplicationBlock\" /* FlowGraphBlockNames.MatrixMultiplication */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixMultiplicationBlock;\n        case \"FlowGraphBranchBlock\" /* FlowGraphBlockNames.Branch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphBranchBlock.js\")).FlowGraphBranchBlock;\n        case \"FlowGraphSetDelayBlock\" /* FlowGraphBlockNames.SetDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSetDelayBlock.js\")).FlowGraphSetDelayBlock;\n        case \"FlowGraphCancelDelayBlock\" /* FlowGraphBlockNames.CancelDelay */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCancelDelayBlock.js\")).FlowGraphCancelDelayBlock;\n        case \"FlowGraphCallCounterBlock\" /* FlowGraphBlockNames.CallCounter */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCounterBlock.js\")).FlowGraphCallCounterBlock;\n        case \"FlowGraphDebounceBlock\" /* FlowGraphBlockNames.Debounce */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDebounceBlock.js\")).FlowGraphDebounceBlock;\n        case \"FlowGraphThrottleBlock\" /* FlowGraphBlockNames.Throttle */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphThrottleBlock.js\")).FlowGraphThrottleBlock;\n        case \"FlowGraphDoNBlock\" /* FlowGraphBlockNames.DoN */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDoNBlock.js\")).FlowGraphDoNBlock;\n        case \"FlowGraphFlipFlopBlock\" /* FlowGraphBlockNames.FlipFlop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphFlipFlopBlock.js\")).FlowGraphFlipFlopBlock;\n        case \"FlowGraphForLoopBlock\" /* FlowGraphBlockNames.ForLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphForLoopBlock.js\")).FlowGraphForLoopBlock;\n        case \"FlowGraphMultiGateBlock\" /* FlowGraphBlockNames.MultiGate */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphMultiGateBlock.js\")).FlowGraphMultiGateBlock;\n        case \"FlowGraphSequenceBlock\" /* FlowGraphBlockNames.Sequence */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSequenceBlock.js\")).FlowGraphSequenceBlock;\n        case \"FlowGraphSwitchBlock\" /* FlowGraphBlockNames.Switch */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSwitchBlock.js\")).FlowGraphSwitchBlock;\n        case \"FlowGraphWaitAllBlock\" /* FlowGraphBlockNames.WaitAll */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWaitAllBlock.js\")).FlowGraphWaitAllBlock;\n        case \"FlowGraphWhileLoopBlock\" /* FlowGraphBlockNames.WhileLoop */:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWhileLoopBlock.js\")).FlowGraphWhileLoopBlock;\n        case \"FlowGraphConsoleLogBlock\" /* FlowGraphBlockNames.ConsoleLog */:\n            return async () => (await import(\"./Execution/flowGraphConsoleLogBlock.js\")).FlowGraphConsoleLogBlock;\n        case \"FlowGraphConditionalBlock\" /* FlowGraphBlockNames.Conditional */:\n            return async () => (await import(\"./Data/flowGraphConditionalDataBlock.js\")).FlowGraphConditionalDataBlock;\n        case \"FlowGraphConstantBlock\" /* FlowGraphBlockNames.Constant */:\n            return async () => (await import(\"./Data/flowGraphConstantBlock.js\")).FlowGraphConstantBlock;\n        case \"FlowGraphTransformCoordinatesSystemBlock\" /* FlowGraphBlockNames.TransformCoordinatesSystem */:\n            return async () => (await import(\"./Data/flowGraphTransformCoordinatesSystemBlock.js\")).FlowGraphTransformCoordinatesSystemBlock;\n        case \"FlowGraphGetAssetBlock\" /* FlowGraphBlockNames.GetAsset */:\n            return async () => (await import(\"./Data/flowGraphGetAssetBlock.js\")).FlowGraphGetAssetBlock;\n        case \"FlowGraphGetPropertyBlock\" /* FlowGraphBlockNames.GetProperty */:\n            return async () => (await import(\"./Data/flowGraphGetPropertyBlock.js\")).FlowGraphGetPropertyBlock;\n        case \"FlowGraphSetPropertyBlock\" /* FlowGraphBlockNames.SetProperty */:\n            return async () => (await import(\"./Execution/flowGraphSetPropertyBlock.js\")).FlowGraphSetPropertyBlock;\n        case \"FlowGraphGetVariableBlock\" /* FlowGraphBlockNames.GetVariable */:\n            return async () => (await import(\"./Data/flowGraphGetVariableBlock.js\")).FlowGraphGetVariableBlock;\n        case \"FlowGraphSetVariableBlock\" /* FlowGraphBlockNames.SetVariable */:\n            return async () => (await import(\"./Execution/flowGraphSetVariableBlock.js\")).FlowGraphSetVariableBlock;\n        case \"FlowGraphJsonPointerParserBlock\" /* FlowGraphBlockNames.JsonPointerParser */:\n            return async () => (await import(\"./Data/Transformers/flowGraphJsonPointerParserBlock.js\")).FlowGraphJsonPointerParserBlock;\n        case \"FlowGraphLeadingZerosBlock\" /* FlowGraphBlockNames.LeadingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphLeadingZerosBlock;\n        case \"FlowGraphTrailingZerosBlock\" /* FlowGraphBlockNames.TrailingZeros */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphTrailingZerosBlock;\n        case \"FlowGraphOneBitsCounterBlock\" /* FlowGraphBlockNames.OneBitsCounter */:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks.js\")).FlowGraphOneBitsCounterBlock;\n        case \"FlowGraphCombineVector2Block\" /* FlowGraphBlockNames.CombineVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector2Block;\n        case \"FlowGraphCombineVector3Block\" /* FlowGraphBlockNames.CombineVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector3Block;\n        case \"FlowGraphCombineVector4Block\" /* FlowGraphBlockNames.CombineVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineVector4Block;\n        case \"FlowGraphCombineMatrixBlock\" /* FlowGraphBlockNames.CombineMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphCombineMatrixBlock;\n        case \"FlowGraphExtractVector2Block\" /* FlowGraphBlockNames.ExtractVector2 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector2Block;\n        case \"FlowGraphExtractVector3Block\" /* FlowGraphBlockNames.ExtractVector3 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector3Block;\n        case \"FlowGraphExtractVector4Block\" /* FlowGraphBlockNames.ExtractVector4 */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractVector4Block;\n        case \"FlowGraphExtractMatrixBlock\" /* FlowGraphBlockNames.ExtractMatrix */:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks.js\")).FlowGraphExtractMatrixBlock;\n        case \"FlowGraphTransformVectorBlock\" /* FlowGraphBlockNames.TransformVector */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphTransformBlock;\n        case \"FlowGraphTransformCoordinatesBlock\" /* FlowGraphBlockNames.TransformCoordinates */:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks.js\")).FlowGraphTransformCoordinatesBlock;\n        case \"FlowGraphMatrixDecompose\" /* FlowGraphBlockNames.MatrixDecompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixDecomposeBlock;\n        case \"FlowGraphMatrixCompose\" /* FlowGraphBlockNames.MatrixCompose */:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks.js\")).FlowGraphMatrixComposeBlock;\n        case \"FlowGraphBooleanToFloat\" /* FlowGraphBlockNames.BooleanToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphBooleanToFloat;\n        case \"FlowGraphBooleanToInt\" /* FlowGraphBlockNames.BooleanToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphBooleanToInt;\n        case \"FlowGraphFloatToBoolean\" /* FlowGraphBlockNames.FloatToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphFloatToBoolean;\n        case \"FlowGraphIntToBoolean\" /* FlowGraphBlockNames.IntToBoolean */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphIntToBoolean;\n        case \"FlowGraphIntToFloat\" /* FlowGraphBlockNames.IntToFloat */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphIntToFloat;\n        case \"FlowGraphFloatToInt\" /* FlowGraphBlockNames.FloatToInt */:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks.js\")).FlowGraphFloatToInt;\n        case \"FlowGraphEasingBlock\" /* FlowGraphBlockNames.Easing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphEasingBlock.js\")).FlowGraphEasingBlock;\n        case \"FlowGraphBezierCurveEasing\" /* FlowGraphBlockNames.BezierCurveEasing */:\n            return async () => (await import(\"./Execution/Animation/flowGraphBezierCurveEasingBlock.js\")).FlowGraphBezierCurveEasingBlock;\n        case \"FlowGraphPointerOverEventBlock\" /* FlowGraphBlockNames.PointerOverEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOverEventBlock.js\")).FlowGraphPointerOverEventBlock;\n        case \"FlowGraphPointerOutEventBlock\" /* FlowGraphBlockNames.PointerOutEvent */:\n            return async () => (await import(\"./Event/flowGraphPointerOutEventBlock.js\")).FlowGraphPointerOutEventBlock;\n        case \"FlowGraphContextBlock\" /* FlowGraphBlockNames.Context */:\n            return async () => (await import(\"./Data/Utils/flowGraphContextBlock.js\")).FlowGraphContextBlock;\n        case \"FlowGraphArrayIndexBlock\" /* FlowGraphBlockNames.ArrayIndex */:\n            return async () => (await import(\"./Data/Utils/flowGraphArrayIndexBlock.js\")).FlowGraphArrayIndexBlock;\n        case \"FlowGraphCodeExecutionBlock\" /* FlowGraphBlockNames.CodeExecution */:\n            return async () => (await import(\"./Data/Utils/flowGraphCodeExecutionBlock.js\")).FlowGraphCodeExecutionBlock;\n        case \"FlowGraphIndexOfBlock\" /* FlowGraphBlockNames.IndexOf */:\n            return async () => (await import(\"./Data/Utils/flowGraphIndexOfBlock.js\")).FlowGraphIndexOfBlock;\n        case \"FlowGraphFunctionReference\" /* FlowGraphBlockNames.FunctionReference */:\n            return async () => (await import(\"./Data/Utils/flowGraphFunctionReferenceBlock.js\")).FlowGraphFunctionReferenceBlock;\n        case \"FlowGraphDataSwitchBlock\" /* FlowGraphBlockNames.DataSwitch */:\n            return async () => (await import(\"./Data/flowGraphDataSwitchBlock.js\")).FlowGraphDataSwitchBlock;\n        default:\n            // check if the block is a custom block\n            if (customBlocks[blockName]) {\n                return customBlocks[blockName];\n            }\n            throw new Error(`Unknown block name ${blockName}`);\n    }\n}\n//# sourceMappingURL=flowGraphBlockFactory.js.map","import { blockFactory } from \"./Blocks/flowGraphBlockFactory.js\";\nimport { FlowGraphCoordinator } from \"./flowGraphCoordinator.js\";\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock.js\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock.js\";\nimport { defaultValueParseFunction, needsPathConverter } from \"./serialization.js\";\nimport { getRichTypeByFlowGraphType, RichType } from \"./flowGraphRichTypes.js\";\n/**\n * Given a list of blocks, find an output data connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetDataOutConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        for (const dataOut of block.dataOutputs) {\n            if (dataOut.uniqueId === uniqueId) {\n                return dataOut;\n            }\n        }\n    }\n    throw new Error(\"Could not find data out connection with unique id \" + uniqueId);\n}\n/**\n * Given a list of blocks, find an input signal connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetSignalInConnectionByUniqueId(blocks, uniqueId) {\n    for (const block of blocks) {\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalIn of block.signalInputs) {\n                if (signalIn.uniqueId === uniqueId) {\n                    return signalIn;\n                }\n            }\n        }\n    }\n    throw new Error(\"Could not find signal in connection with unique id \" + uniqueId);\n}\n/**\n * Parses a serialized coordinator.\n * @param serializedObject the object to parse\n * @param options the options to use when parsing\n * @returns the parsed coordinator\n */\nexport async function ParseCoordinatorAsync(serializedObject, options) {\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    const coordinator = new FlowGraphCoordinator({ scene: options.scene });\n    if (serializedObject.dispatchEventsSynchronously) {\n        coordinator.dispatchEventsSynchronously = serializedObject.dispatchEventsSynchronously;\n    }\n    await options.scene.whenReadyAsync();\n    // if custom default values are defined, set them in the global context\n    if (serializedObject._defaultValues) {\n        for (const key in serializedObject._defaultValues) {\n            // key is the FlowGraphType, value is the default value\n            const value = serializedObject._defaultValues[key];\n            getRichTypeByFlowGraphType(key).defaultValue = value;\n        }\n    }\n    // async-parse the flow graphs. This can be done in parallel\n    await Promise.all(serializedObject._flowGraphs?.map((serializedGraph) => ParseFlowGraphAsync(serializedGraph, { coordinator, valueParseFunction, pathConverter: options.pathConverter })));\n    return coordinator;\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @returns the parsed graph\n */\nexport async function ParseFlowGraphAsync(serializationObject, options) {\n    // get all classes types needed for the blocks using the block factory\n    const resolvedClasses = await Promise.all(serializationObject.allBlocks.map(async (serializedBlock) => {\n        const classFactory = blockFactory(serializedBlock.className);\n        return classFactory();\n    }));\n    // async will be used when we start using the block async factory\n    return ParseFlowGraph(serializationObject, options, resolvedClasses);\n}\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @param resolvedClasses the resolved classes for the blocks\n * @returns the parsed graph\n */\nexport function ParseFlowGraph(serializationObject, options, resolvedClasses) {\n    const graph = options.coordinator.createGraph();\n    const blocks = [];\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    // Parse all blocks\n    // for (const serializedBlock of serializationObject.allBlocks) {\n    for (let i = 0; i < serializationObject.allBlocks.length; i++) {\n        const serializedBlock = serializationObject.allBlocks[i];\n        const block = ParseFlowGraphBlockWithClassType(serializedBlock, { scene: options.coordinator.config.scene, pathConverter: options.pathConverter, assetsContainer: options.coordinator.config.scene, valueParseFunction }, resolvedClasses[i]);\n        blocks.push(block);\n        if (block instanceof FlowGraphEventBlock) {\n            graph.addEventBlock(block);\n        }\n    }\n    // After parsing all blocks, connect them\n    for (const block of blocks) {\n        for (const dataIn of block.dataInputs) {\n            for (const serializedConnection of dataIn.connectedPointIds) {\n                const connection = GetDataOutConnectionByUniqueId(blocks, serializedConnection);\n                dataIn.connectTo(connection);\n            }\n        }\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalOut of block.signalOutputs) {\n                for (const serializedConnection of signalOut.connectedPointIds) {\n                    const connection = GetSignalInConnectionByUniqueId(blocks, serializedConnection);\n                    signalOut.connectTo(connection);\n                }\n            }\n        }\n    }\n    for (const serializedContext of serializationObject.executionContexts) {\n        ParseFlowGraphContext(serializedContext, { graph, valueParseFunction }, serializationObject.rightHanded);\n    }\n    return graph;\n}\n/**\n * Parses a context\n * @param serializationObject the object containing the context serialization values\n * @param options the options for parsing the context\n * @param rightHanded whether the serialized data is right handed\n * @returns\n */\nexport function ParseFlowGraphContext(serializationObject, options, rightHanded) {\n    const result = options.graph.createContext();\n    if (serializationObject.enableLogging) {\n        result.enableLogging = true;\n    }\n    result.treatDataAsRightHanded = rightHanded || false;\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    result.uniqueId = serializationObject.uniqueId;\n    const scene = result.getScene();\n    // check if assets context is available\n    if (serializationObject._assetsContext) {\n        const ac = serializationObject._assetsContext;\n        const assetsContext = {\n            meshes: ac.meshes?.map((m) => scene.getMeshById(m)),\n            lights: ac.lights?.map((l) => scene.getLightByName(l)),\n            cameras: ac.cameras?.map((c) => scene.getCameraByName(c)),\n            materials: ac.materials?.map((m) => scene.getMaterialById(m)),\n            textures: ac.textures?.map((t) => scene.getTextureByName(t)),\n            animations: ac.animations?.map((a) => scene.animations.find((anim) => anim.name === a)),\n            skeletons: ac.skeletons?.map((s) => scene.getSkeletonByName(s)),\n            particleSystems: ac.particleSystems?.map((ps) => scene.getParticleSystemById(ps)),\n            animationGroups: ac.animationGroups?.map((ag) => scene.getAnimationGroupByName(ag)),\n            transformNodes: ac.transformNodes?.map((tn) => scene.getTransformNodeById(tn)),\n            rootNodes: [],\n            multiMaterials: [],\n            morphTargetManagers: [],\n            geometries: [],\n            actionManagers: [],\n            environmentTexture: null,\n            postProcesses: [],\n            sounds: null,\n            effectLayers: [],\n            layers: [],\n            reflectionProbes: [],\n            lensFlareSystems: [],\n            proceduralTextures: [],\n            getNodes: function () {\n                throw new Error(\"Function not implemented.\");\n            },\n        };\n        result.assetsContext = assetsContext;\n    }\n    for (const key in serializationObject._userVariables) {\n        const value = valueParseFunction(key, serializationObject._userVariables, result.assetsContext, scene);\n        result.userVariables[key] = value;\n    }\n    for (const key in serializationObject._connectionValues) {\n        const value = valueParseFunction(key, serializationObject._connectionValues, result.assetsContext, scene);\n        result._setConnectionValueByKey(key, value);\n    }\n    return result;\n}\n/**\n * Parses a block from a serialization object\n * This function is async due to the factory method that is used to create the block's class. If you load the class externally use ParseBlockWithClassType\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @returns the parsed block\n */\nexport async function ParseBlockAsync(serializationObject, parseOptions) {\n    const classFactory = blockFactory(serializationObject.className);\n    const classType = await classFactory();\n    return ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType);\n}\n/**\n * Parses a block from a serialization object\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @param classType the class type of the block. This is used when the class is not loaded asynchronously\n * @returns the parsed block\n */\nexport function ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType) {\n    const parsedConfig = {};\n    const valueParseFunction = parseOptions.valueParseFunction ?? defaultValueParseFunction;\n    if (serializationObject.config) {\n        for (const key in serializationObject.config) {\n            parsedConfig[key] = valueParseFunction(key, serializationObject.config, parseOptions.assetsContainer || parseOptions.scene, parseOptions.scene);\n        }\n    }\n    if (needsPathConverter(serializationObject.className)) {\n        if (!parseOptions.pathConverter) {\n            throw new Error(\"Path converter is required for this block\");\n        }\n        parsedConfig.pathConverter = parseOptions.pathConverter;\n    }\n    const obj = new classType(parsedConfig);\n    obj.uniqueId = serializationObject.uniqueId;\n    for (let i = 0; i < serializationObject.dataInputs.length; i++) {\n        const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);\n        if (dataInput) {\n            dataInput.deserialize(serializationObject.dataInputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data input with name \" + serializationObject.dataInputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\n        const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);\n        if (dataOutput) {\n            dataOutput.deserialize(serializationObject.dataOutputs[i]);\n        }\n        else {\n            throw new Error(\"Could not find data output with name \" + serializationObject.dataOutputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    obj.metadata = serializationObject.metadata;\n    obj.deserialize && obj.deserialize(serializationObject);\n    return obj;\n}\n/**\n * Parses a connection from an object\n * @param serializationObject the object to parse from.\n * @param ownerBlock the block that owns the connection.\n * @param classType the class type of the connection.\n * @returns the parsed connection.\n */\nexport function ParseGraphConnectionWithClassType(serializationObject = {}, ownerBlock, classType) {\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a data connection from a serialized object.\n * @param serializationObject the object to parse from\n * @param ownerBlock the block that owns the connection\n * @param classType the class type of the data connection\n * @returns the parsed connection\n */\nexport function ParseGraphDataConnection(serializationObject, ownerBlock, classType) {\n    const richType = ParseRichType(serializationObject.richType);\n    const defaultValue = serializationObject.defaultValue;\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock, richType, defaultValue, !!serializationObject._optional);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n/**\n * Parses a rich type from a serialization object.\n * @param serializationObject a serialization object\n * @returns the parsed rich type\n */\nfunction ParseRichType(serializationObject) {\n    return new RichType(serializationObject.typeName, serializationObject.defaultValue);\n}\n//# sourceMappingURL=flowGraphParser.js.map","import { SerializationHelper } from \"../../Misc/decorators.serialization.js\";\nimport { _UpdateRGBDAsync as UpdateRGBDAsyncEnvTools } from \"../../Misc/environmentTextureTools.js\";\nimport { CubeTexture } from \"./cubeTexture.js\";\n\n/**\n * Raw cube texture where the raw buffers are passed in\n */\nexport class RawCubeTexture extends CubeTexture {\n    /**\n     * Creates a cube texture where the raw buffers are passed in.\n     * @param scene defines the scene the texture is attached to\n     * @param data defines the array of data to use to create each face\n     * @param size defines the size of the textures\n     * @param format defines the format of the data\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_BYTE)\n     * @param generateMipMaps  defines if the engine should generate the mip levels\n     * @param invertY defines if data must be stored with Y axis inverted\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\n     * @param compression defines the compression used (null by default)\n     */\n    constructor(scene, data, size, format = 5, type = 0, generateMipMaps = false, invertY = false, samplingMode = 3, compression = null) {\n        super(\"\", scene);\n        this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\n    }\n    /**\n     * Updates the raw cube texture.\n     * @param data defines the data to store\n     * @param format defines the data format\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\n     * @param invertY defines if data must be stored with Y axis inverted\n     * @param compression defines the compression used (null by default)\n     */\n    update(data, format, type, invertY, compression = null) {\n        this._texture.getEngine().updateRawCubeTexture(this._texture, data, format, type, invertY, compression);\n    }\n    /**\n     * Updates a raw cube texture with RGBD encoded data.\n     * @param data defines the array of data [mipmap][face] to use to create each face\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\n     * @returns a promise that resolves when the operation is complete\n     */\n    updateRGBDAsync(data, sphericalPolynomial = null, lodScale = 0.8, lodOffset = 0) {\n        return UpdateRGBDAsyncEnvTools(this._texture, data, sphericalPolynomial, lodScale, lodOffset).then(() => { });\n    }\n    /**\n     * Clones the raw cube texture.\n     * @returns a new cube texture\n     */\n    clone() {\n        return SerializationHelper.Clone(() => {\n            const scene = this.getScene();\n            const internalTexture = this._texture;\n            const texture = new RawCubeTexture(scene, internalTexture._bufferViewArray, internalTexture.width, internalTexture.format, internalTexture.type, internalTexture.generateMipMaps, internalTexture.invertY, internalTexture.samplingMode, internalTexture._compression);\n            if (internalTexture.source === 13 /* InternalTextureSource.CubeRawRGBD */) {\n                texture.updateRGBDAsync(internalTexture._bufferViewArrayArray, internalTexture._sphericalPolynomial, internalTexture._lodGenerationScale, internalTexture._lodGenerationOffset);\n            }\n            return texture;\n        }, this);\n    }\n}\n//# sourceMappingURL=rawCubeTexture.js.map","/**\n * Wrapper class for promise with external resolve and reject.\n */\nexport class Deferred {\n    /**\n     * The resolve method of the promise associated with this deferred object.\n     */\n    get resolve() {\n        return this._resolve;\n    }\n    /**\n     * The reject method of the promise associated with this deferred object.\n     */\n    get reject() {\n        return this._reject;\n    }\n    /**\n     * Constructor for this deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this._resolve = resolve;\n            this._reject = reject;\n        });\n    }\n}\n//# sourceMappingURL=deferred.js.map","import { Decode } from \"./stringTools.js\";\n/**\n * Utility class for reading from a data buffer\n */\nexport class DataReader {\n    /**\n     * Constructor\n     * @param buffer The buffer to read\n     */\n    constructor(buffer) {\n        /**\n         * The current byte offset from the beginning of the data buffer.\n         */\n        this.byteOffset = 0;\n        this.buffer = buffer;\n    }\n    /**\n     * Loads the given byte length.\n     * @param byteLength The byte length to load\n     * @returns A promise that resolves when the load is complete\n     */\n    loadAsync(byteLength) {\n        return this.buffer.readAsync(this.byteOffset, byteLength).then((data) => {\n            this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n            this._dataByteOffset = 0;\n        });\n    }\n    /**\n     * Read a unsigned 32-bit integer from the currently loaded data range.\n     * @returns The 32-bit integer read\n     */\n    readUint32() {\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\n        this._dataByteOffset += 4;\n        this.byteOffset += 4;\n        return value;\n    }\n    /**\n     * Read a byte array from the currently loaded data range.\n     * @param byteLength The byte length to read\n     * @returns The byte array read\n     */\n    readUint8Array(byteLength) {\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\n        this._dataByteOffset += byteLength;\n        this.byteOffset += byteLength;\n        return value;\n    }\n    /**\n     * Read a string from the currently loaded data range.\n     * @param byteLength The byte length to read\n     * @returns The string read\n     */\n    readString(byteLength) {\n        return Decode(this.readUint8Array(byteLength));\n    }\n    /**\n     * Skips the given byte length the currently loaded data range.\n     * @param byteLength The byte length to skip\n     */\n    skipBytes(byteLength) {\n        this._dataByteOffset += byteLength;\n        this.byteOffset += byteLength;\n    }\n}\n//# sourceMappingURL=dataReader.js.map"],"file":"assets/dataReader-DPhJthB_.js"}