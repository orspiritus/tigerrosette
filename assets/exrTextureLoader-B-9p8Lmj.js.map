{"version":3,"file":"exrTextureLoader-B-9p8Lmj.js","sources":["../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.header.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.compression.rle.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.compression.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/EXR/exrLoader.decoder.js","../../node_modules/@babylonjs/core/Materials/Textures/Loaders/exrTextureLoader.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../../../../Misc/logger.js\";\nimport { ParseNullTerminatedString, ParseUint32, ParseValue } from \"./exrLoader.core.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\nconst EXR_MAGIC = 20000630;\n/**\n * Gets the EXR header\n * @param dataView defines the data view to read from\n * @param offset defines the offset to start reading from\n * @returns the header\n */\nexport function GetExrHeader(dataView, offset) {\n    if (dataView.getUint32(0, true) != EXR_MAGIC) {\n        throw new Error(\"Incorrect OpenEXR format\");\n    }\n    const version = dataView.getUint8(4);\n    const specData = dataView.getUint8(5); // fullMask\n    const spec = {\n        singleTile: !!(specData & 2),\n        longName: !!(specData & 4),\n        deepFormat: !!(specData & 8),\n        multiPart: !!(specData & 16),\n    };\n    offset.value = 8;\n    const headerData = {};\n    let keepReading = true;\n    while (keepReading) {\n        const attributeName = ParseNullTerminatedString(dataView.buffer, offset);\n        if (!attributeName) {\n            keepReading = false;\n        }\n        else {\n            const attributeType = ParseNullTerminatedString(dataView.buffer, offset);\n            const attributeSize = ParseUint32(dataView, offset);\n            const attributeValue = ParseValue(dataView, offset, attributeType, attributeSize);\n            if (attributeValue === undefined) {\n                Logger.Warn(`Unknown header attribute type ${attributeType}'.`);\n            }\n            else {\n                headerData[attributeName] = attributeValue;\n            }\n        }\n    }\n    if ((specData & ~0x04) != 0) {\n        throw new Error(\"Unsupported file format\");\n    }\n    return { version: version, spec: spec, ...headerData };\n}\n//# sourceMappingURL=exrLoader.header.js.map","/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/** @internal */\nexport function DecodeRunLength(source) {\n    let size = source.byteLength;\n    const out = new Array();\n    let p = 0;\n    const reader = new DataView(source);\n    while (size > 0) {\n        const l = reader.getInt8(p++);\n        if (l < 0) {\n            const count = -l;\n            size -= count + 1;\n            for (let i = 0; i < count; i++) {\n                out.push(reader.getUint8(p++));\n            }\n        }\n        else {\n            const count = l;\n            size -= 2;\n            const value = reader.getUint8(p++);\n            for (let i = 0; i < count + 1; i++) {\n                out.push(value);\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=exrLoader.compression.rle.js.map","import { ApplyLut, HufUncompress, ReverseLutFromBitmap, Wav2Decode } from \"./exrLoader.compression.huf.js\";\nimport { DecodeRunLength } from \"./exrLoader.compression.rle.js\";\nimport { InterleaveScalar, ParseUint16, ParseUint32, ParseUint8, Predictor } from \"./exrLoader.core.js\";\nimport { BITMAP_SIZE, INT16_SIZE, USHORT_RANGE } from \"./exrLoader.interfaces.js\";\n/**\n * No compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRAW(decoder) {\n    return new DataView(decoder.array.buffer, decoder.offset.value, decoder.size);\n}\n/**\n * RLE compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressRLE(decoder) {\n    const compressed = decoder.viewer.buffer.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = new Uint8Array(DecodeRunLength(compressed));\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * Zip compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressZIP(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const tmpBuffer = new Uint8Array(rawBuffer.length);\n    Predictor(rawBuffer);\n    InterleaveScalar(rawBuffer, tmpBuffer);\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PXR compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPXR(decoder) {\n    const compressed = decoder.array.slice(decoder.offset.value, decoder.offset.value + decoder.size);\n    const rawBuffer = fflate.unzlibSync(compressed);\n    const sz = decoder.lines * decoder.channels * decoder.width;\n    const tmpBuffer = decoder.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n    let tmpBufferEnd = 0;\n    let writePtr = 0;\n    const ptr = new Array(4);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            let pixel = 0;\n            switch (decoder.type) {\n                case 1:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    tmpBufferEnd = ptr[1] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 8) | rawBuffer[ptr[1]++];\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n                case 2:\n                    ptr[0] = tmpBufferEnd;\n                    ptr[1] = ptr[0] + decoder.width;\n                    ptr[2] = ptr[1] + decoder.width;\n                    tmpBufferEnd = ptr[2] + decoder.width;\n                    for (let j = 0; j < decoder.width; ++j) {\n                        const diff = (rawBuffer[ptr[0]++] << 24) | (rawBuffer[ptr[1]++] << 16) | (rawBuffer[ptr[2]++] << 8);\n                        pixel += diff;\n                        tmpBuffer[writePtr] = pixel;\n                        writePtr++;\n                    }\n                    break;\n            }\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n/**\n * PIZ compression\n * @param decoder defines the decoder to use\n * @returns a decompressed data view\n */\nexport function UncompressPIZ(decoder) {\n    const inDataView = decoder.viewer;\n    const inOffset = { value: decoder.offset.value };\n    const outBuffer = new Uint16Array(decoder.width * decoder.scanlineBlockSize * (decoder.channels * decoder.type));\n    const bitmap = new Uint8Array(BITMAP_SIZE);\n    // Setup channel info\n    let outBufferEnd = 0;\n    const pizChannelData = new Array(decoder.channels);\n    for (let i = 0; i < decoder.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i][\"start\"] = outBufferEnd;\n        pizChannelData[i][\"end\"] = pizChannelData[i][\"start\"];\n        pizChannelData[i][\"nx\"] = decoder.width;\n        pizChannelData[i][\"ny\"] = decoder.lines;\n        pizChannelData[i][\"size\"] = decoder.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n    }\n    // Read range compression data\n    const minNonZero = ParseUint16(inDataView, inOffset);\n    const maxNonZero = ParseUint16(inDataView, inOffset);\n    if (maxNonZero >= BITMAP_SIZE) {\n        throw new Error(\"Wrong PIZ_COMPRESSION BITMAP_SIZE\");\n    }\n    if (minNonZero <= maxNonZero) {\n        for (let i = 0; i < maxNonZero - minNonZero + 1; i++) {\n            bitmap[i + minNonZero] = ParseUint8(inDataView, inOffset);\n        }\n    }\n    // Reverse LUT\n    const lut = new Uint16Array(USHORT_RANGE);\n    const maxValue = ReverseLutFromBitmap(bitmap, lut);\n    const length = ParseUint32(inDataView, inOffset);\n    // Huffman decoding\n    HufUncompress(decoder.array, inDataView, inOffset, length, outBuffer, outBufferEnd);\n    // Wavelet decoding\n    for (let i = 0; i < decoder.channels; ++i) {\n        const cd = pizChannelData[i];\n        for (let j = 0; j < pizChannelData[i].size; ++j) {\n            Wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n    }\n    // Expand the pixel data to their original range\n    ApplyLut(lut, outBuffer, outBufferEnd);\n    // Rearrange the pixel data into the format expected by the caller.\n    let tmpOffset = 0;\n    const tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n    for (let y = 0; y < decoder.lines; y++) {\n        for (let c = 0; c < decoder.channels; c++) {\n            const cd = pizChannelData[c];\n            const n = cd.nx * cd.size;\n            const cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n            tmpBuffer.set(cp, tmpOffset);\n            tmpOffset += n * INT16_SIZE;\n            cd.end += n;\n        }\n    }\n    return new DataView(tmpBuffer.buffer);\n}\n//# sourceMappingURL=exrLoader.compression.js.map","import { CompressionCodes, DecodeFloat32, ParseFloat16, ParseFloat32, ParseInt32, ParseInt64, ParseUint16, ParseUint32 } from \"./exrLoader.core.js\";\nimport { UncompressPIZ, UncompressPXR, UncompressRAW, UncompressRLE, UncompressZIP } from \"./exrLoader.compression.js\";\nimport { FLOAT32_SIZE, INT16_SIZE } from \"./exrLoader.interfaces.js\";\n\nimport { Tools } from \"../../../../Misc/tools.js\";\nimport { ExrLoaderGlobalConfiguration, EXROutputType } from \"./exrLoader.configuration.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Create a decoder for the exr file\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n * @param outputType expected output type (float or half float)\n * @returns a promise that resolves with the decoder\n */\nexport async function CreateDecoderAsync(header, dataView, offset, outputType) {\n    const decoder = {\n        size: 0,\n        viewer: dataView,\n        array: new Uint8Array(dataView.buffer),\n        offset: offset,\n        width: header.dataWindow.xMax - header.dataWindow.xMin + 1,\n        height: header.dataWindow.yMax - header.dataWindow.yMin + 1,\n        channels: header.channels.length,\n        channelLineOffsets: {},\n        scanOrder: () => 0,\n        bytesPerLine: 0,\n        outLineWidth: 0,\n        lines: 0,\n        scanlineBlockSize: 0,\n        inputSize: null,\n        type: 0,\n        uncompress: null,\n        getter: () => 0,\n        format: 5,\n        outputChannels: 0,\n        decodeChannels: {},\n        blockCount: null,\n        byteArray: null,\n        linearSpace: false,\n        textureType: 0,\n    };\n    switch (header.compression) {\n        case CompressionCodes.NO_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRAW;\n            break;\n        case CompressionCodes.RLE_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressRLE;\n            break;\n        case CompressionCodes.ZIPS_COMPRESSION:\n            decoder.lines = 1;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.ZIP_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressZIP;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        case CompressionCodes.PIZ_COMPRESSION:\n            decoder.lines = 32;\n            decoder.uncompress = UncompressPIZ;\n            break;\n        case CompressionCodes.PXR24_COMPRESSION:\n            decoder.lines = 16;\n            decoder.uncompress = UncompressPXR;\n            await Tools.LoadScriptAsync(ExrLoaderGlobalConfiguration.FFLATEUrl);\n            break;\n        default:\n            throw new Error(CompressionCodes[header.compression] + \" is unsupported\");\n    }\n    decoder.scanlineBlockSize = decoder.lines;\n    const channels = {};\n    for (const channel of header.channels) {\n        switch (channel.name) {\n            case \"Y\":\n            case \"R\":\n            case \"G\":\n            case \"B\":\n            case \"A\":\n                channels[channel.name] = true;\n                decoder.type = channel.pixelType;\n        }\n    }\n    // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n    let fillAlpha = false;\n    if (channels.R && channels.G && channels.B) {\n        fillAlpha = !channels.A;\n        decoder.outputChannels = 4;\n        decoder.decodeChannels = { R: 0, G: 1, B: 2, A: 3 };\n    }\n    else if (channels.Y) {\n        decoder.outputChannels = 1;\n        decoder.decodeChannels = { Y: 0 };\n    }\n    else {\n        throw new Error(\"EXRLoader.parse: file contains unsupported data channels.\");\n    }\n    if (decoder.type === 1) {\n        // half\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = ParseUint16;\n                decoder.inputSize = INT16_SIZE;\n                break;\n        }\n    }\n    else if (decoder.type === 2) {\n        // float\n        switch (outputType) {\n            case EXROutputType.Float:\n                decoder.getter = ParseFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n                break;\n            case EXROutputType.HalfFloat:\n                decoder.getter = DecodeFloat32;\n                decoder.inputSize = FLOAT32_SIZE;\n        }\n    }\n    else {\n        throw new Error(\"Unsupported pixelType \" + decoder.type + \" for \" + header.compression);\n    }\n    decoder.blockCount = decoder.height / decoder.scanlineBlockSize;\n    for (let i = 0; i < decoder.blockCount; i++) {\n        ParseInt64(dataView, offset); // scanlineOffset\n    }\n    // we should be passed the scanline offset table, ready to start reading pixel data.\n    const size = decoder.width * decoder.height * decoder.outputChannels;\n    switch (outputType) {\n        case EXROutputType.Float:\n            decoder.byteArray = new Float32Array(size);\n            decoder.textureType = 1;\n            // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n            if (fillAlpha) {\n                decoder.byteArray.fill(1, 0, size);\n            }\n            break;\n        case EXROutputType.HalfFloat:\n            decoder.byteArray = new Uint16Array(size);\n            decoder.textureType = 2;\n            if (fillAlpha) {\n                decoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n            }\n            break;\n        default:\n            throw new Error(\"Unsupported type: \" + outputType);\n    }\n    let byteOffset = 0;\n    for (const channel of header.channels) {\n        if (decoder.decodeChannels[channel.name] !== undefined) {\n            decoder.channelLineOffsets[channel.name] = byteOffset * decoder.width;\n        }\n        byteOffset += channel.pixelType * 2;\n    }\n    decoder.bytesPerLine = decoder.width * byteOffset;\n    decoder.outLineWidth = decoder.width * decoder.outputChannels;\n    if (header.lineOrder === \"INCREASING_Y\") {\n        decoder.scanOrder = (y) => y;\n    }\n    else {\n        decoder.scanOrder = (y) => decoder.height - 1 - y;\n    }\n    if (decoder.outputChannels == 4) {\n        decoder.format = 5;\n        decoder.linearSpace = true;\n    }\n    else {\n        decoder.format = 6;\n        decoder.linearSpace = false;\n    }\n    return decoder;\n}\n/**\n * Scan the data of the exr file\n * @param decoder decoder to use\n * @param header header of the exr file\n * @param dataView dataview of the exr file\n * @param offset current offset\n */\nexport function ScanData(decoder, header, dataView, offset) {\n    const tmpOffset = { value: 0 };\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < decoder.height / decoder.scanlineBlockSize; scanlineBlockIdx++) {\n        const line = ParseInt32(dataView, offset) - header.dataWindow.yMin; // line_no\n        decoder.size = ParseUint32(dataView, offset); // data_len\n        decoder.lines = line + decoder.scanlineBlockSize > decoder.height ? decoder.height - line : decoder.scanlineBlockSize;\n        const isCompressed = decoder.size < decoder.lines * decoder.bytesPerLine;\n        const viewer = isCompressed && decoder.uncompress ? decoder.uncompress(decoder) : UncompressRAW(decoder);\n        offset.value += decoder.size;\n        for (let line_y = 0; line_y < decoder.scanlineBlockSize; line_y++) {\n            const scan_y = scanlineBlockIdx * decoder.scanlineBlockSize;\n            const true_y = line_y + decoder.scanOrder(scan_y);\n            if (true_y >= decoder.height) {\n                continue;\n            }\n            const lineOffset = line_y * decoder.bytesPerLine;\n            const outLineOffset = (decoder.height - 1 - true_y) * decoder.outLineWidth;\n            for (let channelID = 0; channelID < decoder.channels; channelID++) {\n                const name = header.channels[channelID].name;\n                const lOff = decoder.channelLineOffsets[name];\n                const cOff = decoder.decodeChannels[name];\n                if (cOff === undefined) {\n                    continue;\n                }\n                tmpOffset.value = lineOffset + lOff;\n                for (let x = 0; x < decoder.width; x++) {\n                    const outIndex = outLineOffset + x * decoder.outputChannels + cOff;\n                    if (decoder.byteArray) {\n                        decoder.byteArray[outIndex] = decoder.getter(viewer, tmpOffset);\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=exrLoader.decoder.js.map","import { GetExrHeader } from \"./EXR/exrLoader.header.js\";\nimport { CreateDecoderAsync, ScanData } from \"./EXR/exrLoader.decoder.js\";\nimport { ExrLoaderGlobalConfiguration } from \"./EXR/exrLoader.configuration.js\";\n/**\n * Inspired by https://github.com/sciecode/three.js/blob/dev/examples/jsm/loaders/EXRLoader.js\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n/**\n * Loader for .exr file format\n * @see [PIZ compression](https://playground.babylonjs.com/#4RN0VF#151)\n * @see [ZIP compression](https://playground.babylonjs.com/#4RN0VF#146)\n * @see [RLE compression](https://playground.babylonjs.com/#4RN0VF#149)\n * @see [PXR24 compression](https://playground.babylonjs.com/#4RN0VF#150)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class _ExrTextureLoader {\n    constructor() {\n        /**\n         * Defines whether the loader supports cascade loading the different faces.\n         */\n        this.supportCascades = false;\n    }\n    /**\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\n     * @param _data contains the texture data\n     * @param _texture defines the BabylonJS internal texture\n     * @param _createPolynomials will be true if polynomials have been requested\n     * @param _onLoad defines the callback to trigger once the texture is ready\n     * @param _onError defines the callback to trigger in case of error\n     * Cube texture are not supported by .exr files\n     */\n    loadCubeData(_data, _texture, _createPolynomials, _onLoad, _onError) {\n        // eslint-disable-next-line no-throw-literal\n        throw \".exr not supported in Cube.\";\n    }\n    /**\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n     * @param data contains the texture data\n     * @param texture defines the BabylonJS internal texture\n     * @param callback defines the method to call once ready to upload\n     */\n    async loadData(data, texture, callback) {\n        const dataView = new DataView(data.buffer);\n        const offset = { value: 0 };\n        const header = GetExrHeader(dataView, offset);\n        const decoder = await CreateDecoderAsync(header, dataView, offset, ExrLoaderGlobalConfiguration.DefaultOutputType);\n        ScanData(decoder, header, dataView, offset);\n        // Updating texture\n        const width = header.dataWindow.xMax - header.dataWindow.xMin + 1;\n        const height = header.dataWindow.yMax - header.dataWindow.yMin + 1;\n        callback(width, height, texture.generateMipMaps, false, () => {\n            const engine = texture.getEngine();\n            texture.format = header.format;\n            texture.type = decoder.textureType;\n            texture.invertY = false;\n            texture._gammaSpace = !header.linearSpace;\n            if (decoder.byteArray) {\n                engine._uploadDataToTextureDirectly(texture, decoder.byteArray, 0, 0, undefined, true);\n            }\n        });\n    }\n}\n//# sourceMappingURL=exrTextureLoader.js.map"],"names":["EXR_MAGIC","GetExrHeader","dataView","offset","version","specData","spec","headerData","keepReading","attributeName","ParseNullTerminatedString","attributeType","attributeSize","ParseUint32","attributeValue","ParseValue","Logger","DecodeRunLength","source","size","out","p","reader","l","count","i","value","UncompressRAW","decoder","UncompressRLE","compressed","rawBuffer","tmpBuffer","Predictor","InterleaveScalar","UncompressZIP","UncompressPXR","sz","tmpBufferEnd","writePtr","ptr","y","c","pixel","j","diff","UncompressPIZ","inDataView","inOffset","outBuffer","bitmap","BITMAP_SIZE","outBufferEnd","pizChannelData","minNonZero","ParseUint16","maxNonZero","ParseUint8","lut","USHORT_RANGE","maxValue","ReverseLutFromBitmap","length","HufUncompress","cd","Wav2Decode","ApplyLut","tmpOffset","n","cp","INT16_SIZE","CreateDecoderAsync","header","outputType","CompressionCodes","Tools","ExrLoaderGlobalConfiguration","channels","channel","fillAlpha","EXROutputType","ParseFloat16","ParseFloat32","FLOAT32_SIZE","DecodeFloat32","ParseInt64","byteOffset","ScanData","scanlineBlockIdx","line","ParseInt32","viewer","line_y","scan_y","true_y","lineOffset","outLineOffset","channelID","name","lOff","cOff","x","outIndex","_ExrTextureLoader","_data","_texture","_createPolynomials","_onLoad","_onError","data","texture","callback","width","height","engine"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}