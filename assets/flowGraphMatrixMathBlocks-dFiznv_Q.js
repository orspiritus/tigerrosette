import{cb as s,M as m,b_ as b,bS as M,c3 as w,c1 as p,c8 as F,b$ as k,V as u,Q as x,ff as r}from"./pointsCloudSystem-2vcS-S4d.js";import{F as V}from"./flowGraphUnaryOperationBlock-BvbmF_Vi.js";import{F as D}from"./flowGraphBinaryOperationBlock-DZCn6KPT.js";import"./index-rhFFGTpy.js";import"./motion-3WHHzQTP.js";import"./vendor-CIP6LD3P.js";import"./flowGraphCachedOperationBlock-ByGHbGUe.js";class _ extends V{constructor(t){super(s((t==null?void 0:t.matrixType)||"Matrix"),s((t==null?void 0:t.matrixType)||"Matrix"),a=>a.transpose?a.transpose():m.Transpose(a),"FlowGraphTransposeBlock",t)}}r("FlowGraphTransposeBlock",_);class E extends V{constructor(t){super(s((t==null?void 0:t.matrixType)||"Matrix"),b,a=>a.determinant(),"FlowGraphDeterminantBlock",t)}}r("FlowGraphDeterminantBlock",E);class v extends V{constructor(t){super(s((t==null?void 0:t.matrixType)||"Matrix"),s((t==null?void 0:t.matrixType)||"Matrix"),a=>a.inverse?a.inverse():m.Invert(a),"FlowGraphInvertMatrixBlock",t)}}r("FlowGraphInvertMatrixBlock",v);class Q extends D{constructor(t){super(s((t==null?void 0:t.matrixType)||"Matrix"),s((t==null?void 0:t.matrixType)||"Matrix"),s((t==null?void 0:t.matrixType)||"Matrix"),(a,e)=>e.multiply(a),"FlowGraphMatrixMultiplicationBlock",t)}}r("FlowGraphMatrixMultiplicationBlock",Q);class O extends M{constructor(t){super(t),this.input=this.registerDataInput("input",w),this.position=this.registerDataOutput("position",p),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",F),this.scaling=this.registerDataOutput("scaling",p),this.isValid=this.registerDataOutput("isValid",k,!1)}_updateOutputs(t){const a=t._getExecutionVariable(this,"executionId",-1),e=t._getExecutionVariable(this,"cachedPosition",null),i=t._getExecutionVariable(this,"cachedRotation",null),h=t._getExecutionVariable(this,"cachedScaling",null);if(a===t.executionId&&e&&i&&h)this.position.setValue(e,t),this.rotationQuaternion.setValue(i,t),this.scaling.setValue(h,t);else{const l=this.input.getValue(t),n=e||new u,c=i||new x,d=h||new u,G=Math.round(l.m[3]*1e4)/1e4,y=Math.round(l.m[7]*1e4)/1e4,B=Math.round(l.m[11]*1e4)/1e4,I=Math.round(l.m[15]*1e4)/1e4;if(G!==0||y!==0||B!==0||I!==1){this.isValid.setValue(!1,t),this.position.setValue(u.Zero(),t),this.rotationQuaternion.setValue(x.Identity(),t),this.scaling.setValue(u.One(),t);return}const T=l.decompose(d,c,n);this.isValid.setValue(T,t),this.position.setValue(n,t),this.rotationQuaternion.setValue(c,t),this.scaling.setValue(d,t),t._setExecutionVariable(this,"cachedPosition",n),t._setExecutionVariable(this,"cachedRotation",c),t._setExecutionVariable(this,"cachedScaling",d),t._setExecutionVariable(this,"executionId",t.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}r("FlowGraphMatrixDecompose",O);class R extends M{constructor(t){super(t),this.position=this.registerDataInput("position",p),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",F),this.scaling=this.registerDataInput("scaling",p),this.value=this.registerDataOutput("value",w)}_updateOutputs(t){const a=t._getExecutionVariable(this,"executionId",-1),e=t._getExecutionVariable(this,"cachedMatrix",null);if(a===t.executionId&&e)this.value.setValue(e,t);else{const i=m.Compose(this.scaling.getValue(t),this.rotationQuaternion.getValue(t),this.position.getValue(t));this.value.setValue(i,t),t._setExecutionVariable(this,"cachedMatrix",i),t._setExecutionVariable(this,"executionId",t.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}r("FlowGraphMatrixCompose",R);export{E as FlowGraphDeterminantBlock,v as FlowGraphInvertMatrixBlock,R as FlowGraphMatrixComposeBlock,O as FlowGraphMatrixDecomposeBlock,Q as FlowGraphMatrixMultiplicationBlock,_ as FlowGraphTransposeBlock};
//# sourceMappingURL=flowGraphMatrixMathBlocks-dFiznv_Q.js.map
