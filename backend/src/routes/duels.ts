import { Router } from 'express';
import prisma from '../lib/prisma';

const router = Router();

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–µ–π
router.get('/players/:userId', async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Python –±–æ—Ç—É
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const availablePlayers = [
      {
        id: 12345,
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–ò–≤–∞–Ω–æ–≤–∞', 
        username: 'anna_i',
        level: 8,
        totalGames: 15,
        wins: 12
      },
      {
        id: 54321,
        firstName: '–ú–∏—Ö–∞–∏–ª',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        username: 'mike_p', 
        level: 6,
        totalGames: 10,
        wins: 7
      },
      {
        id: 98765,
        firstName: '–ï–ª–µ–Ω–∞',
        username: 'lena_gamer',
        level: 10,
        totalGames: 25,
        wins: 20
      }
    ];
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const filteredPlayers = availablePlayers.filter(p => p.id !== userId);
    
    res.json({
      success: true,
      players: filteredPlayers
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏
router.get('/info/:duelId', async (req, res) => {
  try {
    const { duelId } = req.params;
    
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏: ${duelId}`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Python –±–æ—Ç—É
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockDuelInfo = {
      id: duelId,
      player1_id: 7959318906,
      player2_id: 426792114,
      status: 'pending',
      created_at: new Date().toISOString(),
      expires_at: new Date(Date.now() + 5 * 60 * 1000).toISOString(), // 5 –º–∏–Ω—É—Ç –æ—Ç —Å–µ–π—á–∞—Å
      fromUser: {
        firstName: '–ò–≥—Ä–æ–∫',
        level: 5
      }
    };
    
    res.json({
      success: true,
      duel: mockDuelInfo
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—ç–ª–∏'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å
router.post('/invite', async (req, res) => {
  try {
    const { fromUserId, toUserId, message } = req.body;
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥—É—ç–ª–∏
    const duelId = `duel_${Date.now()}_${fromUserId}_${toUserId}`;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Python –±–æ—Ç–∞ —á–µ—Ä–µ–∑ HTTP API
    // await callPythonBot('create_duel_invite', { fromUserId, toUserId, duelId });
    
    console.log(`üì§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å: ${fromUserId} ‚Üí ${toUserId}`);
    console.log(`üÜî Duel ID: ${duelId}`);
    
    res.json({
      success: true,
      duelId,
      message: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥—É—ç–ª–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Python –±–æ—Ç–æ–º)
router.post('/start', async (req, res) => {
  try {
    const { duelId, player1Id, player2Id, status } = req.body;
    
    console.log(`üéÆ –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${duelId}`);
    console.log(`üë• –ò–≥—Ä–æ–∫–∏: ${player1Id} vs ${player2Id}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—ç–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // await prisma.duel.create({
    //   data: {
    //     id: duelId,
    //     player1Id,
    //     player2Id,
    //     status: 'active'
    //   }
    // });
    
    res.json({
      success: true,
      message: '–î—É—ç–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—É—ç–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—É—ç–ª–∏'
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏
router.post('/finish', async (req, res) => {
  try {
    const { duelId, winnerId, player1Score, player2Score } = req.body;
    
    console.log(`üèÜ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${duelId}`);
    console.log(`üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerId}`);
    console.log(`üìä –°—á–µ—Ç: ${player1Score} - ${player2Score}`);
    
    res.json({
      success: true,
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—É—ç–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    });
  }
});

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ Python –±–æ—Ç–∞ (–±—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
async function callPythonBot(action: string, data: any) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Python —Å–µ—Ä–≤–µ—Ä—É
  // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis/–æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  console.log(`üêç Python Bot API: ${action}`, data);
}

export default router;
