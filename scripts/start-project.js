#!/usr/bin/env node
/**
 * TigerRozetka - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 * –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π Node.js —Å–∫—Ä–∏–ø—Ç
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

const isWindows = os.platform() === 'win32';

console.log('üêÖ‚ö° –ó–∞–ø—É—Å–∫ TigerRozetka Project...');
console.log('==================================');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
const requiredFiles = ['.env', 'telegram_bot_aiogram.py'];
for (const file of requiredFiles) {
    if (!fs.existsSync(file)) {
        console.error(`‚ùå –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        process.exit(1);
    }
}

let processes = [];

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function cleanup() {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
    processes.forEach(proc => {
        if (proc && !proc.killed) {
            if (isWindows) {
                try {
                    exec(`taskkill /pid ${proc.pid} /t /f`);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                }
            } else {
                try {
                    proc.kill('SIGTERM');
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                }
            }
        }
    });
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);
process.on('exit', cleanup);

async function checkDependencies() {
    console.log('üì¶ 1/4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try {
        await execPromise('python -c "import aiogram"');
        console.log('‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã');
    } catch {
        console.log('‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
        try {
            await execPromise('pip install aiogram aiohttp python-dotenv');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (!fs.existsSync('backend/node_modules')) {
        console.log('‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
        try {
            await execPromise('npm install', { cwd: 'backend' });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (!fs.existsSync('node_modules')) {
        console.log('‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
        try {
            await execPromise('npm install');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
        }
    }
}

function execPromise(command, options = {}) {
    return new Promise((resolve, reject) => {
        exec(command, options, (error, stdout, stderr) => {
            if (error) {
                reject(new Error(`${error.message}\nstdout: ${stdout}\nstderr: ${stderr}`));
            } else {
                resolve(stdout);
            }
        });
    });
}

function spawnProcess(command, args, options = {}) {
    const proc = spawn(command, args, {
        stdio: ['ignore', 'pipe', 'pipe'],
        shell: isWindows,
        detached: !isWindows,
        ...options
    });
    
    proc.stdout.on('data', (data) => {
        const output = data.toString().trim();
        if (output) {
            console.log(`[${options.name || 'Process'}] ${output}`);
        }
    });
    
    proc.stderr.on('data', (data) => {
        const output = data.toString().trim();
        if (output && !output.includes('DeprecationWarning')) {
            console.error(`[${options.name || 'Process'}] ${output}`);
        }
    });
    
    proc.on('exit', (code, signal) => {
        if (code !== 0 && code !== null) {
            console.error(`‚ùå ${options.name || 'Process'} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
        }
    });
    
    proc.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${options.name || 'Process'}:`, error.message);
    });
    
    processes.push(proc);
    return proc;
}

async function startServices() {
    try {
        await checkDependencies();
        
        console.log('ü§ñ 2/4 –ó–∞–ø—É—Å–∫ Telegram Bot (aiogram)...');
        spawnProcess('python', ['telegram_bot_aiogram.py'], { name: 'TelegramBot' });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('üîß 3/4 –ó–∞–ø—É—Å–∫ Backend API (Express)...');
        spawnProcess(isWindows ? 'npm.cmd' : 'npm', ['run', 'dev'], { 
            name: 'Backend', 
            cwd: path.resolve('backend') 
        });
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        console.log('üéÆ 4/4 –ó–∞–ø—É—Å–∫ Frontend Dev Server (Vite)...');
        spawnProcess(isWindows ? 'npm.cmd' : 'npm', ['run', 'dev'], { name: 'Frontend' });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        console.log('\nüéâ TigerRozetka –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log('==================================');
        console.log('ü§ñ Telegram Bot: @tigerrosette_bot');
        console.log('üîß Backend API:  http://localhost:3001');
        console.log('üéÆ Frontend:     http://localhost:5173');
        console.log('üì± Game URL:     https://orspiritus.github.io/tigerrosette/');
        console.log('');
        console.log('üí° –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: /start, /duel, /stats, /play');
        console.log('‚ö° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
        console.log('');
        
        // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
        setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            const activeProcesses = processes.filter(p => !p.killed && p.pid);
            if (activeProcesses.length === 0) {
                console.log('‚ö†Ô∏è  –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å');
                cleanup();
            }
        }, 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error.message);
        cleanup();
    }
}

if (require.main === module) {
    startServices();
}
