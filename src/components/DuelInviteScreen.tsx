import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useGameStore } from '../store/gameStore';
import { useTelegram } from './TelegramProvider';
import { hapticManager } from '../utils/hapticManager';

interface TelegramContact {
  id: number;
  firstName: string;
  lastName?: string;
  username?: string;
  photoUrl?: string;
}

interface DuelInvite {
  id: string;
  fromUserId: number;
  toUserId: number;
  status: 'pending' | 'accepted' | 'declined' | 'expired';
  createdAt: number;
  expiresAt: number;
}

export const DuelInviteScreen: React.FC = () => {
  const { player, endGame } = useGameStore();
  const { webApp, user, isInTelegram } = useTelegram();
  const [contacts, setContacts] = useState<TelegramContact[]>([]);
  const [pendingInvites, setPendingInvites] = useState<DuelInvite[]>([]);
  const [selectedContact, setSelectedContact] = useState<TelegramContact | null>(null);
  const [inviteStatus, setInviteStatus] = useState<'idle' | 'sending' | 'sent' | 'waiting'>('idle');

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ Telegram
  useEffect(() => {
    if (isInTelegram && webApp) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      loadTelegramContacts();
    } else {
      // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram - –º–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      setContacts([
        { id: 12345, firstName: '–ê–Ω–Ω–∞', lastName: '–ò–≤–∞–Ω–æ–≤–∞', username: 'anna_i' },
        { id: 54321, firstName: '–ú–∏—Ö–∞–∏–ª', lastName: '–ü–µ—Ç—Ä–æ–≤', username: 'mike_p' },
        { id: 98765, firstName: '–ï–ª–µ–Ω–∞', username: 'lena_gamer' },
        { id: 11111, firstName: '–î–º–∏—Ç—Ä–∏–π', lastName: '–ö–æ–∑–ª–æ–≤' },
      ]);
    }
  }, [isInTelegram, webApp]);

  const loadTelegramContacts = async () => {
    try {
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
      // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API
      setContacts([
        { id: 12345, firstName: '–ê–Ω–Ω–∞', lastName: '–ò–≤–∞–Ω–æ–≤–∞', username: 'anna_i' },
        { id: 54321, firstName: '–ú–∏—Ö–∞–∏–ª', lastName: '–ü–µ—Ç—Ä–æ–≤', username: 'mike_p' },
        { id: 98765, firstName: '–ï–ª–µ–Ω–∞', username: 'lena_gamer' },
        { id: 11111, firstName: '–î–º–∏—Ç—Ä–∏–π', lastName: '–ö–æ–∑–ª–æ–≤' },
        { id: 22222, firstName: '–û–ª—å–≥–∞', lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', username: 'olga_s' },
      ]);
      console.log('–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    }
  };

  const sendDuelInvite = async (contact: TelegramContact) => {
    if (!isInTelegram || !webApp || !user) {
      alert('–î—É—ç–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Telegram!');
      return;
    }

    setInviteStatus('sending');
    hapticManager.medium();

    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      const inviteId = `duel_${Date.now()}_${user.id}_${contact.id}`;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
      const inviteMessage = `üéÆ‚öîÔ∏è –î–£–≠–õ–¨ TIGERROZETKA!\n\n` +
        `${user.first_name} (–£—Ä–æ–≤–µ–Ω—å ${player.level}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!\n\n` +
        `‚ö° –ò–≥—Ä–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥\n` +
        `üèÜ –ö—Ç–æ –Ω–∞–±–µ—Ä–µ—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ - —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª!\n\n` +
        `–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
      if (webApp.sendData) {
        const inviteData = {
          type: 'duel_invite',
          inviteId,
          fromUser: {
            id: user.id,
            name: user.first_name,
            level: player.level
          },
          toUserId: contact.id,
          message: inviteMessage
        };

        webApp.sendData(JSON.stringify(inviteData));
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (webApp.showConfirm) {
        webApp.showConfirm(
          `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${contact.firstName}?\n\n` +
          `–ò–≥—Ä–∞: 60 —Å–µ–∫—É–Ω–¥\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${player.level}`,
          (confirmed: boolean) => {
            if (!confirmed) {
              setInviteStatus('idle');
              return;
            }
          }
        );
      }

      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      const invite: DuelInvite = {
        id: inviteId,
        fromUserId: user.id,
        toUserId: contact.id,
        status: 'pending',
        createdAt: Date.now(),
        expiresAt: Date.now() + (5 * 60 * 1000) // 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç
      };

      setPendingInvites(prev => [...prev, invite]);
      setInviteStatus('sent');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (webApp.showAlert) {
        webApp.showAlert(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${contact.firstName}! –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...`);
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
      setTimeout(() => {
        setInviteStatus('waiting');
      }, 2000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:', error);
      setInviteStatus('idle');
      
      if (webApp?.showAlert) {
        webApp.showAlert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const handleContactSelect = (contact: TelegramContact) => {
    setSelectedContact(contact);
    hapticManager.light();
  };

  const handleSendInvite = () => {
    if (selectedContact) {
      sendDuelInvite(selectedContact);
    }
  };

  const handleBackToMenu = () => {
    hapticManager.light();
    endGame();
  };

  const getContactDisplayName = (contact: TelegramContact) => {
    const fullName = contact.lastName 
      ? `${contact.firstName} ${contact.lastName}`
      : contact.firstName;
    
    return contact.username ? `${fullName} (@${contact.username})` : fullName;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background-dark to-background-darker">
      {/* Header */}
      <div className="bg-black/40 border-b border-white/10 p-4">
        <div className="flex justify-between items-center">
          <button
            onClick={handleBackToMenu}
            className="text-gray-400 hover:text-white transition-colors"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <h1 className="text-xl font-bold text-primary-orange">‚öîÔ∏è –ü–†–ò–ì–õ–ê–°–ò–¢–¨ –ù–ê –î–£–≠–õ–¨</h1>
          <div className="text-sm text-gray-400">
            {isInTelegram ? 'üì± Telegram' : 'üåê Web'}
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å */}
      <div className="bg-black/30 p-4 text-center">
        <div className="text-lg text-white mb-2">
          {inviteStatus === 'idle' && 'üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–∏'}
          {inviteStatus === 'sending' && 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...'}
          {inviteStatus === 'sent' && '‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'}
          {inviteStatus === 'waiting' && '‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...'}
        </div>
        {!isInTelegram && (
          <div className="text-sm text-yellow-400">
            ‚ö†Ô∏è –î–ª—è –¥—É—ç–ª–µ–π –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –≤ Telegram
          </div>
        )}
      </div>

      {/* –ö–æ–Ω—Ç–∞–∫—Ç—ã */}
      <div className="p-4">
        <div className="text-white text-lg mb-4 font-bold">
          üìû –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
        </div>
        
        <div className="space-y-3">
          {contacts.map((contact) => (
            <motion.div
              key={contact.id}
              className={`glass-effect p-4 rounded-xl cursor-pointer transition-all ${
                selectedContact?.id === contact.id 
                  ? 'border-2 border-green-400 bg-green-400/10' 
                  : 'border border-white/20 hover:border-orange-400'
              }`}
              onClick={() => handleContactSelect(contact)}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-12 h-12 bg-gradient-to-br from-orange-400 to-red-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                    {contact.firstName.charAt(0)}
                  </div>
                  <div>
                    <div className="text-white font-medium">
                      {getContactDisplayName(contact)}
                    </div>
                    <div className="text-gray-400 text-sm">
                      –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –¥—É—ç–ª—å
                    </div>
                  </div>
                </div>
                
                {selectedContact?.id === contact.id && (
                  <div className="text-green-400 text-2xl">‚úì</div>
                )}
              </div>
            </motion.div>
          ))}
        </div>

        {contacts.length === 0 && (
          <div className="text-center text-gray-400 py-8">
            <div className="text-4xl mb-4">üë•</div>
            <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</div>
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
      {selectedContact && inviteStatus === 'idle' && (
        <div className="fixed bottom-6 left-4 right-4">
          <motion.button
            onClick={handleSendInvite}
            className="w-full bg-gradient-to-r from-orange-500 to-red-500 text-white py-4 rounded-xl font-bold text-lg"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
          >
            ‚öîÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å {selectedContact.firstName}
          </motion.button>
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è */}
      {inviteStatus === 'waiting' && (
        <div className="fixed bottom-6 left-4 right-4">
          <div className="bg-black/60 backdrop-blur-sm rounded-xl p-4 text-center">
            <div className="text-white text-lg mb-2">‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...</div>
            <div className="text-gray-400 text-sm">
              –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ 5 –º–∏–Ω—É—Ç
            </div>
            <div className="mt-3">
              <div className="animate-pulse text-orange-400">‚ö°‚öîÔ∏è‚ö°</div>
            </div>
          </div>
        </div>
      )}

      {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
      {pendingInvites.length > 0 && (
        <div className="p-4 mt-4">
          <div className="text-white text-lg mb-3 font-bold">
            üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:
          </div>
          {pendingInvites.map((invite) => {
            const contact = contacts.find(c => c.id === invite.toUserId);
            const timeLeft = Math.max(0, invite.expiresAt - Date.now());
            const minutesLeft = Math.floor(timeLeft / 60000);
            
            return (
              <div key={invite.id} className="glass-effect p-3 rounded-lg mb-2">
                <div className="text-white">
                  {contact ? getContactDisplayName(contact) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                </div>
                <div className="text-sm text-gray-400">
                  –°—Ç–∞—Ç—É—Å: {invite.status} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {minutesLeft}–º
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};
