import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useGameStore } from '../store/gameStore';
import { soundManager } from '../utils/soundManager';
import { hapticManager } from '../utils/hapticManager';

interface CounterAttackButtonProps {
  className?: string;
  disabled?: boolean;
}

export const CounterAttackButton: React.FC<CounterAttackButtonProps> = ({ 
  className = '', 
  disabled = false 
}) => {
  const { 
    player, 
    singleMode, 
    aiElectrician,
    damageAIElectrician,
    gameState 
  } = useGameStore();
  
  const [isAttacking, setIsAttacking] = useState(false);
  const [cooldown, setCooldown] = useState(0);
  const [showEffect, setShowEffect] = useState(false);

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏
  const minVoltageForAttack = 10; // –°–Ω–∏–∂–µ–Ω–æ —Å 50 –¥–æ 10

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
  const canAttack = gameState.isPlaying && 
                   singleMode.aiElectricianActive && 
                   aiElectrician.isActive &&
                   !disabled && 
                   cooldown === 0 &&
                   player.volts >= minVoltageForAttack;

  const handleCounterAttack = async () => {
    if (!canAttack || isAttacking) return;

    setIsAttacking(true);
    setShowEffect(true);

    // –ó–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—è –∞—Ç–∞–∫–∏
    hapticManager.electricShock();
    soundManager.generateShockSound();
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
    const currentVoltage = player.volts;
    const baseDamage = 10;
    const voltageDamage = Math.floor(currentVoltage / 10); // 1 —É—Ä–æ–Ω –∑–∞ –∫–∞–∂–¥—ã–µ 10 –≤–æ–ª—å—Ç
    const totalDamage = baseDamage + voltageDamage;
    
    console.log('Counter attack!', {
      playerVoltage: currentVoltage,
      baseDamage,
      voltageDamage,
      totalDamage
    });
    
    damageAIElectrician('energy', totalDamage, true);
    
    // –ò–Ω–æ–≥–¥–∞ –ø–æ–≤—Ä–µ–∂–¥–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–π –∞—Ç–∞–∫–µ
    if (currentVoltage >= 200) {
      damageAIElectrician('equipment', Math.random() * 15 + 10, true);
    } else if (currentVoltage >= 100) {
      if (Math.random() < 0.5) {
        damageAIElectrician('equipment', Math.random() * 10 + 5, true);
      }
    }

    // –û–ë–ù–£–õ–Ø–ï–ú –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
    const state = useGameStore.getState();
    useGameStore.setState({
      player: {
        ...state.player,
        volts: 0 // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª—è–µ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ—â–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
    const cooldownTime = Math.max(3, Math.min(15, Math.floor(currentVoltage / 50))); // –û—Ç 3 –¥–æ 15 —Å–µ–∫—É–Ω–¥
    setCooldown(cooldownTime);
    const cooldownInterval = setInterval(() => {
      setCooldown(prev => {
        if (prev <= 1) {
          clearInterval(cooldownInterval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      setShowEffect(false);
      setIsAttacking(false);
    }, 1000);
  };

  return (
    <div className={`relative ${className}`}>
      {/* –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏ */}
      <AnimatePresence>
        {showEffect && (
          <motion.div
            className="absolute inset-0 pointer-events-none z-10"
            initial={{ scale: 0, rotate: 0 }}
            animate={{ 
              scale: [0, 1.5, 1], 
              rotate: [0, 180, 360],
              opacity: [0, 1, 0]
            }}
            exit={{ opacity: 0 }}
            transition={{ duration: 1 }}
          >
            <div className="w-full h-full bg-yellow-400 rounded-full shadow-lg flex items-center justify-center">
              <span className="text-2xl">‚ö°</span>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
      <motion.button
        onClick={handleCounterAttack}
        disabled={!canAttack || isAttacking}
        className={`
          relative w-16 h-16 rounded-full border-2 transition-all duration-200
          ${canAttack 
            ? 'bg-gradient-to-br from-yellow-400 to-orange-500 border-yellow-300 shadow-lg hover:shadow-xl cursor-pointer' 
            : 'bg-gray-600 border-gray-500 cursor-not-allowed opacity-50'
          }
          ${cooldown > 0 ? 'animate-pulse' : ''}
        `}
        whileTap={canAttack ? { scale: 0.9 } : {}}
        whileHover={canAttack ? { scale: 1.1, rotate: 5 } : {}}
        style={{
          boxShadow: canAttack 
            ? `0 0 20px rgba(255, 193, 7, 0.6)` 
            : 'none'
        }}
      >
        {/* –ò–∫–æ–Ω–∫–∞ */}
        <div className="flex items-center justify-center w-full h-full">
          {cooldown > 0 ? (
            <span className="text-white font-bold text-sm">{cooldown}</span>
          ) : (
            <span className="text-2xl">
              {isAttacking ? 'üí•' : player.level >= 5 ? '‚ö°' : 'ü¶∑'}
            </span>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è */}
        {canAttack && (
          <div className="absolute -bottom-2 left-1/2 transform -translate-x-1/2">
            <div className="bg-black/80 text-white text-xs px-1 py-0.5 rounded">
              {player.volts}‚ö° ‚Üí 0‚ö°
            </div>
          </div>
        )}
      </motion.button>

      {/* –¢—É–ª—Ç–∏–ø */}
      {!canAttack && !isAttacking && (
        <div className="absolute -top-12 left-1/2 transform -translate-x-1/2 pointer-events-none">
          <div className="bg-black/80 text-white text-xs px-2 py-1 rounded whitespace-nowrap">
            {player.volts < minVoltageForAttack 
              ? `–ù—É–∂–Ω–æ ${minVoltageForAttack - player.volts} –≤–æ–ª—å—Ç` 
              : !gameState.isPlaying 
              ? '–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞'
              : !singleMode.aiElectricianActive
              ? '–ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
              : '–ö–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }
          </div>
        </div>
      )}
    </div>
  );
};
