import { create } from 'zustand';
import { GameStore, GameState, Player, SingleModeState, Achievement, ScoreData, SoundConfig, ShockImpact, PlayerProtection, ShopItem } from '../types/game';
import { calculateLevel, getExperienceToNextLevel, EXPERIENCE_REWARDS } from '../utils/levelSystem';
import { apiClient } from '../utils/apiClient';

// Default states
const defaultGameState: GameState = {
  mode: 'menu',
  isPlaying: false,
  isPaused: false,
  gameTime: 0,
  score: 0
};

const defaultPlayer: Player = {
  id: 'player1',
  name: '–°–º–µ–ª—å—á–∞–∫',
  volts: 0,
  level: 1,
  experience: 0,
  streak: 0,
  totalClicks: 0,
  successfulClicks: 0,
  shockedClicks: 0,
  luckCoefficient: 50, // –ù–∞—á–∏–Ω–∞–µ–º —Å 50%
  luckIndicatorHidden: false,
  luckHiddenUntil: 0,
  survivalTime: 0,
  protection: {
    gloves: { level: 0, protection: 0, durability: 0, maxDurability: 0 },
    boots: { level: 0, protection: 0, durability: 0, maxDurability: 0 },
    suit: { level: 0, protection: 0, durability: 0, maxDurability: 0 },
    helmet: { level: 0, protection: 0, durability: 0, maxDurability: 0 }
  }
};

const defaultSingleMode: SingleModeState = {
  difficulty: 'easy',
  aiPattern: 'regular',
  currentRisk: 'low',
  streakCount: 0,
  timeInSafeZone: 0,
  lastClickTime: 0,
  dangerLevel: 0,
  warningSignsActive: false,
  stage: 1,
  
  // AI Electrician System
  aiElectricianActive: false,
  nextDischargeTime: 0,
  dischargeWarningTime: 0,
  isDischarging: false,
  dischargeDuration: 5000 // 5 —Å–µ–∫—É–Ω–¥ - —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è
};

const defaultSounds: SoundConfig = {
  volume: 0.7,
  enabled: true,
  backgroundMusicEnabled: true
};

// Default achievements
const defaultAchievements: Achievement[] = [
  {
    id: 'first_click',
    title: '–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ',
    description: '–ù–∞–∂–º–∏ –Ω–∞ —Ä–æ–∑–µ—Ç–∫—É –≤–ø–µ—Ä–≤—ã–µ',
    icon: '‚ö°',
    requirement: 1,
    progress: 0,
    completed: false,
    reward: 50,
    category: 'special'
  },
  {
    id: 'survivor_5',
    title: '–ñ–∏–≤—á–∏–∫',
    description: '–°–µ—Ä–∏—è –∏–∑ 5 —É—Å–ø–µ—à–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π',
    icon: 'üèÉ',
    requirement: 5,
    progress: 0,
    completed: false,
    reward: 100,
    category: 'streak'
  },
  {
    id: 'survivor_25',
    title: '–ù–µ—É–±–∏–≤–∞–µ–º—ã–π',
    description: '–°–µ—Ä–∏—è –∏–∑ 25 —É—Å–ø–µ—à–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π',
    icon: 'üõ°Ô∏è',
    requirement: 25,
    progress: 0,
    completed: false,
    reward: 500,
    category: 'streak'
  },
  {
    id: 'risk_taker',
    title: '–ë–µ–∑—Ä–∞—Å—Å—É–¥–Ω—ã–π',
    description: '50 –Ω–∞–∂–∞—Ç–∏–π –≤ —Ä–µ–∂–∏–º–µ High Risk',
    icon: 'üî•',
    requirement: 50,
    progress: 0,
    completed: false,
    reward: 500,
    category: 'risk'
  },
  {
    id: 'time_survivor',
    title: '–í—ã–∂–∏–≤–∞–ª—å—â–∏–∫',
    description: '–í—ã–∂–∏–≤–∏ 5 –º–∏–Ω—É—Ç –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    icon: '‚è∞',
    requirement: 300,
    progress: 0,
    completed: false,
    reward: 1000,
    category: 'survival'
  }
];

export const useGameStore = create<GameStore>((set, get) => ({
  // Initial state
  gameState: defaultGameState,
  player: defaultPlayer,
  singleMode: defaultSingleMode,
  achievements: defaultAchievements,
  sounds: defaultSounds,
  showElectricSparks: false,
  sparksIntensity: 'medium',
  showScreenShake: false,
  aiElectrician: {
    name: '–ò–≤–∞–Ω –≠–ª–µ–∫—Ç—Ä–∏–∫',
    energy: 100,
    maxEnergy: 100,
    voltage: 0,
    maxVoltage: 500,
    voltageChargeRate: 2, // –≤–æ–ª—å—Ç –≤ —Å–µ–∫—É–Ω–¥—É
    lastAttackTime: 0,
    equipment: {
      battery: 100,
      capacitor: 100,
      wires: 100,
      generator: 100
    },
    mood: 'confident',
    experience: 50,
    isActive: false,
    lastMessage: '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
    messageTime: 0,
    failuresCount: 0,
    successfulDischarges: 0,
    playerAttacksReceived: 0,
    workingEfficiency: 100,
    canWork: true,
    fatigueLevel: 0, // –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    points: 0,
    maxPoints: 0
  },
  levelUpNotification: {
    isVisible: false,
    level: null,
    voltsReward: 0
  },

  // Actions
  startSingleMode: (difficulty) => {
    console.log('startSingleMode: Starting with difficulty:', difficulty);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
    get().fixPlayerLevel();
    
    // –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –æ–ø—ã—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤ (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
    const compensated = get().compensateExperience();
    if (compensated > 0) {
      console.log(`Compensated ${compensated} experience points based on current score`);
    }
    
    set({
      gameState: {
        ...get().gameState,
        mode: 'single',
        isPlaying: true,
        gameTime: 0,
        score: 0
      },
      singleMode: {
        ...defaultSingleMode,
        difficulty
      }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–∫–∏ –ò–ò –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —ç—Ç–∞–ø–∞
    set(state => ({
      aiElectrician: {
        ...state.aiElectrician,
        points: get().getAIMaxPointsForStage((get().singleMode.stage) || 1),
        maxPoints: get().getAIMaxPointsForStage((get().singleMode.stage) || 1)
      }
    }));

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
    setTimeout(() => {
      console.log('startSingleMode: Starting AI Electrician after 3s delay');
      get().startAIElectrician();
    }, 3000); // –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
  },

  startMultiplayerMode: (mode: 'duel' | 'tournament' | 'coop') => {
    let gameMode: 'multiplayer' | 'duel' | 'duel-invite' = 'multiplayer';
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥—É—ç–ª—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    if (mode === 'duel') {
      gameMode = 'duel-invite';
    }
    
    set({
      gameState: {
        ...get().gameState,
        mode: gameMode,
        isPlaying: false,
        gameTime: 0,
        score: 0
      }
    });
    
    console.log(`Starting multiplayer mode: ${mode}`);
  },

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –¥—É—ç–ª–∏
  startRealDuel: () => {
    set({
      gameState: {
        ...get().gameState,
        mode: 'duel',
        isPlaying: true,
        gameTime: 0,
        score: 0
      }
    });
    
    console.log('Starting real duel with another player');
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  goToMenu: () => {
    set({
      gameState: {
        ...defaultGameState,
        mode: 'menu'
      }
    });
  },

  clickOutlet: () => {
    const state = get();
    const now = Date.now();
    const timeSinceLastClick = now - state.singleMode.lastClickTime;
    
    // Calculate risk level based on timing
    let currentRisk: SingleModeState['currentRisk'] = 'low';
    if (timeSinceLastClick < 1000) currentRisk = 'extreme';
    else if (timeSinceLastClick < 2000) currentRisk = 'high';
    else if (timeSinceLastClick < 3000) currentRisk = 'medium';

    // Calculate danger level (affects warning signs)
    const dangerLevel = Math.min(100, 
      (state.singleMode.streakCount * 2) + // –ë–æ–ª—å—à–µ —Å–µ—Ä–∏—è = –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
      (currentRisk === 'extreme' ? 40 : 
       currentRisk === 'high' ? 25 : 
       currentRisk === 'medium' ? 15 : 5) + // –†–∏—Å–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
      (state.player.luckCoefficient < 30 ? 20 : 0) // –ù–∏–∑–∫–∞—è —É–¥–∞—á–∞ = –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
    );

    // Activate warning signs if danger is high
    const warningSignsActive = dangerLevel > 60;

    // Update click stats
    set({
      player: {
        ...state.player,
        totalClicks: state.player.totalClicks + 1
      },
      singleMode: {
        ...state.singleMode,
        lastClickTime: now,
        currentRisk,
        dangerLevel,
        warningSignsActive
      }
    });

    // Update luck coefficient and restore indicator if needed
    get().updateLuckCoefficient();
  },

  updateScore: (scoreData: ScoreData) => {
    const state = get();
    const newScore = state.gameState.score + scoreData.totalPoints;
    const newVolts = state.player.volts + scoreData.totalPoints;
    
    // Update streak if it was a success
    const isSuccess = scoreData.reason !== '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–æ–º' && 
                     scoreData.reason !== '–ö–ª–∏–∫ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä—è–¥–∞!' &&
                     scoreData.totalPoints > 0; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏
    const newStreak = isSuccess ? state.player.streak + 1 : 0;
    const newStreakCount = isSuccess ? state.singleMode.streakCount + 1 : 0;
    
    // Calculate experience based on action
    let experienceGained = 0;
    if (isSuccess) {
      // Base experience for successful click
      experienceGained = EXPERIENCE_REWARDS.SAFE_CLICK;
      
      // Bonus experience for risky clicks
      if (scoreData.riskMultiplier >= 2.0) {
        experienceGained = EXPERIENCE_REWARDS.RISKY_CLICK;
      }
      if (scoreData.riskMultiplier >= 3.0) {
        experienceGained = EXPERIENCE_REWARDS.EXTREME_CLICK;
      }
      
      // Bonus experience for streaks
      if (newStreak === 5) experienceGained += EXPERIENCE_REWARDS.STREAK_5;
      if (newStreak === 10) experienceGained += EXPERIENCE_REWARDS.STREAK_10;
      if (newStreak === 25) experienceGained += EXPERIENCE_REWARDS.STREAK_25;
      if (newStreak === 50) experienceGained += EXPERIENCE_REWARDS.STREAK_50;
      
      // –ë–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ (1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤)
      const scoreBonus = Math.floor(Math.max(0, scoreData.totalPoints) / 10);
      experienceGained += scoreBonus;
    } else {
      // Small experience even for getting shocked
      experienceGained = EXPERIENCE_REWARDS.SHOCK_SURVIVAL;
    }
    
    // Update success/shock statistics and calculate luck coefficient
    const newSuccessfulClicks = isSuccess ? state.player.successfulClicks + 1 : state.player.successfulClicks;
    const newShockedClicks = !isSuccess ? state.player.shockedClicks + 1 : state.player.shockedClicks;
    const totalAttempts = newSuccessfulClicks + newShockedClicks;
    const newLuckCoefficient = totalAttempts > 0 ? Math.round((newSuccessfulClicks / totalAttempts) * 100) : 50;
    
    set({
      gameState: {
        ...state.gameState,
        score: newScore
      },
      player: {
        ...state.player,
        volts: newVolts,
        streak: newStreak,
        successfulClicks: newSuccessfulClicks,
        shockedClicks: newShockedClicks,
        luckCoefficient: newLuckCoefficient
      },
      singleMode: {
        ...state.singleMode,
        streakCount: newStreakCount
      }
    });

    // –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤: —É—Å–ø–µ—Ö –∏–≥—Ä–æ–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç –æ—á–∫–∏ –ò–ò
    if (isSuccess && scoreData.totalPoints > 0) {
      const ai = get().aiElectrician;
      const decrease = Math.max(1, Math.floor(scoreData.totalPoints / 2));
      set({
        aiElectrician: {
          ...ai,
          points: Math.max(0, ai.points - decrease)
        }
      });
      get().onAIPointsChanged();
    }

    // Add experience
    const { addExperience } = get();
    addExperience(experienceGained);

    // Check for achievements
    const { unlockAchievement } = get();
    if (state.player.totalClicks === 0) {
      unlockAchievement('first_click');
    }
    if (newStreak === 5) unlockAchievement('survivor_5');
    if (newStreak === 10) unlockAchievement('survivor_10');
    if (newStreak === 25) unlockAchievement('survivor_25');
  },

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç —É–¥–∞—Ä–∞ —Ç–æ–∫–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ª—å—Ç
  calculateShockImpact: (volts: number): ShockImpact => {
    let damage: number;
    let severity: 'mild' | 'moderate' | 'severe' | 'critical';
    let duration: number;
    let luckHideDuration: number;

    if (volts < 50) {
      damage = Math.floor(volts * 0.1) + 1; // 1-5 –æ—á–∫–æ–≤
      severity = 'mild';
      duration = 1000;
      luckHideDuration = 2000;
    } else if (volts < 150) {
      damage = Math.floor(volts * 0.15) + 5; // 5-27 –æ—á–∫–æ–≤
      severity = 'moderate';
      duration = 1500;
      luckHideDuration = 3000;
    } else if (volts < 300) {
      damage = Math.floor(volts * 0.2) + 10; // 10-70 –æ—á–∫–æ–≤
      severity = 'severe';
      duration = 2000;
      luckHideDuration = 5000;
    } else {
      damage = Math.floor(volts * 0.25) + 20; // 20+ –æ—á–∫–æ–≤
      severity = 'critical';
      duration = 3000;
      luckHideDuration = 8000;
    }

    const voltsDrained = Math.floor(volts * 0.7); // –¢–µ—Ä—è–µ–º 70% –≤–æ–ª—å—Ç

    return {
      damage,
      voltsDrained,
      duration,
      severity,
      luckHideDuration
    };
  },

  triggerShock: () => {
    const state = get();
    if (!state.gameState.isPlaying) return;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ª—å—Ç
    const baseShockImpact = state.calculateShockImpact(state.player.volts);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞—â–∏—Ç—É
    const totalProtection = state.getTotalProtection();
    const protectionMultiplier = (100 - totalProtection) / 100;
    const finalDamage = Math.floor(baseShockImpact.damage * protectionMultiplier);
    
    // –ü–æ–≤—Ä–µ–∂–¥–∞–µ–º –∑–∞—â–∏—Ç–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
    state.damageProtection(baseShockImpact.damage);
    
  set({
      player: {
        ...state.player,
        volts: Math.max(0, state.player.volts - baseShockImpact.voltsDrained),
        shockedClicks: state.player.shockedClicks + 1,
        totalClicks: state.player.totalClicks + 1,
        streak: 0,
        luckIndicatorHidden: true,
        luckHiddenUntil: Date.now() + baseShockImpact.luckHideDuration
      },
      showElectricSparks: true,
      sparksIntensity: baseShockImpact.severity === 'critical' ? 'extreme' : 
                      baseShockImpact.severity === 'severe' ? 'high' :
                      baseShockImpact.severity === 'moderate' ? 'medium' : 'low',
      showScreenShake: true,
      gameState: {
        ...state.gameState,
        score: Math.max(0, state.gameState.score - finalDamage)
      },
      singleMode: {
        ...state.singleMode,
        streakCount: 0
      }
    });

    // –†–∞–∑—Ä—è–¥ –æ—Ç —Ä–æ–∑–µ—Ç–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –∫–ª–∏–∫–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö –ò–ò: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏ –ò–ò
    set(s => ({
      aiElectrician: {
        ...s.aiElectrician,
        points: Math.min(s.aiElectrician.maxPoints, s.aiElectrician.points + Math.max(1, Math.floor(finalDamage / 2)))
      }
    }));
    get().onAIPointsChanged();

    // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      set({
        showElectricSparks: false,
        showScreenShake: false
      });
    }, baseShockImpact.duration);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–∞—á–∏
    get().updateLuckCoefficient();
  },

  endGame: () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
    get().stopAIElectrician();
    
    set({
      gameState: {
        ...get().gameState,
        mode: 'menu',
        isPlaying: false
      }
    });
  },

  unlockAchievement: (achievementId: string) => {
    const state = get();
    const achievement = state.achievements.find(a => a.id === achievementId);
    
    if (achievement && !achievement.completed) {
      set({
        achievements: state.achievements.map(a =>
          a.id === achievementId 
            ? { ...a, completed: true, progress: a.requirement }
            : a
        ),
        player: {
          ...state.player,
          volts: state.player.volts + achievement.reward
        }
      });
    }
  },

  updatePlayerStats: (stats: Partial<Player>) => {
    const state = get();
    set({
      player: {
        ...state.player,
        ...stats
      }
    });
  },

  addExperience: (amount: number) => {
    const state = get();
    const newExperience = state.player.experience + amount;
    const oldLevel = calculateLevel(state.player.experience);
    const newLevel = calculateLevel(newExperience);
    
    console.log('addExperience:', {
      amount,
      oldExperience: state.player.experience,
      newExperience,
      oldLevel: oldLevel.level,
      newLevel: newLevel.level,
      playerLevel: state.player.level
    });
    
    // Check if player leveled up
    if (newLevel.level > oldLevel.level) {
      console.log('LEVEL UP!', {
        from: oldLevel.level,
        to: newLevel.level,
        voltsReward: newLevel.voltsReward
      });
      
      // Player leveled up! Give rewards
      const newVolts = state.player.volts + newLevel.voltsReward;
      
      set({
        player: {
          ...state.player,
          experience: newExperience,
          level: newLevel.level,
          volts: newVolts
        }
      });
      
      // Show level up notification
      const { showLevelUpNotification } = get();
      showLevelUpNotification(newLevel, newLevel.voltsReward);
    } else {
      // Just add experience and ensure level is correct
      set({
        player: {
          ...state.player,
          experience: newExperience,
          level: newLevel.level // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
        }
      });
    }
  },

  getCurrentLevelInfo: () => {
    const state = get();
    return {
      currentLevel: calculateLevel(state.player.experience),
      progressInfo: getExperienceToNextLevel(state.player.experience)
    };
  },

  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—ã—Ç–∞
  fixPlayerLevel: () => {
    const state = get();
    const correctLevel = calculateLevel(state.player.experience);
    
    console.log('fixPlayerLevel:', {
      currentStoredLevel: state.player.level,
      correctLevel: correctLevel.level,
      experience: state.player.experience
    });
    
    if (state.player.level !== correctLevel.level) {
      console.log('Fixing player level from', state.player.level, 'to', correctLevel.level);
      set({
        player: {
          ...state.player,
          level: correctLevel.level
        }
      });
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –æ–ø—ã—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤ (–µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ)
  compensateExperience: () => {
    const state = get();
    const currentScore = state.gameState.score;
    const currentExperience = state.player.experience;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
    const expectedExperience = Math.floor(currentScore / 5); // 1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤
    const missingExperience = Math.max(0, expectedExperience - currentExperience);
    
    console.log('compensateExperience:', {
      currentScore,
      currentExperience,
      expectedExperience,
      missingExperience
    });
    
    if (missingExperience > 0) {
      console.log(`Compensating ${missingExperience} experience points`);
      get().addExperience(missingExperience);
      return missingExperience;
    }
    
    return 0;
  },

  showLevelUpNotification: (level, voltsReward) => {
    set({
      levelUpNotification: {
        isVisible: true,
        level,
        voltsReward
      }
    });
  },

  // –°–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤ –ò–ò –Ω–∞ —ç—Ç–∞–ø–µ
  getAIMaxPointsForStage(stage: number) {
    const diff = get().singleMode.difficulty;
    const base = diff === 'extreme' ? 250 : diff === 'hard' ? 200 : diff === 'medium' ? 150 : 120;
    // –†–∞—Å—Ç–µ—Ç —Å —ç—Ç–∞–ø–æ–º, –Ω–æ —Å –ø–ª–∞–≤–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
    return base + Math.floor((stage - 1) * base * 0.25);
  },

  hideLevelUpNotification: () => {
    set({
      levelUpNotification: {
        isVisible: false,
        level: null,
        voltsReward: 0
      }
    });
  },

  updateLuckCoefficient: () => {
    const state = get();
    const totalAttempts = state.player.totalClicks;
    const successfulClicks = state.player.successfulClicks;
    
    const newLuckCoefficient = totalAttempts > 0 ? 
      Math.round((successfulClicks / totalAttempts) * 100) : 50;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–∞—á–∏
    const shouldRestoreLuckIndicator = state.player.luckIndicatorHidden && 
                                      Date.now() >= state.player.luckHiddenUntil;
    
    set({
      player: {
        ...state.player,
        luckCoefficient: newLuckCoefficient,
        luckIndicatorHidden: shouldRestoreLuckIndicator ? false : state.player.luckIndicatorHidden
      }
    });
  },

  // AI Electrician System
  startAIElectrician: () => {
    const state = get();
    if (!state.gameState.isPlaying) {
      console.log('startAIElectrician: Game not playing, aborting');
      return;
    }

    console.log('startAIElectrician: Starting AI Electrician');
    set({
      singleMode: {
        ...state.singleMode,
        aiElectricianActive: true
      },
      aiElectrician: {
        ...state.aiElectrician,
        isActive: true,
        lastMessage: get().getAIElectricianMessage(),
        messageTime: Date.now()
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
    const aiUpdateInterval = setInterval(() => {
      const currentState = get();
      if (!currentState.singleMode.aiElectricianActive || !currentState.gameState.isPlaying) {
        console.log('startAIElectrician: Clearing AI update interval');
        clearInterval(aiUpdateInterval);
        return;
      }
      
      get().updateAIElectrician();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5-10 —Å–µ–∫—É–Ω–¥
      if (Math.random() < 0.3) {
        set({
          aiElectrician: {
            ...get().aiElectrician,
            lastMessage: get().getAIElectricianMessage(),
            messageTime: Date.now()
          }
        });
      }
    }, 2000);

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑—Ä—è–¥
    console.log('startAIElectrician: Scheduling first discharge');
    get().scheduleNextDischarge();
  },


        // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –ò–ò, –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥—ã —ç—Ç–∞–ø–æ–≤ –∏ –∞—Ç–∞–∫–∏
        onAIPointsChanged: () => {
          const state = get();
          const ai = state.aiElectrician;
          if (!state.gameState.isPlaying) return;

          // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: –æ—á–∫–∏ –ò–ò –∏—Å—á–µ—Ä–ø–∞–Ω—ã
          if (ai.points <= 0) {
            const nextStage = state.singleMode.stage + 1;
            const nextMax = get().getAIMaxPointsForStage(nextStage);
            const voltsReward = 50 + nextStage * 10;
            set({
              player: { ...state.player, volts: state.player.volts + voltsReward },
              singleMode: { ...state.singleMode, stage: nextStage },
              aiElectrician: { ...ai, points: nextMax, maxPoints: nextMax, lastMessage: '–≠—Ç–∞–ø –ø—Ä–æ–π–¥–µ–Ω! –Ø –≤—ã–¥–æ—Ö—Å—è...', messageTime: Date.now() }
            });
            // –®–∞–Ω—Å –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —ç—Ç–∞–ø–∞
            if (Math.random() < 0.5) {
              setTimeout(() => get().dropElectricianItem(), 400);
            }
            return;
          }

          // –ò–ò –Ω–∞–∫–æ–ø–∏–ª –º–∞–∫—Å–∏–º—É–º –æ—á–∫–æ–≤ ‚Äî –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ —Ç–æ–∫–æ–º
          if (ai.points >= ai.maxPoints) {
            // –ú–æ—â–Ω–∞—è –∞—Ç–∞–∫–∞
            get().aiElectricianAttackPlayer();
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–æ 60% –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —ç—Ç–∞–ø
            const reduced = Math.floor(ai.maxPoints * 0.6);
            set({ aiElectrician: { ...ai, points: reduced } });
          }
        },

        // –Ø–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        advanceStage: () => {
          const state = get();
          const nextStage = state.singleMode.stage + 1;
          const nextMax = get().getAIMaxPointsForStage(nextStage);
          set({
            singleMode: { ...state.singleMode, stage: nextStage },
            aiElectrician: { ...state.aiElectrician, points: nextMax, maxPoints: nextMax }
          });
        },
  // –°–∏—Å—Ç–µ–º–∞ –¥—Ä–æ–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
  dropElectricianItem: () => {
    const state = get();
    const fatigueLevel = Math.floor(state.aiElectrician.fatigueLevel);
    
    // –¢–∞–±–ª–∏—Ü–∞ –¥—Ä–æ–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏
    const getDropTable = (fatigue: number) => {
      if (fatigue >= 8) {
        return [
          { type: 'suit', level: 3, chance: 0.2, message: 'ü•Ω –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–Ω—è–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å—Ç—é–º!' },
          { type: 'gloves', level: 3, chance: 0.3, message: 'üß§ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —É—Ä–æ–Ω–∏–ª –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏!' },
          { type: 'boots', level: 2, chance: 0.3, message: 'üë¢ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–∞–ø–æ–≥–∏!' },
          { type: 'helmet', level: 2, chance: 0.2, message: '‚õëÔ∏è –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –∑–∞–±—ã–ª –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Å–∫—É!' }
        ];
      } else if (fatigue >= 5) {
        return [
          { type: 'gloves', level: 2, chance: 0.4, message: 'üß§ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –ø–æ—Ç–µ—Ä—è–ª —É—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏!' },
          { type: 'boots', level: 2, chance: 0.3, message: 'üë¢ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –¥–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–∞–ø–æ–≥–∏!' },
          { type: 'suit', level: 1, chance: 0.2, message: 'ü•Ω –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —Å–Ω—è–ª –∏–∑–æ–ª–∏—Ä—É—é—â–∏–π –∫–æ—Å—Ç—é–º!' },
          { type: 'helmet', level: 1, chance: 0.1, message: '‚õëÔ∏è –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –∑–∞–±—ã–ª –∫–∞—Å–∫—É!' }
        ];
      } else if (fatigue >= 2) {
        return [
          { type: 'gloves', level: 1, chance: 0.5, message: 'üß§ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —É—Ä–æ–Ω–∏–ª —Ä–µ–∑–∏–Ω–æ–≤—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏!' },
          { type: 'boots', level: 1, chance: 0.3, message: 'üë¢ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –æ—Å—Ç–∞–≤–∏–ª —Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏!' },
          { type: 'helmet', level: 1, chance: 0.2, message: '‚õëÔ∏è –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –∑–∞–±—ã–ª –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Å–∫—É!' }
        ];
      } else {
        return [
          { type: 'gloves', level: 1, chance: 0.7, message: 'ÔøΩ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —É—Ä–æ–Ω–∏–ª —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏!' },
          { type: 'boots', level: 1, chance: 0.3, message: 'üë¢ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –ø–æ—Ç–µ—Ä—è–ª —Å–∞–ø–æ–≥!' }
        ];
      }
    };
    
    const dropTable = getDropTable(fatigueLevel);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
    const random = Math.random();
    let cumulativeChance = 0;
    let selectedItem = null;
    
    for (const item of dropTable) {
      cumulativeChance += item.chance;
      if (random <= cumulativeChance) {
        selectedItem = item;
        break;
      }
    }
    
    if (!selectedItem) return;
    
    const { type, level, message } = selectedItem;
    const typedType = type as keyof PlayerProtection;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É –∏–≥—Ä–æ–∫–∞ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —Ç–∞–∫–æ–≥–æ –∂–µ –∏–ª–∏ –ª—É—á—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const currentItem = state.player.protection[typedType];
    if (currentItem.level >= level) {
      console.log('Player already has better protection item:', type, level);
      // –î–∞–µ–º –≤–æ–ª—å—Ç—ã –≤–º–µ—Å—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–∞
      const voltBonus = level * 25;
      set({
        player: {
          ...state.player,
          volts: state.player.volts + voltBonus
        },
        aiElectrician: {
          ...state.aiElectrician,
          lastMessage: `üí∞ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ –¥–∞–ª ${voltBonus} –≤–æ–ª—å—Ç –≤–º–µ—Å—Ç–æ –Ω–µ–Ω—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!`,
          messageTime: Date.now()
        }
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
    const shopItems = state.getShopItems();
    const itemStats = shopItems.find(item => item.type === typedType && item.level === level);
    
    if (!itemStats) {
      console.error('Item stats not found for:', type, level);
      return;
    }
    
    // –î–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫—É
    set({
      player: {
        ...state.player,
        protection: {
          ...state.player.protection,
          [typedType]: {
            level: itemStats.level,
            protection: itemStats.protection,
            durability: itemStats.durability,
            maxDurability: itemStats.durability
          }
        }
      },
      aiElectrician: {
        ...state.aiElectrician,
        lastMessage: message,
        messageTime: Date.now()
      }
    });
    
    console.log(`Dropped item: ${itemStats.name} (${itemStats.protection}% protection) at fatigue level ${fatigueLevel}`);
    
    // –î–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π –æ–ø—ã—Ç –∑–∞ –Ω–∞—Ö–æ–¥–∫—É (–±–æ–ª—å—à–µ –∑–∞ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
    const expBonus = 25 * level;
    get().addExperience(expBonus);
  },

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω
  restartAIElectrician: () => {
    const state = get();
    if (!state.gameState.isPlaying) {
      console.log('restartAIElectrician: Game not playing');
      return;
    }
    
    if (state.aiElectrician.isActive) {
      console.log('restartAIElectrician: AI already active');
      return;
    }
    
    console.log('restartAIElectrician: Restarting AI Electrician');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏ —á–∞—Å—Ç–∏—á–Ω–æ —á–∏–Ω–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    set({
      aiElectrician: {
        ...state.aiElectrician,
        energy: Math.max(50, state.aiElectrician.energy), // –ú–∏–Ω–∏–º—É–º 50 —ç–Ω–µ—Ä–≥–∏–∏
        equipment: {
          battery: Math.max(50, state.aiElectrician.equipment.battery),
          capacitor: Math.max(50, state.aiElectrician.equipment.capacitor), 
          wires: Math.max(50, state.aiElectrician.equipment.wires),
          generator: Math.max(50, state.aiElectrician.equipment.generator)
        },
        lastMessage: '–û—Ç–¥–æ—Ö–Ω—É–ª, —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
        messageTime: Date.now()
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò
    get().startAIElectrician();
  },

  stopAIElectrician: () => {
    set(state => ({
      singleMode: {
        ...state.singleMode,
        aiElectricianActive: false,
        nextDischargeTime: 0,
        dischargeWarningTime: 0,
        isDischarging: false
      },
      aiElectrician: {
        ...state.aiElectrician,
        isActive: false,
        lastMessage: '–°–º–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –∏–¥—É –¥–æ–º–æ–π!',
        messageTime: Date.now()
      }
    }));
  },

  scheduleNextDischarge: () => {
    const state = get();
    console.log('scheduleNextDischarge: Starting, AI active:', state.singleMode.aiElectricianActive);
    if (!state.singleMode.aiElectricianActive) return;

    const now = Date.now();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ AI –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    const getDischargeInterval = () => {
      const baseInterval = {
        easy: { min: 3000, max: 8000 },     // 3-8 —Å–µ–∫—É–Ω–¥ - —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–æ—Ç—ã
        medium: { min: 2500, max: 6000 },   // 2.5-6 —Å–µ–∫—É–Ω–¥  
        hard: { min: 2000, max: 4000 },     // 2-4 —Å–µ–∫—É–Ω–¥—ã
        extreme: { min: 1500, max: 3000 }   // 1.5-3 —Å–µ–∫—É–Ω–¥—ã
      }[state.singleMode.difficulty];

      // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –ø–∞—Ç—Ç–µ—Ä–Ω–∞
      let modifier = 1.0;
      if (state.singleMode.aiPattern === 'burst') modifier = 0.7;      // –ß–∞—â–µ
      else if (state.singleMode.aiPattern === 'random') modifier = Math.random() * 0.8 + 0.6; // 0.6-1.4
      else if (state.singleMode.aiPattern === 'adaptive') {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —É—Å–ø–µ—Ö–∞–º –∏–≥—Ä–æ–∫–∞
        const luckCoeff = state.player.luckCoefficient;
        modifier = luckCoeff > 70 ? 0.8 : luckCoeff < 30 ? 1.3 : 1.0;
      }

      const min = baseInterval.min * modifier;
      const max = baseInterval.max * modifier;
      return Math.random() * (max - min) + min;
    };

    const interval = getDischargeInterval();
    const nextDischargeTime = now + interval;
    const dischargeWarningTime = nextDischargeTime - 3000; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã

    console.log('scheduleNextDischarge: Scheduled discharge', {
      interval: interval / 1000 + 's',
      nextDischargeTime,
      dischargeWarningTime,
      timeFromNow: (nextDischargeTime - now) / 1000 + 's'
    });

    set({
      singleMode: {
        ...state.singleMode,
        nextDischargeTime,
        dischargeWarningTime
      }
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    setTimeout(() => {
      console.log('scheduleNextDischarge: Timer triggered, checking discharge');
      get().checkForDischarge();
    }, interval);
  },

  checkForDischarge: () => {
    const state = get();
    if (!state.singleMode.aiElectricianActive || !state.gameState.isPlaying) {
      console.log('checkForDischarge: AI inactive or game not playing', { 
        aiActive: state.singleMode.aiElectricianActive, 
        isPlaying: state.gameState.isPlaying 
      });
      return;
    }

    const now = Date.now();
    console.log('checkForDischarge: Checking discharge timing', {
      now,
      nextDischargeTime: state.singleMode.nextDischargeTime,
      timeUntilDischarge: state.singleMode.nextDischargeTime - now,
      isDischarging: state.singleMode.isDischarging,
      warningSignsActive: state.singleMode.warningSignsActive,
      dischargeWarningTime: state.singleMode.dischargeWarningTime
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (!state.singleMode.warningSignsActive && now >= state.singleMode.dischargeWarningTime) {
      console.log('checkForDischarge: Activating warning signs');
      set({
        singleMode: {
          ...state.singleMode,
          warningSignsActive: true,
          dangerLevel: 85 // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä—è–¥
    if (now >= state.singleMode.nextDischargeTime && !state.singleMode.isDischarging) {
      console.log('checkForDischarge: STARTING DISCHARGE!');
      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑—Ä—è–¥
      set({
        singleMode: {
          ...state.singleMode,
          isDischarging: true
        },
        showElectricSparks: true,
        sparksIntensity: 'high'
      });

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
      set({
        aiElectrician: {
          ...state.aiElectrician,
          successfulDischarges: state.aiElectrician.successfulDischarges + 1,
          lastMessage: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑—Ä—è–¥! –í—Å–µ –ø–æ –ø–ª–∞–Ω—É!',
          messageTime: now
        }
      });

      // –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –æ—Ç —Ä–∞–∑—Ä—è–¥–∞
      if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å —É—Ä–æ–Ω–∞
        get().damageAIElectrician('equipment', Math.random() * 5 + 2);
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑—Ä—è–¥ —á–µ—Ä–µ–∑ dischargeDuration
      setTimeout(() => {
        console.log('checkForDischarge: ENDING DISCHARGE after', state.singleMode.dischargeDuration, 'ms');
        const currentState = get();
        set({
          singleMode: {
            ...currentState.singleMode,
            isDischarging: false,
            warningSignsActive: false,
            dangerLevel: 0
          },
          showElectricSparks: false
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
        get().updateAIElectrician();

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑—Ä—è–¥ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò
        if (get().aiElectrician.canWork) {
          console.log('checkForDischarge: Scheduling next discharge after ending current one');
          get().scheduleNextDischarge();
        } else {
          // –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —É—Å—Ç–∞–ª –∏–ª–∏ —Å–ª–æ–º–∞–ª—Å—è, –Ω–æ –ù–ï –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
          console.log('checkForDischarge: AI electrician is tired/broken, scheduling with delay');
          set({
            aiElectrician: {
              ...get().aiElectrician,
              lastMessage: get().getAIElectricianMessage(),
              messageTime: Date.now()
            }
          });
          
          // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑—Ä—è–¥ —Å –±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (30 —Å–µ–∫—É–Ω–¥)
          setTimeout(() => {
            if (get().singleMode.aiElectricianActive && get().gameState.isPlaying) {
              console.log('checkForDischarge: Tired AI attempting to work again');
              get().scheduleNextDischarge();
            }
          }, 30000);
        }
      }, state.singleMode.dischargeDuration);
    }
  },

  // AI Electrician management methods
  updateAIElectrician: () => {
    const state = get();
    if (!state.aiElectrician.isActive) {
      console.log('updateAIElectrician: AI not active, skipping');
      return;
    }

    const ai = state.aiElectrician;
    const now = Date.now();

    console.log('updateAIElectrician: Current state', {
      energy: ai.energy.toFixed(1),
      voltage: ai.voltage.toFixed(1),
      efficiency: ai.workingEfficiency.toFixed(1),
      mood: ai.mood,
      canWork: ai.canWork
    });

    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const energyDrain = ai.workingEfficiency > 80 ? 0.1 : 0.2;
    let newEnergy = Math.max(0, ai.energy - energyDrain);
    
    // –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∏–∑–∫–∞—è
    let newFatigueLevel = ai.fatigueLevel;
    const wasEnergyLow = ai.energy > 10;
    const isEnergyLow = newEnergy <= 10;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Å—Ç–∞–ª–æ—Å—Ç—å –∫–æ–≥–¥–∞ —ç–Ω–µ—Ä–≥–∏—è –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ 10
    if (isEnergyLow && wasEnergyLow) {
      newFatigueLevel = Math.min(10, ai.fatigueLevel + 0.1);
    }
    
    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–¥—ã—Ö)
    if (isEnergyLow) {
      newEnergy = Math.min(ai.maxEnergy, newEnergy + 0.5); // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      console.log('updateAIElectrician: AI resting, energy recovery:', newEnergy.toFixed(1));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –∏ –¥—Ä–æ–ø –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      if (Math.floor(newFatigueLevel) > Math.floor(ai.fatigueLevel) && Math.random() < 0.5) {
        console.log(`AI fatigue level increased to ${Math.floor(newFatigueLevel)}, dropping item`);
        get().dropElectricianItem();
      }
    } else if (newEnergy > 50) {
      // –°–Ω–∏–∂–∞–µ–º —É—Å—Ç–∞–ª–æ—Å—Ç—å –∫–æ–≥–¥–∞ —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
      newFatigueLevel = Math.max(0, ai.fatigueLevel - 0.05);
    }

    // –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –∞—Ç–∞–∫
    const voltageGain = ai.voltageChargeRate * (ai.workingEfficiency / 100);
    const newVoltage = Math.min(ai.maxVoltage, ai.voltage + voltageGain);

    // –ò–∑–Ω–æ—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const equipmentWear = Math.random() * 0.05; // 0-5% –∏–∑–Ω–æ—Å–∞
    const newEquipment = {
      battery: Math.max(0, ai.equipment.battery - equipmentWear),
      capacitor: Math.max(0, ai.equipment.capacitor - equipmentWear * 0.5),
      wires: Math.max(0, ai.equipment.wires - equipmentWear * 0.3),
      generator: Math.max(0, ai.equipment.generator - equipmentWear * 0.7)
    };
    
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const avgEquipment = (newEquipment.battery + newEquipment.capacitor + 
                          newEquipment.wires + newEquipment.generator) / 4;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–º–µ–¥–ª–µ–Ω–Ω–æ)
    if (avgEquipment < 30) {
      const selfRepair = 0.1; // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      newEquipment.battery = Math.min(100, newEquipment.battery + selfRepair);
      newEquipment.capacitor = Math.min(100, newEquipment.capacitor + selfRepair);
      newEquipment.wires = Math.min(100, newEquipment.wires + selfRepair);
      newEquipment.generator = Math.min(100, newEquipment.generator + selfRepair);
      console.log('updateAIElectrician: Equipment self-repair activated');
    }

    // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    const newEfficiency = Math.min(100, (newEnergy * 0.7) + (avgEquipment * 0.3));

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    let newMood = ai.mood;
    if (newEfficiency < 20) newMood = 'broken';
    else if (newEfficiency < 40) newMood = 'tired';
    else if (ai.failuresCount > ai.successfulDischarges) newMood = 'frustrated';
    else if (ai.playerAttacksReceived > 3) newMood = 'angry'; // –ó–ª–∏—Ç—Å—è –æ—Ç –∞—Ç–∞–∫ –∏–≥—Ä–æ–∫–∞
    else if (newEfficiency > 80) newMood = 'confident';

    // –ú–æ–∂–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    const canWork = newEnergy > 10 && avgEquipment > 15;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    const shouldAttackPlayer = newVoltage >= 100 && // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
                              (ai.playerAttacksReceived > 2 || // –ú–Ω–æ–≥–æ –∞—Ç–∞–∫ –æ—Ç –∏–≥—Ä–æ–∫–∞
                               newMood === 'angry' || // –ó–ª–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                               Math.random() < 0.05); // 5% —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

    if (shouldAttackPlayer && now - ai.lastAttackTime > 30000) { // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
      setTimeout(() => {
        get().aiElectricianAttackPlayer();
      }, Math.random() * 5000); // –ê—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 0-5 —Å–µ–∫—É–Ω–¥
    }

    set({
      aiElectrician: {
        ...ai,
        energy: newEnergy,
        voltage: newVoltage,
        equipment: newEquipment,
        workingEfficiency: newEfficiency,
        mood: newMood,
        canWork,
        fatigueLevel: newFatigueLevel
      }
    });
  },

  damageAIElectrician: (damageType: 'energy' | 'equipment', amount = 10, isPlayerAttack = false) => {
    const state = get();
    const ai = state.aiElectrician;

    if (damageType === 'energy') {
      const newEnergy = Math.max(0, ai.energy - amount);
      
      let message: string;
      if (isPlayerAttack) {
        // –°–º–µ—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        const playerAttackMessages = [
          '–û–π! –î–∞ —Ç—ã —á—Ç–æ, –æ–±–∞–ª–¥–µ–ª?! üò±',
          '–≠–π, —ç—Ç–æ –±–æ–ª—å–Ω–æ! –ú—ã –∂–µ –∫–æ–º–∞–Ω–¥–∞! üò≠',
          '–ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ! –ê —è –¥—É–º–∞–ª –º—ã –¥—Ä—É–∑—å—è... üíî',
          '–ê—É—É—É—É! –ó–∞ —á—Ç–æ –º–µ–Ω—è?! üòµ',
          '–ù—É –∏ –∑–∞—á–µ–º —Ç—ã –º–µ–Ω—è —à–∞—Ä–∞—Ö–Ω—É–ª?! ‚ö°',
          '–ë–æ–ª—å–Ω–æ –∂–µ! –Ø –≤–µ–¥—å —Å—Ç–∞—Ä–∞—é—Å—å –¥–ª—è —Ç–µ–±—è! üò¢',
          '–ú–∞–º–∞ –¥–æ—Ä–æ–≥–∞—è! –ú–µ–Ω—è —É–¥–∞—Ä–∏–ª–æ —Ç–æ–∫–æ–º! ü§ï',
          '–≠—Ç–æ —á—Ç–æ, –º–µ—Å—Ç—å –∑–∞ —Ä–∞–∑—Ä—è–¥—ã?! üò§',
          '–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ, —è –ø–æ–Ω—è–ª –Ω–∞–º–µ–∫... üòÖ',
          '–ê–π-–∞–π-–∞–π! –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –≤—Å—ë –±–æ–ª–∏—Ç! ü§í',
          '–û–±–∏–¥–Ω–æ! –Ø –∂–µ —á–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é! üò≠',
          '–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ?! –Ø –∂–µ —ç–ª–µ–∫—Ç—Ä–∏–∫, –∞ –Ω–µ –º–∏—à–µ–Ω—å! üéØ',
          '–ë–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–π, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å? ü•∫',
          '–ö—Ç–æ –Ω–∞—É—á–∏–ª —Ç–µ–±—è —Ç–∞–∫ –¥—Ä–∞—Ç—å—Å—è?! üò∞',
          '–ù—É –≤–æ—Ç, —Ç–µ–ø–µ—Ä—å —É –º–µ–Ω—è –º–∏–≥—Ä–µ–Ω—å... ü§ï',
          '–¢–∞–∫, —Ç–µ–ø–µ—Ä—å —è —Ä–∞–∑–æ–∑–ª–∏–ª—Å—è! –ì–æ—Ç–æ–≤—å—Å—è –∫ –æ—Ç–≤–µ—Ç–∫–µ! üò†',
          '–ë–æ–ª—å–Ω–æ! –ù–æ –Ω–∏—á–µ–≥–æ, —è —Ç–µ–±–µ —ç—Ç–æ –ø—Ä–∏–ø–æ–º–Ω—é... üòà'
        ];
        message = playerAttackMessages[Math.floor(Math.random() * playerAttackMessages.length)];
      } else {
        message = newEnergy <= 0 ? '–≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å! –ù—É–∂–µ–Ω –æ—Ç–¥—ã—Ö...' : '–ê—É—á! –ú–µ–Ω—è —É–¥–∞—Ä–∏–ª–æ —Ç–æ–∫–æ–º!';
      }
      
      set({
        aiElectrician: {
          ...ai,
          energy: newEnergy,
          failuresCount: ai.failuresCount + 1,
          playerAttacksReceived: isPlayerAttack ? ai.playerAttacksReceived + 1 : ai.playerAttacksReceived,
          lastMessage: message,
          messageTime: Date.now()
        }
      });
    } else {
      // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const equipmentTypes = ['battery', 'capacitor', 'wires', 'generator'] as const;
      const randomEquipment = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];
      
      const newEquipment = {
        ...ai.equipment,
        [randomEquipment]: Math.max(0, ai.equipment[randomEquipment] - amount)
      };

      let message: string;
      if (isPlayerAttack) {
        // –°–º–µ—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–æ–º–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ—Ç –∏–≥—Ä–æ–∫–∞
        const equipmentDamageMessages = [
          `–¢—ã —Å–ª–æ–º–∞–ª –º–æ–π ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä' : 
                          randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä' :
                          randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–∞' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'}! –¢–µ–ø–µ—Ä—å —á—Ç–æ –¥–µ–ª–∞—Ç—å?! üò±`,
          `–ü–æ–ª–æ–º–∫–∞! –ú–æ–π ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä' : 
                          randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä' :
                          randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–∞' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'} –¥—ã–º–∏—Ç—Å—è! üí®`,
          `–û –Ω–µ—Ç! –ë–µ–∑ ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞' : 
                        randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä–∞' :
                        randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–æ–≤' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞'} —è –Ω–µ —Å–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å! üò≠`,
          `–¢—ã –∂–µ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä' : 
                                  randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä' :
                                  randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–∞' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'} —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥?! üí∏`,
          '–í–æ—Ç —ç—Ç–æ —Ç—ã –º–µ–Ω—è –¥–æ—Å—Ç–∞–ª! –¢–µ–ø–µ—Ä—å —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è... üîß'
        ];
        message = equipmentDamageMessages[Math.floor(Math.random() * equipmentDamageMessages.length)];
      } else {
        message = `–°–ª–æ–º–∞–ª—Å—è ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä' : 
                               randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä' :
                               randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–∞' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'}!`;
      }

      set({
        aiElectrician: {
          ...ai,
          equipment: newEquipment,
          failuresCount: ai.failuresCount + 1,
          lastMessage: message,
          messageTime: Date.now()
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    get().updateAIElectrician();
  },

  repairAIElectrician: (repairType: 'energy' | 'equipment') => {
    const state = get();
    const ai = state.aiElectrician;

    if (repairType === 'energy') {
      const newEnergy = Math.min(ai.maxEnergy, ai.energy + 25);
      const repairMessages = [
        '–°–ø–∞—Å–∏–±–æ! –ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —Å–∏–ª!',
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª—å—à–µ!',
        '–≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
        '–í–∞—É! –ö–∞–∫ –±—É–¥—Ç–æ –∑–∞–Ω–æ–≤–æ —Ä–æ–¥–∏–ª—Å—è!'
      ];
      set({
        aiElectrician: {
          ...ai,
          energy: newEnergy,
          lastMessage: repairMessages[Math.floor(Math.random() * repairMessages.length)],
          messageTime: Date.now()
        }
      });
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ 20%
      const newEquipment = {
        battery: Math.min(100, ai.equipment.battery + 20),
        capacitor: Math.min(100, ai.equipment.capacitor + 20),
        wires: Math.min(100, ai.equipment.wires + 20),
        generator: Math.min(100, ai.equipment.generator + 20)
      };

      const repairMessages = [
        '–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ!',
        '–¢–µ—Ö–Ω–∏–∫–∞ –∫–∞–∫ –Ω–æ–≤–∞—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
        '–í—Å–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!',
        '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!'
      ];

      set({
        aiElectrician: {
          ...ai,
          equipment: newEquipment,
          lastMessage: repairMessages[Math.floor(Math.random() * repairMessages.length)],
          messageTime: Date.now()
        }
      });
    }

    get().updateAIElectrician();
  },

  aiElectricianAttackPlayer: () => {
    const state = get();
    const ai = state.aiElectrician;
    
    if (!ai.isActive || ai.voltage < 100) return;

    console.log('AI Electrician attacking player!', {
      aiVoltage: ai.voltage,
      playerVolts: state.player.volts
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –æ—Ç –∞—Ç–∞–∫–∏ –ò–ò
    const baseDamage = 20;
    const voltageDamage = Math.floor(ai.voltage / 20); // 1 —É—Ä–æ–Ω –∑–∞ –∫–∞–∂–¥—ã–µ 20 –≤–æ–ª—å—Ç
    const totalDamage = baseDamage + voltageDamage;
    
    // –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
    const attackMessages = [
      `–ü–æ–ª—É—á–∞–π! ${ai.voltage} –≤–æ–ª—å—Ç –ø—Ä—è–º–æ –≤ —Ç–µ–±—è! ‚ö°üòà`,
      `–ê –≤–æ—Ç –∏ –æ—Ç–≤–µ—Ç–∫–∞ –∑–∞ —Ç–≤–æ–∏ –≤—ã—Ö–æ–¥–∫–∏! ${ai.voltage}–í! üíÄ`,
      `–î—É–º–∞–ª —è –Ω–µ –æ—Ç–≤–µ—á—É? –í–æ—Ç —Ç–µ–±–µ ${ai.voltage} –≤–æ–ª—å—Ç! ‚ö°üò§`,
      `–ú–µ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–∏–∫–∞! ${ai.voltage} –≤–æ–ª—å—Ç –≤–æ–∑–º–µ–∑–¥–∏—è! ‚ö°üëø`,
      `–ü–æ–ª—É—á–∏ —Ä–∞–∑—Ä—è–¥ –≤ ${ai.voltage}–í! –≠—Ç–æ —Ç–µ–±–µ —É—Ä–æ–∫! üò†‚ö°`,
      `–í–æ—Ç —á—Ç–æ –±—ã–≤–∞–µ—Ç —Å —Ç–µ–º–∏, –∫—Ç–æ –Ω–∞–ø–∞–¥–∞–µ—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞! ${ai.voltage}–í! üí•`,
      `–û—Ç–≤–µ—Ç–Ω—ã–π —É–¥–∞—Ä! ${ai.voltage} –≤–æ–ª—å—Ç –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å! ‚ö°üéØ`,
      `–•–≤–∞—Ç–∏—Ç –º–µ–Ω—è —Ç—Ä–æ–≥–∞—Ç—å! –î–µ—Ä–∂–∏ ${ai.voltage} –≤–æ–ª—å—Ç! üò°‚ö°`,
    ];

    // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–∑—Ä—è–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã TigerOutlet
    set({
      singleMode: {
        ...state.singleMode,
        isDischarging: true,
        warningSignsActive: true,
        dangerLevel: 100
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò
    set({
      aiElectrician: {
        ...ai,
        voltage: 0, // –û–±–Ω—É–ª—è–µ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
        lastAttackTime: Date.now(),
        lastMessage: attackMessages[Math.floor(Math.random() * attackMessages.length)],
        messageTime: Date.now(),
        playerAttacksReceived: Math.max(0, ai.playerAttacksReceived - 1) // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞—Ç–∞–∫
      }
    });

    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É (–æ—Ç–Ω–∏–º–∞–µ–º –≤–æ–ª—å—Ç—ã)
    const newPlayerVolts = Math.max(0, state.player.volts - totalDamage);
    
    set({
      player: {
        ...state.player,
        volts: newPlayerVolts
      }
    });

    // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞—Ç–∞–∫–∏
    set({
      showElectricSparks: true,
      sparksIntensity: 'extreme'
    });

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑—Ä—è–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      set({
        showElectricSparks: false,
        singleMode: {
          ...get().singleMode,
          isDischarging: false,
          warningSignsActive: false,
          dangerLevel: 0
        }
      });
      
      // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –ò–ò
      if (get().singleMode.aiElectricianActive && get().gameState.isPlaying) {
        console.log('AI attack complete, restarting discharge scheduling');
        get().scheduleNextDischarge();
      }
    }, 3000);
  },

  getAIElectricianMessage: () => {
    const state = get();
    const ai = state.aiElectrician;

    const messages = {
      confident: [
        '–Ø –ª—É—á—à–∏–π —ç–ª–µ–∫—Ç—Ä–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ!',
        '–≠—Ç–∞ —Ä–∞–±–æ—Ç–∞ –º–Ω–µ –ø–æ –ø–ª–µ—á—É!',
        '–ù–∏–∫—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è –ª—É—á—à–µ –º–µ–Ω—è!',
        '–£ –º–µ–Ω—è –∑–æ–ª–æ—Ç—ã–µ —Ä—É–∫–∏!',
        '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ - –º–æ—è —Å—Ç–∏—Ö–∏—è!',
        '–Ø –∑–Ω–∞—é –≤—Å–µ –æ —Ç–æ–∫–µ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏!',
        '–†–æ–∑–µ—Ç–∫–∏ —Ç—Ä–µ–ø–µ—â—É—Ç –æ—Ç –º–æ–µ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!'
      ],
      frustrated: [
        '–ß—Ç–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å...',
        '–¢–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥–≤–æ–¥–∏—Ç, –∫–∞–∫ –≤—Å–µ–≥–¥–∞...',
        '–ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?',
        '–û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
        '–ü–æ—á–µ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ?',
        '–ö—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç—É —Å—Ö–µ–º—É?!',
        '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–¥–Ω–∏ –ø—Ä–æ–±–ª–µ–º—ã...'
      ],
      tired: [
        '–£—Å—Ç–∞–ª —è —É–∂–µ...',
        '–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ',
        '–°–∏–ª –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å',
        '–•–æ—á–µ—Ç—Å—è –¥–æ–º–æ–π...',
        '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π',
        '–ì–ª–∞–∑–∞ —É–∂–µ —Å–ª–∏–ø–∞—é—Ç—Å—è',
        '–ú–æ–∂–µ—Ç, —Ö–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?'
      ],
      broken: [
        '–í—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—å! –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        '–≠—Ç–æ –∫–æ–Ω–µ—Ü! –Ø –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É!',
        '–í—ã–∑—ã–≤–∞–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞...',
        '–¢–µ—Ö–Ω–∏–∫–∞ –≤ —Ö–ª–∞–º, –∞ —è –±–µ–∑ —Å–∏–ª!',
        '–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ! –í—Å–µ –ø—Ä–æ–ø–∞–ª–æ!',
        '–°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π! –ü–æ–º–æ–≥–∏—Ç–µ!',
        '–Ø —Å–ª–æ–º–∞–ª—Å—è –∫–∞–∫ —Å—Ç–∞—Ä–∞—è –ª–∞–º–ø–æ—á–∫–∞!'
      ],
      angry: [
        '–î–∞ —á—Ç–æ –∂ —Ç–∞–∫–æ–µ?! –û–ø—è—Ç—å —Å–±–æ–π!',
        '–ö—Ç–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç—É —Å—Ö–µ–º—É?!',
        '–†—É–∫–∏ –±—ã –ø–æ–æ—Ç—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º!',
        '–ù–µ—Ä–≤—ã —É–∂–µ –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ!',
        '–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Ç–µ—Ä–ø–µ—Ç—å —ç—Ç—É –µ—Ä—É–Ω–¥—É?!',
        '–ì–¥–µ –º–æ–π –º–æ–ª–æ—Ç–æ–∫?! –°–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª—é!',
        '–ü—Ä–æ—Ç–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞! –ù–µ–Ω–∞–≤–∏–∂—É!',
        '–õ—É—á—à–µ –±—ã –ø–æ—à–µ–ª –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã!'
      ]
    };

    const moodMessages = messages[ai.mood] || messages.confident;
    return moodMessages[Math.floor(Math.random() * moodMessages.length)];
  },

  // API integration methods
  submitGameToServer: async () => {
    const state = get();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!apiClient.isAuthenticated()) {
      console.warn('User not authenticated, skipping server submission');
      return { success: false, error: 'Not authenticated' };
    }

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const gameData = {
        score: state.gameState.score,
        level: getDifficultyLevel(state.singleMode.difficulty),
        timePlayed: Math.floor(state.gameState.gameTime / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      };

      console.log('Submitting game data to server:', gameData);

      const response = await apiClient.submitScore(gameData);

      if (response.error) {
        console.error('Failed to submit score:', response.error);
        return { success: false, error: response.error };
      }

      if (response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverData = response.data;
        
        set({
          player: {
            ...state.player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.newLevel
          }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –±—ã–ª–æ
        if (serverData.leveledUp) {
          const { showLevelUpNotification } = get();
          showLevelUpNotification(
            { level: serverData.newLevel }, 
            serverData.levelUpReward
          );
        }

        console.log('Successfully submitted score and synced with server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error submitting game to server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  },

  syncWithServer: async () => {
    if (!apiClient.isAuthenticated()) {
      return { success: false, error: 'Not authenticated' };
    }

    try {
      const response = await apiClient.getUserStats();

      if (response.error) {
        return { success: false, error: response.error };
      }

      if (response.data) {
        const serverData = response.data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        set({
          player: {
            ...get().player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.level
          }
        });

        console.log('Successfully synced with server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error syncing with server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  },

  loadStatsFromServer: async () => {
    if (!apiClient.isAuthenticated()) {
      return { success: false, error: 'Not authenticated' };
    }

    try {
      const response = await apiClient.getUserStats();

      if (response.error) {
        return { success: false, error: response.error };
      }

      if (response.data) {
        const serverData = response.data;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        set({
          player: {
            ...get().player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.level
          }
        });

        console.log('Successfully loaded stats from server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error loading stats from server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  },

  // Protection shop functions
  buyProtectionItem: (type: keyof PlayerProtection, level: number) => {
    const shopItems = get().getShopItems();
    const item = shopItems.find(item => item.type === type && item.level === level);
    if (!item) return false;

    const currentPlayer = get().player;
    if (currentPlayer.volts < item.price) return false;

    set((state) => ({
      player: {
        ...state.player,
        volts: state.player.volts - item.price,
        protection: {
          ...state.player.protection,
          [type]: {
            level: item.level,
            protection: item.protection,
            durability: item.durability,
            maxDurability: item.durability
          }
        }
      }
    }));

    return true;
  },

  getShopItems: (): ShopItem[] => {
    return [
      // –ü–µ—Ä—á–∞—Ç–∫–∏
      { id: 'gloves-1', type: 'gloves', level: 1, protection: 10, price: 50, durability: 100, name: '–†–µ–∑–∏–Ω–æ–≤—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', description: '–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–≤', icon: 'üß§' },
      { id: 'gloves-2', type: 'gloves', level: 2, protection: 20, price: 150, durability: 200, name: '–£—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏', description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–≤', icon: 'üß§' },
      { id: 'gloves-3', type: 'gloves', level: 3, protection: 35, price: 400, durability: 300, name: '–î–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è', icon: 'üß§' },
      
      // –°–∞–ø–æ–≥–∏
      { id: 'boots-1', type: 'boots', level: 1, protection: 15, price: 80, durability: 150, name: '–†–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏', description: '–ó–∞—â–∏—Ç–∞ –Ω–æ–≥ –æ—Ç –∑–∞–∑–µ–º–ª–µ–Ω–∏—è', icon: 'üë¢' },
      { id: 'boots-2', type: 'boots', level: 2, protection: 25, price: 200, durability: 250, name: '–î–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–∞–ø–æ–≥–∏', description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç –∑–µ–º–ª–∏', icon: 'üë¢' },
      { id: 'boots-3', type: 'boots', level: 3, protection: 40, price: 500, durability: 350, name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∞–ø–æ–≥–∏', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–∑–µ–º–ª–µ–Ω–∏—è', icon: 'üë¢' },
      
      // –ö–æ—Å—Ç—é–º
      { id: 'suit-1', type: 'suit', level: 1, protection: 20, price: 200, durability: 120, name: '–ò–∑–æ–ª–∏—Ä—É—é—â–∏–π –∫–æ—Å—Ç—é–º', description: '–ó–∞—â–∏—Ç–∞ —Ç–µ–ª–∞ –æ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–≤', icon: 'ü•Ω' },
      { id: 'suit-2', type: 'suit', level: 2, protection: 35, price: 500, durability: 200, name: '–ó–∞—â–∏—Ç–Ω—ã–π –∫–æ—Å—Ç—é–º', description: '–£—Å–∏–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≤—Å–µ–≥–æ —Ç–µ–ª–∞', icon: 'ü•Ω' },
      { id: 'suit-3', type: 'suit', level: 3, protection: 50, price: 1000, durability: 300, name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å—Ç—é–º', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏–∫–æ–≤', icon: 'ü•Ω' },
      
      // –®–ª–µ–º
      { id: 'helmet-1', type: 'helmet', level: 1, protection: 10, price: 100, durability: 200, name: '–ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Å–∫–∞', description: '–ó–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã –æ—Ç —É–¥–∞—Ä–æ–≤ —Ç–æ–∫–æ–º', icon: '‚õëÔ∏è' },
      { id: 'helmet-2', type: 'helmet', level: 2, protection: 20, price: 300, durability: 300, name: '–î–∏—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–∞—Å–∫–∞', description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã', icon: '‚õëÔ∏è' },
      { id: 'helmet-3', type: 'helmet', level: 3, protection: 30, price: 600, durability: 400, name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Å–∫–∞', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã', icon: '‚õëÔ∏è' }
    ];
  },

  getTotalProtection: (): number => {
    const protection = get().player.protection;
    let total = 0;
    
    Object.values(protection).forEach(item => {
      if (item.durability > 0) {
        // –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–Ω–æ—Å–µ
        const durabilityRatio = item.durability / item.maxDurability;
        total += item.protection * durabilityRatio;
      }
    });
    
    return Math.min(total, 80); // –ú–∞–∫—Å–∏–º—É–º 80% –∑–∞—â–∏—Ç—ã
  },

  damageProtection: (damage: number) => {
    set((state) => {
      const newProtection = { ...state.player.protection };
      
      // –°–ª—É—á–∞–π–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–∞–µ–º –∑–∞—â–∏—Ç—É –ø—Ä–∏ —É–¥–∞—Ä–µ —Ç–æ–∫–∞
      Object.keys(newProtection).forEach(key => {
        const item = newProtection[key as keyof PlayerProtection];
        if (item.durability > 0 && Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
          item.durability = Math.max(0, item.durability - Math.floor(damage / 4));
        }
      });
      
      return {
        player: {
          ...state.player,
          protection: newProtection
        }
      };
    });
  }
}));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
function getDifficultyLevel(difficulty: SingleModeState['difficulty']): number {
  switch (difficulty) {
    case 'easy': return 1;
    case 'medium': return 2;
    case 'hard': return 3;
    case 'extreme': return 4;
    default: return 1;
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –≤–Ω–µ–¥—Ä—è–µ–º—ã–µ –≤ —Å—Ç–æ—Ä —á–µ—Ä–µ–∑ mutate
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ set –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
// —É–¥–∞–ª–µ–Ω–æ: attachStageAndPointsHandlers IIFE; —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Å—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é
