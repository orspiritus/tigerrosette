import { create } from 'zustand';
import { GameStore, GameState, Player, SingleModeState, Achievement, ScoreData, SoundConfig, ShockImpact } from '../types/game';
import { calculateLevel, getExperienceToNextLevel, EXPERIENCE_REWARDS } from '../utils/levelSystem';
import { apiClient } from '../utils/apiClient';

// Default states
const defaultGameState: GameState = {
  mode: 'menu',
  isPlaying: false,
  isPaused: false,
  gameTime: 0,
  score: 0
};

const defaultPlayer: Player = {
  id: 'player1',
  name: '–°–º–µ–ª—å—á–∞–∫',
  volts: 0,
  level: 1,
  experience: 0,
  streak: 0,
  totalClicks: 0,
  successfulClicks: 0,
  shockedClicks: 0,
  luckCoefficient: 50, // –ù–∞—á–∏–Ω–∞–µ–º —Å 50%
  luckIndicatorHidden: false,
  luckHiddenUntil: 0,
  survivalTime: 0
};

const defaultSingleMode: SingleModeState = {
  difficulty: 'easy',
  aiPattern: 'regular',
  currentRisk: 'low',
  streakCount: 0,
  timeInSafeZone: 0,
  lastClickTime: 0,
  dangerLevel: 0,
  warningSignsActive: false,
  
  // AI Electrician System
  aiElectricianActive: false,
  nextDischargeTime: 0,
  dischargeWarningTime: 0,
  isDischarging: false,
  dischargeDuration: 2000 // 2 —Å–µ–∫—É–Ω–¥—ã
};

const defaultSounds: SoundConfig = {
  volume: 0.7,
  enabled: true,
  backgroundMusicEnabled: true
};

// Default achievements
const defaultAchievements: Achievement[] = [
  {
    id: 'first_click',
    title: '–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ',
    description: '–ù–∞–∂–º–∏ –Ω–∞ —Ä–æ–∑–µ—Ç–∫—É –≤–ø–µ—Ä–≤—ã–µ',
    icon: '‚ö°',
    requirement: 1,
    progress: 0,
    completed: false,
    reward: 50,
    category: 'special'
  },
  {
    id: 'survivor_5',
    title: '–ñ–∏–≤—á–∏–∫',
    description: '–°–µ—Ä–∏—è –∏–∑ 5 —É—Å–ø–µ—à–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π',
    icon: 'üèÉ',
    requirement: 5,
    progress: 0,
    completed: false,
    reward: 100,
    category: 'streak'
  },
  {
    id: 'survivor_25',
    title: '–ù–µ—É–±–∏–≤–∞–µ–º—ã–π',
    description: '–°–µ—Ä–∏—è –∏–∑ 25 —É—Å–ø–µ—à–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π',
    icon: 'üõ°Ô∏è',
    requirement: 25,
    progress: 0,
    completed: false,
    reward: 500,
    category: 'streak'
  },
  {
    id: 'risk_taker',
    title: '–ë–µ–∑—Ä–∞—Å—Å—É–¥–Ω—ã–π',
    description: '50 –Ω–∞–∂–∞—Ç–∏–π –≤ —Ä–µ–∂–∏–º–µ High Risk',
    icon: 'üî•',
    requirement: 50,
    progress: 0,
    completed: false,
    reward: 500,
    category: 'risk'
  },
  {
    id: 'time_survivor',
    title: '–í—ã–∂–∏–≤–∞–ª—å—â–∏–∫',
    description: '–í—ã–∂–∏–≤–∏ 5 –º–∏–Ω—É—Ç –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏—è',
    icon: '‚è∞',
    requirement: 300,
    progress: 0,
    completed: false,
    reward: 1000,
    category: 'survival'
  }
];

export const useGameStore = create<GameStore>((set, get) => ({
  // Initial state
  gameState: defaultGameState,
  player: defaultPlayer,
  singleMode: defaultSingleMode,
  achievements: defaultAchievements,
  sounds: defaultSounds,
  showElectricSparks: false,
  sparksIntensity: 'medium',
  showScreenShake: false,
  aiElectrician: {
    name: '–ò–≤–∞–Ω –≠–ª–µ–∫—Ç—Ä–∏–∫',
    energy: 100,
    maxEnergy: 100,
    equipment: {
      battery: 100,
      capacitor: 100,
      wires: 100,
      generator: 100
    },
    mood: 'confident',
    experience: 50,
    isActive: false,
    lastMessage: '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
    messageTime: 0,
    failuresCount: 0,
    successfulDischarges: 0,
    workingEfficiency: 100,
    canWork: true
  },
  levelUpNotification: {
    isVisible: false,
    level: null,
    voltsReward: 0
  },

  // Actions
  startSingleMode: (difficulty) => {
    set({
      gameState: {
        ...get().gameState,
        mode: 'single',
        isPlaying: true,
        gameTime: 0,
        score: 0
      },
      singleMode: {
        ...defaultSingleMode,
        difficulty
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
    setTimeout(() => {
      get().startAIElectrician();
    }, 3000); // –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
  },

  startMultiplayerMode: (mode: 'duel' | 'tournament' | 'coop') => {
    let gameMode: 'multiplayer' | 'duel' = 'multiplayer';
    
    // –ï—Å–ª–∏ —ç—Ç–æ –¥—É—ç–ª—å, —Å—Ç–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    if (mode === 'duel') {
      gameMode = 'duel';
    }
    
    set({
      gameState: {
        ...get().gameState,
        mode: gameMode,
        isPlaying: true,
        gameTime: 0,
        score: 0
      }
    });
    
    console.log(`Starting multiplayer mode: ${mode}`);
  },

  clickOutlet: () => {
    const state = get();
    const now = Date.now();
    const timeSinceLastClick = now - state.singleMode.lastClickTime;
    
    // Calculate risk level based on timing
    let currentRisk: SingleModeState['currentRisk'] = 'low';
    if (timeSinceLastClick < 1000) currentRisk = 'extreme';
    else if (timeSinceLastClick < 2000) currentRisk = 'high';
    else if (timeSinceLastClick < 3000) currentRisk = 'medium';

    // Calculate danger level (affects warning signs)
    const dangerLevel = Math.min(100, 
      (state.singleMode.streakCount * 2) + // –ë–æ–ª—å—à–µ —Å–µ—Ä–∏—è = –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
      (currentRisk === 'extreme' ? 40 : 
       currentRisk === 'high' ? 25 : 
       currentRisk === 'medium' ? 15 : 5) + // –†–∏—Å–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
      (state.player.luckCoefficient < 30 ? 20 : 0) // –ù–∏–∑–∫–∞—è —É–¥–∞—á–∞ = –±–æ–ª—å—à–µ –æ–ø–∞—Å–Ω–æ—Å—Ç—å
    );

    // Activate warning signs if danger is high
    const warningSignsActive = dangerLevel > 60;

    // Update click stats
    set({
      player: {
        ...state.player,
        totalClicks: state.player.totalClicks + 1
      },
      singleMode: {
        ...state.singleMode,
        lastClickTime: now,
        currentRisk,
        dangerLevel,
        warningSignsActive
      }
    });

    // Update luck coefficient and restore indicator if needed
    get().updateLuckCoefficient();
  },

  updateScore: (scoreData: ScoreData) => {
    const state = get();
    const newScore = state.gameState.score + scoreData.totalPoints;
    const newVolts = state.player.volts + scoreData.totalPoints;
    
    // Update streak if it was a success
    const isSuccess = scoreData.reason !== '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–æ–º';
    const newStreak = isSuccess ? state.player.streak + 1 : 0;
    const newStreakCount = isSuccess ? state.singleMode.streakCount + 1 : 0;
    
    // Calculate experience based on action
    let experienceGained = 0;
    if (isSuccess) {
      // Base experience for successful click
      experienceGained = EXPERIENCE_REWARDS.SAFE_CLICK;
      
      // Bonus experience for risky clicks
      if (scoreData.riskMultiplier >= 2.0) {
        experienceGained = EXPERIENCE_REWARDS.RISKY_CLICK;
      }
      if (scoreData.riskMultiplier >= 3.0) {
        experienceGained = EXPERIENCE_REWARDS.EXTREME_CLICK;
      }
      
      // Bonus experience for streaks
      if (newStreak === 5) experienceGained += EXPERIENCE_REWARDS.STREAK_5;
      if (newStreak === 10) experienceGained += EXPERIENCE_REWARDS.STREAK_10;
      if (newStreak === 25) experienceGained += EXPERIENCE_REWARDS.STREAK_25;
      if (newStreak === 50) experienceGained += EXPERIENCE_REWARDS.STREAK_50;
    } else {
      // Small experience even for getting shocked
      experienceGained = EXPERIENCE_REWARDS.SHOCK_SURVIVAL;
    }
    
    // Update success/shock statistics and calculate luck coefficient
    const newSuccessfulClicks = isSuccess ? state.player.successfulClicks + 1 : state.player.successfulClicks;
    const newShockedClicks = !isSuccess ? state.player.shockedClicks + 1 : state.player.shockedClicks;
    const totalAttempts = newSuccessfulClicks + newShockedClicks;
    const newLuckCoefficient = totalAttempts > 0 ? Math.round((newSuccessfulClicks / totalAttempts) * 100) : 50;
    
    set({
      gameState: {
        ...state.gameState,
        score: newScore
      },
      player: {
        ...state.player,
        volts: newVolts,
        streak: newStreak,
        successfulClicks: newSuccessfulClicks,
        shockedClicks: newShockedClicks,
        luckCoefficient: newLuckCoefficient
      },
      singleMode: {
        ...state.singleMode,
        streakCount: newStreakCount
      }
    });

    // Add experience
    const { addExperience } = get();
    addExperience(experienceGained);

    // Check for achievements
    const { unlockAchievement } = get();
    if (state.player.totalClicks === 0) {
      unlockAchievement('first_click');
    }
    if (newStreak === 5) unlockAchievement('survivor_5');
    if (newStreak === 10) unlockAchievement('survivor_10');
    if (newStreak === 25) unlockAchievement('survivor_25');
  },

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç —É–¥–∞—Ä–∞ —Ç–æ–∫–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ª—å—Ç
  calculateShockImpact: (volts: number): ShockImpact => {
    let damage: number;
    let severity: 'mild' | 'moderate' | 'severe' | 'critical';
    let duration: number;
    let luckHideDuration: number;

    if (volts < 50) {
      damage = Math.floor(volts * 0.1) + 1; // 1-5 –æ—á–∫–æ–≤
      severity = 'mild';
      duration = 1000;
      luckHideDuration = 2000;
    } else if (volts < 150) {
      damage = Math.floor(volts * 0.15) + 5; // 5-27 –æ—á–∫–æ–≤
      severity = 'moderate';
      duration = 1500;
      luckHideDuration = 3000;
    } else if (volts < 300) {
      damage = Math.floor(volts * 0.2) + 10; // 10-70 –æ—á–∫–æ–≤
      severity = 'severe';
      duration = 2000;
      luckHideDuration = 5000;
    } else {
      damage = Math.floor(volts * 0.25) + 20; // 20+ –æ—á–∫–æ–≤
      severity = 'critical';
      duration = 3000;
      luckHideDuration = 8000;
    }

    const voltsDrained = Math.floor(volts * 0.7); // –¢–µ—Ä—è–µ–º 70% –≤–æ–ª—å—Ç

    return {
      damage,
      voltsDrained,
      duration,
      severity,
      luckHideDuration
    };
  },

  triggerShock: () => {
    const state = get();
    if (!state.gameState.isPlaying) return;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –≤–æ–ª—å—Ç
    const shockImpact = state.calculateShockImpact(state.player.volts);
    
    set({
      player: {
        ...state.player,
        volts: Math.max(0, state.player.volts - shockImpact.voltsDrained),
        shockedClicks: state.player.shockedClicks + 1,
        totalClicks: state.player.totalClicks + 1,
        streak: 0,
        luckIndicatorHidden: true,
        luckHiddenUntil: Date.now() + shockImpact.luckHideDuration
      },
      showElectricSparks: true,
      sparksIntensity: shockImpact.severity === 'critical' ? 'extreme' : 
                      shockImpact.severity === 'severe' ? 'high' :
                      shockImpact.severity === 'moderate' ? 'medium' : 'low',
      showScreenShake: true,
      gameState: {
        ...state.gameState,
        score: Math.max(0, state.gameState.score - shockImpact.damage)
      },
      singleMode: {
        ...state.singleMode,
        streakCount: 0
      }
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      set({
        showElectricSparks: false,
        showScreenShake: false
      });
    }, shockImpact.duration);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–∞—á–∏
    get().updateLuckCoefficient();
  },

  endGame: () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
    get().stopAIElectrician();
    
    set({
      gameState: {
        ...get().gameState,
        mode: 'menu',
        isPlaying: false
      }
    });
  },

  unlockAchievement: (achievementId: string) => {
    const state = get();
    const achievement = state.achievements.find(a => a.id === achievementId);
    
    if (achievement && !achievement.completed) {
      set({
        achievements: state.achievements.map(a =>
          a.id === achievementId 
            ? { ...a, completed: true, progress: a.requirement }
            : a
        ),
        player: {
          ...state.player,
          volts: state.player.volts + achievement.reward
        }
      });
    }
  },

  updatePlayerStats: (stats: Partial<Player>) => {
    const state = get();
    set({
      player: {
        ...state.player,
        ...stats
      }
    });
  },

  addExperience: (amount: number) => {
    const state = get();
    const newExperience = state.player.experience + amount;
    const oldLevel = calculateLevel(state.player.experience);
    const newLevel = calculateLevel(newExperience);
    
    // Check if player leveled up
    if (newLevel.level > oldLevel.level) {
      // Player leveled up! Give rewards
      const newVolts = state.player.volts + newLevel.voltsReward;
      
      set({
        player: {
          ...state.player,
          experience: newExperience,
          level: newLevel.level,
          volts: newVolts
        }
      });
      
      // Show level up notification
      const { showLevelUpNotification } = get();
      showLevelUpNotification(newLevel, newLevel.voltsReward);
    } else {
      // Just add experience
      set({
        player: {
          ...state.player,
          experience: newExperience
        }
      });
    }
  },

  getCurrentLevelInfo: () => {
    const state = get();
    return {
      currentLevel: calculateLevel(state.player.experience),
      progressInfo: getExperienceToNextLevel(state.player.experience)
    };
  },

  showLevelUpNotification: (level, voltsReward) => {
    set({
      levelUpNotification: {
        isVisible: true,
        level,
        voltsReward
      }
    });
  },

  hideLevelUpNotification: () => {
    set({
      levelUpNotification: {
        isVisible: false,
        level: null,
        voltsReward: 0
      }
    });
  },

  updateLuckCoefficient: () => {
    const state = get();
    const totalAttempts = state.player.totalClicks;
    const successfulClicks = state.player.successfulClicks;
    
    const newLuckCoefficient = totalAttempts > 0 ? 
      Math.round((successfulClicks / totalAttempts) * 100) : 50;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–¥–∞—á–∏
    const shouldRestoreLuckIndicator = state.player.luckIndicatorHidden && 
                                      Date.now() >= state.player.luckHiddenUntil;
    
    set({
      player: {
        ...state.player,
        luckCoefficient: newLuckCoefficient,
        luckIndicatorHidden: shouldRestoreLuckIndicator ? false : state.player.luckIndicatorHidden
      }
    });
  },

  // AI Electrician System
  startAIElectrician: () => {
    const state = get();
    if (!state.gameState.isPlaying) return;

    set({
      singleMode: {
        ...state.singleMode,
        aiElectricianActive: true
      },
      aiElectrician: {
        ...state.aiElectrician,
        isActive: true,
        lastMessage: get().getAIElectricianMessage(),
        messageTime: Date.now()
      }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
    const aiUpdateInterval = setInterval(() => {
      const currentState = get();
      if (!currentState.singleMode.aiElectricianActive || !currentState.gameState.isPlaying) {
        clearInterval(aiUpdateInterval);
        return;
      }
      
      get().updateAIElectrician();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5-10 —Å–µ–∫—É–Ω–¥
      if (Math.random() < 0.3) {
        set({
          aiElectrician: {
            ...get().aiElectrician,
            lastMessage: get().getAIElectricianMessage(),
            messageTime: Date.now()
          }
        });
      }
    }, 2000);

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑—Ä—è–¥
    get().scheduleNextDischarge();
  },

  stopAIElectrician: () => {
    set(state => ({
      singleMode: {
        ...state.singleMode,
        aiElectricianActive: false,
        nextDischargeTime: 0,
        dischargeWarningTime: 0,
        isDischarging: false
      },
      aiElectrician: {
        ...state.aiElectrician,
        isActive: false,
        lastMessage: '–°–º–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –∏–¥—É –¥–æ–º–æ–π!',
        messageTime: Date.now()
      }
    }));
  },

  scheduleNextDischarge: () => {
    const state = get();
    if (!state.singleMode.aiElectricianActive) return;

    const now = Date.now();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ AI –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    const getDischargeInterval = () => {
      const baseInterval = {
        easy: { min: 8000, max: 15000 },    // 8-15 —Å–µ–∫—É–Ω–¥
        medium: { min: 6000, max: 12000 },  // 6-12 —Å–µ–∫—É–Ω–¥  
        hard: { min: 4000, max: 9000 },     // 4-9 —Å–µ–∫—É–Ω–¥
        extreme: { min: 3000, max: 7000 }   // 3-7 —Å–µ–∫—É–Ω–¥
      }[state.singleMode.difficulty];

      // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –ø–∞—Ç—Ç–µ—Ä–Ω–∞
      let modifier = 1.0;
      if (state.singleMode.aiPattern === 'burst') modifier = 0.7;      // –ß–∞—â–µ
      else if (state.singleMode.aiPattern === 'random') modifier = Math.random() * 0.8 + 0.6; // 0.6-1.4
      else if (state.singleMode.aiPattern === 'adaptive') {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —É—Å–ø–µ—Ö–∞–º –∏–≥—Ä–æ–∫–∞
        const luckCoeff = state.player.luckCoefficient;
        modifier = luckCoeff > 70 ? 0.8 : luckCoeff < 30 ? 1.3 : 1.0;
      }

      const min = baseInterval.min * modifier;
      const max = baseInterval.max * modifier;
      return Math.random() * (max - min) + min;
    };

    const interval = getDischargeInterval();
    const nextDischargeTime = now + interval;
    const dischargeWarningTime = nextDischargeTime - 3000; // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã

    set({
      singleMode: {
        ...state.singleMode,
        nextDischargeTime,
        dischargeWarningTime
      }
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    setTimeout(() => {
      get().checkForDischarge();
    }, interval);
  },

  checkForDischarge: () => {
    const state = get();
    if (!state.singleMode.aiElectricianActive || !state.gameState.isPlaying) return;

    const now = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (!state.singleMode.warningSignsActive && now >= state.singleMode.dischargeWarningTime) {
      set({
        singleMode: {
          ...state.singleMode,
          warningSignsActive: true,
          dangerLevel: 85 // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä—è–¥
    if (now >= state.singleMode.nextDischargeTime && !state.singleMode.isDischarging) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑—Ä—è–¥
      set({
        singleMode: {
          ...state.singleMode,
          isDischarging: true
        },
        showElectricSparks: true,
        sparksIntensity: 'high'
      });

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
      set({
        aiElectrician: {
          ...state.aiElectrician,
          successfulDischarges: state.aiElectrician.successfulDischarges + 1,
          lastMessage: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑—Ä—è–¥! –í—Å–µ –ø–æ –ø–ª–∞–Ω—É!',
          messageTime: now
        }
      });

      // –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–Ω –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –æ—Ç —Ä–∞–∑—Ä—è–¥–∞
      if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å —É—Ä–æ–Ω–∞
        get().damageAIElectrician('equipment', Math.random() * 5 + 2);
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑—Ä—è–¥ —á–µ—Ä–µ–∑ dischargeDuration
      setTimeout(() => {
        const currentState = get();
        set({
          singleMode: {
            ...currentState.singleMode,
            isDischarging: false,
            warningSignsActive: false,
            dangerLevel: 0
          },
          showElectricSparks: false
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫–∞
        get().updateAIElectrician();

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑—Ä—è–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ò –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        if (get().aiElectrician.canWork) {
          get().scheduleNextDischarge();
        } else {
          // –ò–ò —ç–ª–µ–∫—Ç—Ä–∏–∫ —Å–ª–æ–º–∞–ª—Å—è
          set({
            aiElectrician: {
              ...get().aiElectrician,
              lastMessage: get().getAIElectricianMessage(),
              messageTime: Date.now()
            }
          });
          get().stopAIElectrician();
        }
      }, state.singleMode.dischargeDuration);
    }
  },

  // AI Electrician management methods
  updateAIElectrician: () => {
    const state = get();
    if (!state.aiElectrician.isActive) return;

    const ai = state.aiElectrician;

    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const energyDrain = ai.workingEfficiency > 80 ? 0.1 : 0.2;
    const newEnergy = Math.max(0, ai.energy - energyDrain);

    // –ò–∑–Ω–æ—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const equipmentWear = Math.random() * 0.05; // 0-5% –∏–∑–Ω–æ—Å–∞
    const newEquipment = {
      battery: Math.max(0, ai.equipment.battery - equipmentWear),
      capacitor: Math.max(0, ai.equipment.capacitor - equipmentWear * 0.5),
      wires: Math.max(0, ai.equipment.wires - equipmentWear * 0.3),
      generator: Math.max(0, ai.equipment.generator - equipmentWear * 0.7)
    };

    // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    const avgEquipment = (newEquipment.battery + newEquipment.capacitor + 
                          newEquipment.wires + newEquipment.generator) / 4;
    const newEfficiency = Math.min(100, (newEnergy * 0.7) + (avgEquipment * 0.3));

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    let newMood = ai.mood;
    if (newEfficiency < 20) newMood = 'broken';
    else if (newEfficiency < 40) newMood = 'tired';
    else if (ai.failuresCount > ai.successfulDischarges) newMood = 'frustrated';
    else if (newEfficiency > 80) newMood = 'confident';
    else newMood = 'angry';

    // –ú–æ–∂–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    const canWork = newEnergy > 10 && avgEquipment > 15;

    set({
      aiElectrician: {
        ...ai,
        energy: newEnergy,
        equipment: newEquipment,
        workingEfficiency: newEfficiency,
        mood: newMood,
        canWork
      }
    });
  },

  damageAIElectrician: (damageType: 'energy' | 'equipment', amount = 10) => {
    const state = get();
    const ai = state.aiElectrician;

    if (damageType === 'energy') {
      const newEnergy = Math.max(0, ai.energy - amount);
      set({
        aiElectrician: {
          ...ai,
          energy: newEnergy,
          failuresCount: ai.failuresCount + 1,
          lastMessage: newEnergy <= 0 ? '–≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—á–∏–ª–∞—Å—å! –ù—É–∂–µ–Ω –æ—Ç–¥—ã—Ö...' : '–ê—É—á! –ú–µ–Ω—è —É–¥–∞—Ä–∏–ª–æ —Ç–æ–∫–æ–º!',
          messageTime: Date.now()
        }
      });
    } else {
      // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const equipmentTypes = ['battery', 'capacitor', 'wires', 'generator'] as const;
      const randomEquipment = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];
      
      const newEquipment = {
        ...ai.equipment,
        [randomEquipment]: Math.max(0, ai.equipment[randomEquipment] - amount)
      };

      set({
        aiElectrician: {
          ...ai,
          equipment: newEquipment,
          failuresCount: ai.failuresCount + 1,
          lastMessage: `–°–ª–æ–º–∞–ª—Å—è ${randomEquipment === 'battery' ? '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä' : 
                                    randomEquipment === 'capacitor' ? '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä' :
                                    randomEquipment === 'wires' ? '–ø—Ä–æ–≤–æ–¥–∞' : '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä'}!`,
          messageTime: Date.now()
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    get().updateAIElectrician();
  },

  repairAIElectrician: (repairType: 'energy' | 'equipment') => {
    const state = get();
    const ai = state.aiElectrician;

    if (repairType === 'energy') {
      const newEnergy = Math.min(ai.maxEnergy, ai.energy + 25);
      const repairMessages = [
        '–°–ø–∞—Å–∏–±–æ! –ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —Å–∏–ª!',
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ª—å—à–µ!',
        '–≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
        '–í–∞—É! –ö–∞–∫ –±—É–¥—Ç–æ –∑–∞–Ω–æ–≤–æ —Ä–æ–¥–∏–ª—Å—è!'
      ];
      set({
        aiElectrician: {
          ...ai,
          energy: newEnergy,
          lastMessage: repairMessages[Math.floor(Math.random() * repairMessages.length)],
          messageTime: Date.now()
        }
      });
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ 20%
      const newEquipment = {
        battery: Math.min(100, ai.equipment.battery + 20),
        capacitor: Math.min(100, ai.equipment.capacitor + 20),
        wires: Math.min(100, ai.equipment.wires + 20),
        generator: Math.min(100, ai.equipment.generator + 20)
      };

      const repairMessages = [
        '–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ!',
        '–¢–µ—Ö–Ω–∏–∫–∞ –∫–∞–∫ –Ω–æ–≤–∞—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
        '–í—Å–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å!',
        '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!'
      ];

      set({
        aiElectrician: {
          ...ai,
          equipment: newEquipment,
          lastMessage: repairMessages[Math.floor(Math.random() * repairMessages.length)],
          messageTime: Date.now()
        }
      });
    }

    get().updateAIElectrician();
  },

  getAIElectricianMessage: () => {
    const state = get();
    const ai = state.aiElectrician;

    const messages = {
      confident: [
        '–Ø –ª—É—á—à–∏–π —ç–ª–µ–∫—Ç—Ä–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ!',
        '–≠—Ç–∞ —Ä–∞–±–æ—Ç–∞ –º–Ω–µ –ø–æ –ø–ª–µ—á—É!',
        '–ù–∏–∫—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–∏—Ç—Å—è –ª—É—á—à–µ –º–µ–Ω—è!',
        '–£ –º–µ–Ω—è –∑–æ–ª–æ—Ç—ã–µ —Ä—É–∫–∏!',
        '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ - –º–æ—è —Å—Ç–∏—Ö–∏—è!',
        '–Ø –∑–Ω–∞—é –≤—Å–µ –æ —Ç–æ–∫–µ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏!',
        '–†–æ–∑–µ—Ç–∫–∏ —Ç—Ä–µ–ø–µ—â—É—Ç –æ—Ç –º–æ–µ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!'
      ],
      frustrated: [
        '–ß—Ç–æ-—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å...',
        '–¢–µ—Ö–Ω–∏–∫–∞ –ø–æ–¥–≤–æ–¥–∏—Ç, –∫–∞–∫ –≤—Å–µ–≥–¥–∞...',
        '–ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?',
        '–û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
        '–ü–æ—á–µ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞–¥–æ?',
        '–ö—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç—É —Å—Ö–µ–º—É?!',
        '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–¥–Ω–∏ –ø—Ä–æ–±–ª–µ–º—ã...'
      ],
      tired: [
        '–£—Å—Ç–∞–ª —è —É–∂–µ...',
        '–ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –∫–æ—Ñ–µ',
        '–°–∏–ª –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å',
        '–•–æ—á–µ—Ç—Å—è –¥–æ–º–æ–π...',
        '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π',
        '–ì–ª–∞–∑–∞ —É–∂–µ —Å–ª–∏–ø–∞—é—Ç—Å—è',
        '–ú–æ–∂–µ—Ç, —Ö–≤–∞—Ç–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?'
      ],
      broken: [
        '–í—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—å! –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        '–≠—Ç–æ –∫–æ–Ω–µ—Ü! –Ø –±–æ–ª—å—à–µ –Ω–µ –º–æ–≥—É!',
        '–í—ã–∑—ã–≤–∞–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞...',
        '–¢–µ—Ö–Ω–∏–∫–∞ –≤ —Ö–ª–∞–º, –∞ —è –±–µ–∑ —Å–∏–ª!',
        '–ê–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ! –í—Å–µ –ø—Ä–æ–ø–∞–ª–æ!',
        '–°–∏—Å—Ç–µ–º–Ω—ã–π —Å–±–æ–π! –ü–æ–º–æ–≥–∏—Ç–µ!',
        '–Ø —Å–ª–æ–º–∞–ª—Å—è –∫–∞–∫ —Å—Ç–∞—Ä–∞—è –ª–∞–º–ø–æ—á–∫–∞!'
      ],
      angry: [
        '–î–∞ —á—Ç–æ –∂ —Ç–∞–∫–æ–µ?! –û–ø—è—Ç—å —Å–±–æ–π!',
        '–ö—Ç–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª —ç—Ç—É —Å—Ö–µ–º—É?!',
        '–†—É–∫–∏ –±—ã –ø–æ–æ—Ç—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º!',
        '–ù–µ—Ä–≤—ã —É–∂–µ –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ!',
        '–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ —Ç–µ—Ä–ø–µ—Ç—å —ç—Ç—É –µ—Ä—É–Ω–¥—É?!',
        '–ì–¥–µ –º–æ–π –º–æ–ª–æ—Ç–æ–∫?! –°–µ–π—á–∞—Å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª—é!',
        '–ü—Ä–æ—Ç–∏–≤–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞! –ù–µ–Ω–∞–≤–∏–∂—É!',
        '–õ—É—á—à–µ –±—ã –ø–æ—à–µ–ª –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã!'
      ]
    };

    const moodMessages = messages[ai.mood] || messages.confident;
    return moodMessages[Math.floor(Math.random() * moodMessages.length)];
  },

  // API integration methods
  submitGameToServer: async () => {
    const state = get();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!apiClient.isAuthenticated()) {
      console.warn('User not authenticated, skipping server submission');
      return { success: false, error: 'Not authenticated' };
    }

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const gameData = {
        score: state.gameState.score,
        level: getDifficultyLevel(state.singleMode.difficulty),
        timePlayed: Math.floor(state.gameState.gameTime / 1000), // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      };

      console.log('Submitting game data to server:', gameData);

      const response = await apiClient.submitScore(gameData);

      if (response.error) {
        console.error('Failed to submit score:', response.error);
        return { success: false, error: response.error };
      }

      if (response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverData = response.data;
        
        set({
          player: {
            ...state.player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.newLevel
          }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –±—ã–ª–æ
        if (serverData.leveledUp) {
          const { showLevelUpNotification } = get();
          showLevelUpNotification(
            { level: serverData.newLevel }, 
            serverData.levelUpReward
          );
        }

        console.log('Successfully submitted score and synced with server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error submitting game to server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  },

  syncWithServer: async () => {
    if (!apiClient.isAuthenticated()) {
      return { success: false, error: 'Not authenticated' };
    }

    try {
      const response = await apiClient.getUserStats();

      if (response.error) {
        return { success: false, error: response.error };
      }

      if (response.data) {
        const serverData = response.data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        set({
          player: {
            ...get().player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.level
          }
        });

        console.log('Successfully synced with server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error syncing with server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  },

  loadStatsFromServer: async () => {
    if (!apiClient.isAuthenticated()) {
      return { success: false, error: 'Not authenticated' };
    }

    try {
      const response = await apiClient.getUserStats();

      if (response.error) {
        return { success: false, error: response.error };
      }

      if (response.data) {
        const serverData = response.data;
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        set({
          player: {
            ...get().player,
            volts: serverData.totalVolts,
            experience: serverData.totalExperience,
            level: serverData.level
          }
        });

        console.log('Successfully loaded stats from server');
        return { success: true };
      }

      return { success: true };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error('Error loading stats from server:', errorMessage);
      return { success: false, error: errorMessage };
    }
  }
}));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
function getDifficultyLevel(difficulty: SingleModeState['difficulty']): number {
  switch (difficulty) {
    case 'easy': return 1;
    case 'medium': return 2;
    case 'hard': return 3;
    case 'extreme': return 4;
    default: return 1;
  }
}
