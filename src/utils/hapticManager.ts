/**
 * Haptic Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–µ–π –≤ Telegram Mini App
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤–∏–±—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
 */

import type { TelegramHapticFeedback } from '../types/telegram';

// –¢–∏–ø—ã –≤–∏–±—Ä–∞—Ü–∏–∏ Telegram Web App
export type HapticType = 'light' | 'medium' | 'heavy' | 'rigid' | 'soft';
export type NotificationType = 'error' | 'success' | 'warning';

// –†–∞—Å—à–∏—Ä—è–µ–º Window –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Telegram
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        HapticFeedback?: TelegramHapticFeedback;
        [key: string]: any;
      };
    };
  }
}

class HapticManager {
  private hapticFeedback: TelegramHapticFeedback | null = null;
  private isEnabled: boolean = true;
  private isTelegramEnvironment: boolean = false;

  constructor() {
    this.initializeTelegramHaptics();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Haptic API
   */
  private initializeTelegramHaptics(): void {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Telegram
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        this.isTelegramEnvironment = true;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HapticFeedback –≤ –æ–±—ä–µ–∫—Ç–µ WebApp
        const webApp = window.Telegram.WebApp as any;
        if (webApp.HapticFeedback) {
          this.hapticFeedback = webApp.HapticFeedback;
          console.log('Telegram Haptic Feedback initialized');
        } else {
          console.log('HapticFeedback not available in this Telegram version');
        }
      } else {
        console.log('Not in Telegram environment, haptics disabled');
      }
    } catch (error) {
      console.warn('Failed to initialize Telegram haptics:', error);
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–±—Ä–∞—Ü–∏–∏
   */
  setEnabled(enabled: boolean): void {
    this.isEnabled = enabled;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∏–±—Ä–∞—Ü–∏–∏
   */
  isAvailable(): boolean {
    return (
      (this.isTelegramEnvironment && this.hapticFeedback !== null) || 
      (typeof window !== 'undefined' && 'navigator' in window && 'vibrate' in navigator)
    ) && this.isEnabled;
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π
   */
  light(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.impactOccurred('light');
    } else {
      this.fallbackVibration(50);
    }
  }

  /**
   * –°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  medium(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.impactOccurred('medium');
    } else {
      this.fallbackVibration(100);
    }
  }

  /**
   * –°–∏–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
   */
  heavy(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.impactOccurred('heavy');
    } else {
      this.fallbackVibration(150);
    }
  }

  /**
   * –ú—è–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–ª–∏–∫–∞—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  soft(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.impactOccurred('soft');
    } else {
      this.fallbackVibration(30);
    }
  }

  /**
   * –ñ–µ—Å—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  rigid(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.impactOccurred('rigid');
    } else {
      this.fallbackVibration(200);
    }
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  success(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.notificationOccurred('success');
    } else {
      this.customPattern([100, 50, 100]);
    }
  }

  error(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.notificationOccurred('error');
    } else {
      this.customPattern([200, 100, 200, 100, 200]);
    }
  }

  warning(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.notificationOccurred('warning');
    } else {
      this.customPattern([150, 50, 150]);
    }
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
   */
  selection(): void {
    if (this.isAvailable()) {
      this.hapticFeedback!.selectionChanged();
    } else {
      this.fallbackVibration(25);
    }
  }

  // ==================== –ò–ì–†–û–í–´–ï –°–û–ë–´–¢–ò–Ø ====================

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ä–æ–∑–µ—Ç–∫—É
   */
  outletPress(): void {
    this.medium();
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–∂–∏–≤–∞–Ω–∏–∏
   */
  survivalSuccess(): void {
    this.success();
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–∫–æ–º
   */
  electricShock(): void {
    this.rigid();
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ 100–º—Å
    setTimeout(() => {
      if (this.isEnabled) this.heavy();
    }, 100);
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
   */
  levelUp(): void {
    // –°–µ—Ä–∏—è –∏–∑ 3-—Ö –≤–∏–±—Ä–∞—Ü–∏–π
    this.success();
    setTimeout(() => this.medium(), 150);
    setTimeout(() => this.success(), 300);
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
   */
  rewardReceived(): void {
    this.light();
    setTimeout(() => this.medium(), 100);
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–∏–π–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  streakAchievement(streakCount: number): void {
    if (streakCount >= 25) {
      // –ú–æ—â–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–∏–π
      this.heavy();
      setTimeout(() => this.heavy(), 200);
      setTimeout(() => this.heavy(), 400);
    } else if (streakCount >= 10) {
      // –°—Ä–µ–¥–Ω—è—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Å–µ—Ä–∏–π
      this.medium();
      setTimeout(() => this.medium(), 150);
    } else if (streakCount >= 5) {
      // –õ–µ–≥–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–µ—Ä–∏–π
      this.light();
      setTimeout(() => this.light(), 100);
    }
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
   */
  itemUsed(): void {
    this.soft();
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
   */
  shopPurchase(): void {
    this.medium();
    setTimeout(() => this.light(), 100);
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥—è—â–µ–º –≤—ã–∑–æ–≤–µ –≤ –∏–≥—Ä—É
   */
  gameInvitation(): void {
    this.warning();
    setTimeout(() => this.light(), 500);
    setTimeout(() => this.light(), 1000);
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
   */
  roundStart(): void {
    this.light();
  }

  /**
   * –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
   */
  gameEnd(isWinner: boolean): void {
    if (isWinner) {
      this.success();
      setTimeout(() => this.medium(), 200);
      setTimeout(() => this.success(), 400);
    } else {
      this.error();
    }
  }

  // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================

  /**
   * –†–µ–∑–µ—Ä–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Telegram API
   */
  private fallbackVibration(duration: number): void {
    if ('navigator' in window && 'vibrate' in navigator) {
      try {
        navigator.vibrate(duration);
        console.log(`üîπ Fallback vibration: ${duration}ms`);
      } catch (error) {
        console.warn('Vibration not supported:', error);
      }
    } else {
      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –≤–∏–±—Ä–∞—Ü–∏–∏
      console.log(`üì≥ Haptic feedback: ${duration}ms (visual only)`);
      this.visualFeedback(duration);
    }
  }

  /**
   * –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –≤–∏–±—Ä–∞—Ü–∏–∏
   */
  private visualFeedback(duration: number): void {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
    const indicator = document.createElement('div');
    indicator.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #FF6B35;
      color: white;
      padding: 8px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: bold;
      z-index: 10000;
      pointer-events: none;
      animation: pulse 0.3s ease-in-out;
    `;
    indicator.textContent = `üì≥ ${duration}ms`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
    if (!document.querySelector('#haptic-style')) {
      const style = document.createElement('style');
      style.id = 'haptic-style';
      style.textContent = `
        @keyframes pulse {
          0% { transform: scale(0.8); opacity: 0; }
          50% { transform: scale(1.1); opacity: 1; }
          100% { transform: scale(1); opacity: 0.8; }
        }
      `;
      document.head.appendChild(style);
    }
    
    document.body.appendChild(indicator);
    
    setTimeout(() => {
      if (indicator.parentNode) {
        indicator.parentNode.removeChild(indicator);
      }
    }, Math.max(duration, 500));
  }

  /**
   * –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤–∏–±—Ä–∞—Ü–∏–∏
   */
  private customPattern(pattern: number[]): void {
    if ('navigator' in window && 'vibrate' in navigator) {
      try {
        navigator.vibrate(pattern);
        console.log(`üîπ Vibration pattern: [${pattern.join(', ')}]ms`);
      } catch (error) {
        console.warn('Vibration pattern not supported:', error);
      }
    } else {
      // –≠–º—É–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      console.log(`üì≥ Haptic pattern: [${pattern.join(', ')}]ms (visual only)`);
      this.visualPatternFeedback(pattern);
    }
  }

  /**
   * –í–∏–∑—É–∞–ª—å–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
   */
  private visualPatternFeedback(pattern: number[]): void {
    let delay = 0;
    for (let i = 0; i < pattern.length; i += 2) {
      const vibrateDuration = pattern[i];
      const pauseDuration = pattern[i + 1] || 0;
      
      setTimeout(() => {
        this.visualFeedback(vibrateDuration);
      }, delay);
      
      delay += vibrateDuration + pauseDuration;
    }
  }

  /**
   * –¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  test(): void {
    this.medium();
    setTimeout(() => this.light(), 200);
    setTimeout(() => this.heavy(), 400);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
export const hapticManager = new HapticManager();

export default hapticManager;
