import { useState, useEffect, useCallback, useRef } from 'react';
import { useGameStore } from '../store/gameStore';

export interface DuelMessage {
  type: 'player_action' | 'player_shocked' | 'player_ready' | 'game_start' | 'game_end' | 'sync_state';
  playerId: string;
  data?: any;
  timestamp: number;
}

export interface DuelRoom {
  id: string;
  players: string[];
  status: 'waiting' | 'ready' | 'playing' | 'finished';
  createdAt: number;
}

export const useDuelConnection = () => {
  const { player } = useGameStore();
  const [isConnected, setIsConnected] = useState(false);
  const [currentRoom, setCurrentRoom] = useState<DuelRoom | null>(null);
  const [opponent, setOpponent] = useState<any>(null);
  const [messages, setMessages] = useState<DuelMessage[]>([]);
  
  // –°–∏–º—É–ª—è—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket)
  const connectionRef = useRef<any>(null);
  const messageQueueRef = useRef<DuelMessage[]>([]);

  // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
  const connect = useCallback(() => {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –¥—É—ç–ª–µ–π...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setTimeout(() => {
      setIsConnected(true);
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –¥—É—ç–ª–µ–π');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      connectionRef.current = setInterval(() => {
        if (messageQueueRef.current.length > 0) {
          const message = messageQueueRef.current.shift();
          if (message) {
            setMessages(prev => [...prev, message]);
          }
        }
      }, 100);
    }, 1000);
  }, []);

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  const disconnect = useCallback(() => {
    if (connectionRef.current) {
      clearInterval(connectionRef.current);
      connectionRef.current = null;
    }
    setIsConnected(false);
    setCurrentRoom(null);
    setOpponent(null);
    setMessages([]);
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥—É—ç–ª–µ–π');
  }, []);

  // –ü–æ–∏—Å–∫ –¥—É—ç–ª–∏
  const findDuel = useCallback(async (): Promise<DuelRoom> => {
    if (!isConnected) {
      throw new Error('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
    }

    console.log('üîç –ü–æ–∏—Å–∫ –¥—É—ç–ª–∏...');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    return new Promise((resolve) => {
      setTimeout(() => {
        const room: DuelRoom = {
          id: `duel_${Date.now()}`,
          players: [player.id, 'bot_opponent'],
          status: 'waiting',
          createdAt: Date.now()
        };
        
        const botOpponent = {
          id: 'bot_opponent',
          name: `–°–æ–ø–µ—Ä–Ω–∏–∫ ${Math.floor(Math.random() * 1000)}`,
          level: Math.max(1, player.level - 2 + Math.floor(Math.random() * 5)),
          volts: Math.floor(Math.random() * 500) + 100,
          isReady: false,
          score: 0,
          streak: 0
        };

        setCurrentRoom(room);
        setOpponent(botOpponent);
        
        console.log('‚úÖ –î—É—ç–ª—å –Ω–∞–π–¥–µ–Ω–∞!', room);
        resolve(room);
      }, 2000 + Math.random() * 3000); // 2-5 —Å–µ–∫—É–Ω–¥ –ø–æ–∏—Å–∫–∞
    });
  }, [isConnected, player.id, player.level]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback((message: Omit<DuelMessage, 'timestamp'>) => {
    if (!isConnected || !currentRoom) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–Ω–∞—Ç—ã');
      return;
    }

    const fullMessage: DuelMessage = {
      ...message,
      timestamp: Date.now()
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', fullMessage);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    if (message.type === 'player_ready') {
      setTimeout(() => {
        messageQueueRef.current.push({
          type: 'player_ready',
          playerId: 'bot_opponent',
          timestamp: Date.now()
        });
      }, 1000 + Math.random() * 2000);
    }

    if (message.type === 'player_action') {
      // –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ –æ—Ç–≤–µ—Ç
      setTimeout(() => {
        const opponentAction = Math.random() < 0.6; // 60% —à–∞–Ω—Å —á—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ç–æ–∂–µ –∫–ª–∏–∫–Ω–µ—Ç
        if (opponentAction) {
          messageQueueRef.current.push({
            type: Math.random() < 0.2 ? 'player_shocked' : 'player_action',
            playerId: 'bot_opponent',
            data: {
              points: Math.floor(Math.random() * 60) + 20,
              volts: Math.floor(Math.random() * 40) + 10
            },
            timestamp: Date.now()
          });
        }
      }, 500 + Math.random() * 2000);
    }
  }, [isConnected, currentRoom]);

  // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–≥—Ä–µ
  const setReady = useCallback(() => {
    sendMessage({
      type: 'player_ready',
      playerId: player.id
    });
  }, [sendMessage, player.id]);

  // –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
  const sendPlayerAction = useCallback((points: number, volts: number) => {
    sendMessage({
      type: 'player_action',
      playerId: player.id,
      data: { points, volts }
    });
  }, [sendMessage, player.id]);

  // –£–¥–∞—Ä —Ç–æ–∫–æ–º
  const sendPlayerShocked = useCallback((damage: number) => {
    sendMessage({
      type: 'player_shocked',
      playerId: player.id,
      data: { damage }
    });
  }, [sendMessage, player.id]);

  // –ü–æ–∫–∏–Ω—É—Ç—å –¥—É—ç–ª—å
  const leaveDuel = useCallback(() => {
    if (currentRoom) {
      sendMessage({
        type: 'game_end',
        playerId: player.id,
        data: { reason: 'left' }
      });
    }
    setCurrentRoom(null);
    setOpponent(null);
    setMessages([]);
  }, [currentRoom, sendMessage, player.id]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      disconnect();
    };
  }, [disconnect]);

  return {
    isConnected,
    currentRoom,
    opponent,
    messages,
    connect,
    disconnect,
    findDuel,
    setReady,
    sendPlayerAction,
    sendPlayerShocked,
    leaveDuel,
    setOpponent // –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
  };
};
