"""
Telegram Bot Manager –¥–ª—è TigerRozetka
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π
"""

import asyncio
import json
import sqlite3
import os
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import aiohttp
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('VITE_TELEGRAM_BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN', '')
WEBHOOK_SECRET = os.getenv('TELEGRAM_WEBHOOK_SECRET', 'your_webhook_secret')
DATABASE_PATH = 'bot_users.db'
BACKEND_API_URL = 'http://localhost:3001'

class TelegramBotManager:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                is_active BOOLEAN DEFAULT 1,
                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                level INTEGER DEFAULT 1,
                total_games INTEGER DEFAULT 0,
                wins INTEGER DEFAULT 0,
                losses INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS active_duels (
                id TEXT PRIMARY KEY,
                player1_id INTEGER,
                player2_id INTEGER,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                game_data TEXT,
                FOREIGN KEY (player1_id) REFERENCES bot_users (user_id),
                FOREIGN KEY (player2_id) REFERENCES bot_users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    async def register_user(self, user_id: int, username: str = None, 
                           first_name: str = None, last_name: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO bot_users 
            (user_id, username, first_name, last_name, last_seen)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name, datetime.now()))
        
        conn.commit()
        conn.close()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {first_name} (@{username})")
    
    async def get_active_users(self, exclude_user_id: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥—É—ç–ª–µ–π"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        
        query = '''
            SELECT user_id, username, first_name, last_name, level, total_games, wins
            FROM bot_users 
            WHERE is_active = 1 AND last_seen > ?
        '''
        params = [week_ago]
        
        if exclude_user_id:
            query += ' AND user_id != ?'
            params.append(exclude_user_id)
        
        query += ' ORDER BY level DESC, wins DESC LIMIT 20'
        
        cursor.execute(query, params)
        users = []
        
        for row in cursor.fetchall():
            users.append({
                'id': row[0],
                'username': row[1],
                'firstName': row[2],
                'lastName': row[3],
                'level': row[4],
                'totalGames': row[5],
                'wins': row[6]
            })
        
        conn.close()
        return users
    
    async def create_duel_invite(self, from_user_id: int, to_user_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å"""
        import uuid
        
        duel_id = str(uuid.uuid4())
        expires_at = datetime.now() + timedelta(minutes=5)
        
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO active_duels (id, player1_id, player2_id, expires_at)
            VALUES (?, ?, ?, ?)
        ''', (duel_id, from_user_id, to_user_id, expires_at))
        
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await self.send_duel_notification(from_user_id, to_user_id, duel_id)
        
        return duel_id
    
    async def send_duel_notification(self, from_user_id: int, to_user_id: int, duel_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥—É—ç–ª–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('SELECT first_name, level FROM bot_users WHERE user_id = ?', (from_user_id,))
        sender_info = cursor.fetchone()
        conn.close()
        
        if sender_info:
            sender_name = sender_info[0]
            sender_level = sender_info[1]
            
            message = f"""üéÆ‚öîÔ∏è –í–´–ó–û–í –ù–ê –î–£–≠–õ–¨!

{sender_name} (–£—Ä–æ–≤–µ–Ω—å {sender_level}) –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å –≤ TigerRozetka!

‚ö° –ò–≥—Ä–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
üèÜ –ö—Ç–æ –Ω–∞–±–µ—Ä–µ—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ - —Ç–æ—Ç –ø–æ–±–µ–¥–∏–ª!
‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å

–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"""

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –¥—É—ç–ª—å", callback_data=f"accept_duel:{duel_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_duel:{duel_id}")
                ],
                [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", url="https://orspiritus.github.io/tigerrosette/")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await self.bot.send_message(
                    chat_id=to_user_id,
                    text=message,
                    reply_markup=reply_markup
                )
                print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—É—ç–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {to_user_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def handle_duel_response(self, user_id: int, duel_id: str, accepted: bool):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—É—ç–ª–∏"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥—É—ç–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
        cursor.execute('''
            SELECT player1_id, player2_id, expires_at, status 
            FROM active_duels 
            WHERE id = ? AND player2_id = ?
        ''', (duel_id, user_id))
        
        duel = cursor.fetchone()
        
        if not duel:
            await self.bot.send_message(user_id, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ")
            return
        
        player1_id, player2_id, expires_at, status = duel
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.fromisoformat(expires_at) < datetime.now():
            cursor.execute('DELETE FROM active_duels WHERE id = ?', (duel_id,))
            conn.commit()
            conn.close()
            await self.bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")
            return
        
        if accepted:
            # –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
            cursor.execute(
                'UPDATE active_duels SET status = ? WHERE id = ?',
                ('accepted', duel_id)
            )
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            game_url = f"https://orspiritus.github.io/tigerrosette/?duel={duel_id}"
            
            await self.bot.send_message(
                player1_id,
                f"‚úÖ –í–∞—à –≤—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç! –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\nüéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É: {game_url}"
            )
            await self.bot.send_message(
                player2_id,
                f"‚öîÔ∏è –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –£–¥–∞—á–∏!\n\nüéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É: {game_url}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ backend –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await self.notify_backend_duel_start(duel_id, player1_id, player2_id)
            
        else:
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
            cursor.execute('DELETE FROM active_duels WHERE id = ?', (duel_id,))
            conn.commit()
            
            await self.bot.send_message(player1_id, "‚ùå –í–∞—à –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            await self.bot.send_message(user_id, "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å")
        
        conn.close()
    
    async def notify_backend_duel_start(self, duel_id: str, player1_id: int, player2_id: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ backend –æ –Ω–∞—á–∞–ª–µ –¥—É—ç–ª–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'duelId': duel_id,
                    'player1Id': player1_id,
                    'player2Id': player2_id,
                    'status': 'started'
                }
                
                async with session.post(f'{BACKEND_API_URL}/api/duels/start', json=data) as response:
                    if response.status == 200:
                        print(f"‚úÖ Backend —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –¥—É—ç–ª–∏: {duel_id}")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è backend: {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å backend: {e}")
    
    async def cleanup_expired_duels(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π"""
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM active_duels WHERE expires_at < ?', (datetime.now(),))
        deleted = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        if deleted > 0:
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π: {deleted}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot_manager = TelegramBotManager()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    await bot_manager.register_user(
        user.id, user.username, user.first_name, user.last_name
    )
    
    welcome_message = f"""üêÖ‚ö° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TigerRozetka, {user.first_name}!

–û–ø–∞—Å–Ω–∞—è –∏–≥—Ä–∞ —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º –∂–¥–µ—Ç –≤–∞—Å!

üéÆ –ö–æ–º–∞–Ω–¥—ã:
/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/duel - –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–∏  
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

üöÄ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ TigerRozetka", url="https://orspiritus.github.io/tigerrosette/")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def duel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /duel"""
    user_id = update.effective_user.id
    users = await bot_manager.get_active_users(exclude_user_id=user_id)
    
    if not users:
        await update.message.reply_text("üòî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥—É—ç–ª–∏. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞!")
        return
    
    message = "‚öîÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –¥–ª—è –¥—É—ç–ª–∏:\n\n"
    
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = []
    
    for user in users[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –∏–≥—Ä–æ–∫–æ–≤
        name = user['firstName']
        if user['lastName']:
            name += f" {user['lastName']}"
        if user['username']:
            name += f" (@{user['username']})"
        
        message += f"üë§ {name} - –£—Ä–æ–≤–µ–Ω—å {user['level']}\n"
        message += f"   üèÜ –ü–æ–±–µ–¥: {user['wins']}/{user['totalGames']}\n\n"
        
        button_text = f"‚öîÔ∏è –í—ã–∑–≤–∞—Ç—å {user['firstName']}"
        callback_data = f"challenge:{user['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", url="https://orspiritus.github.io/tigerrosette/")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT level, total_games, wins, losses 
        FROM bot_users 
        WHERE user_id = ?
    ''', (user_id,))
    
    stats = cursor.fetchone()
    conn.close()
    
    if stats:
        level, total_games, wins, losses = stats
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        
        message = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

‚ö° –£—Ä–æ–≤–µ–Ω—å: {level}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}
üèÜ –ü–æ–±–µ–¥: {wins}
üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%

üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!"""
    else:
        message = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å!"
    
    keyboard = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", url="https://orspiritus.github.io/tigerrosette/")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('challenge:'):
        # –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
        target_user_id = int(data.split(':')[1])
        duel_id = await bot_manager.create_duel_invite(user_id, target_user_id)
        await query.edit_message_text("‚öîÔ∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        
    elif data.startswith('accept_duel:'):
        # –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
        duel_id = data.split(':')[1]
        await bot_manager.handle_duel_response(user_id, duel_id, True)
        await query.edit_message_text("‚úÖ –î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É.")
        
    elif data.startswith('decline_duel:'):
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
        duel_id = data.split(':')[1]
        await bot_manager.handle_duel_response(user_id, duel_id, False)
        await query.edit_message_text("‚ùå –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å frontend
async def get_available_players(user_id: int) -> List[Dict]:
    """API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
    return await bot_manager.get_active_users(exclude_user_id=user_id)

async def create_duel_challenge(from_user_id: int, to_user_id: int) -> str:
    """API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å"""
    return await bot_manager.create_duel_invite(from_user_id, to_user_id)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏
async def cleanup_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –¥—É—ç–ª–µ–π"""
    while True:
        await bot_manager.cleanup_expired_duels()
        await asyncio.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("duel", duel_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(MessageHandler(filters.ALL, lambda update, context: bot_manager.register_user(
        update.effective_user.id, update.effective_user.username, 
        update.effective_user.first_name, update.effective_user.last_name
    )))
    
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    print("üöÄ TigerRozetka Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /duel, /stats")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
    loop = asyncio.get_event_loop()
    loop.create_task(cleanup_task())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
